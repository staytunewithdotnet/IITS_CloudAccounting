// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class RecurringMasterBLL
    {
        private RecurringMasterTableAdapter _RecurringMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddRecurring(int iCompanyID, DateTime? dtRecurringSchedule, int iHowOften, string sHowManyInvoice, string sRemainingInvoice, DateTime? dtNextDate, int? iClientID, int? iCurrencyID, string sRecurringNumber, DateTime? dtRecurringDate, string sPONumber, decimal? dDiscount, decimal? dDiscountAmt, bool bProprateFirstInvoice, int? iProprateFirstInvoiceDay, bool bRecurringActive, string sNotes, string sTerms, string sRecurringStatus, decimal? dRecurringTotal, bool bActive, bool bArchived, bool bDeleted)
        {
            int? recurringID = 0;
            this.Adapter.Insert(ref recurringID, new int?(iCompanyID), dtRecurringSchedule, new int?(iHowOften), sHowManyInvoice, sRemainingInvoice, dtNextDate, iClientID, iCurrencyID, sRecurringNumber, dtRecurringDate, sPONumber, dDiscount, dDiscountAmt, new bool?(bProprateFirstInvoice), iProprateFirstInvoiceDay, new bool?(bRecurringActive), sNotes, sTerms, sRecurringStatus, dRecurringTotal, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
            return recurringID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByClient(int iClientID)
        {
            try
            {
                this.Adapter.DeleteByClientID(new int?(iClientID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.DeleteByCompanyID(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteRecurring(int iRecurringID)
        {
            try
            {
                this.Adapter.Delete(new int?(iRecurringID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringMasterDataTable GetAllActiveTodayRecurring()
        {
            return this.Adapter.GetAllActiveTodayRecurring();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.RecurringMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringMasterDataTable GetDataByClientID(int iClientID)
        {
            return this.Adapter.GetDataByClientID(new int?(iClientID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringMasterDataTable GetDataByCompanyStaffStatus(int iCompanyID, int iStaffID, bool bActive, bool bArchived, bool bDeleted, string sRecurringNumber, string sPONum, string sNotes, string sClient, string sItemname, string sItemDesc, decimal? dTotalFrom, decimal? dTotalTo, int? iCurrency, int? iFrequency)
        {
            return this.Adapter.GetDataByCompanyStaffIDAndStatus(new int?(iCompanyID), new int?(iStaffID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted), sRecurringNumber, sPONum, sNotes, sClient, sItemname, sItemDesc, dTotalFrom, dTotalTo, iCurrency, iFrequency);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringMasterDataTable GetDataByCompanyStatus(int iCompanyID, bool bActive, bool bArchived, bool bDeleted, string sRecurringNumber, string sPONum, string sNotes, string sClient, string sItemname, string sItemDesc, decimal? dTotalFrom, decimal? dTotalTo, int? iCurrency, int? iFrequency)
        {
            return this.Adapter.GetDataByCompanyIDAndStatus(new int?(iCompanyID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted), sRecurringNumber, sPONum, sNotes, sClient, sItemname, sItemDesc, dTotalFrom, dTotalTo, iCurrency, iFrequency);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringMasterDataTable GetDataByRecurringID(int iRecurringID)
        {
            return this.Adapter.GetDataByRecurringID(new int?(iRecurringID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateForSentInvoice(int iRecurringID, string sRemainingInvoice, DateTime dtNextDate, bool bRecurringActive)
        {
            try
            {
                this.Adapter.UpdateForSentInvoice(new int?(iRecurringID), sRemainingInvoice, new DateTime?(dtNextDate), new bool?(bRecurringActive));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateRecurring(int iRecurringID, int iCompanyID, DateTime? dtRecurringSchedule, int iHowOften, string sHowManyInvoice, string sRemainingInvoice, DateTime dtNextDate, int? iClientID, int? iCurrencyID, string sRecurringNumber, DateTime? dtRecurringDate, string sPONumber, decimal? dDiscount, decimal? dDiscountAmt, bool bProprateFirstInvoice, int? iProprateFirstInvoiceDay, bool bRecurringActive, string sNotes, string sTerms, string sRecurringStatus, decimal? dRecurringTotal, bool bActive, bool bArchived, bool bDeleted)
        {
            try
            {
                this.Adapter.Update(new int?(iRecurringID), new int?(iCompanyID), dtRecurringSchedule, new int?(iHowOften), sHowManyInvoice, sRemainingInvoice, new DateTime?(dtNextDate), iClientID, iCurrencyID, sRecurringNumber, dtRecurringDate, sPONumber, dDiscount, dDiscountAmt, new bool?(bProprateFirstInvoice), iProprateFirstInvoiceDay, new bool?(bRecurringActive), sNotes, sTerms, sRecurringStatus, dRecurringTotal, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenAnyBit(int iRecurringID, bool bActive, bool bDeleted, bool bArchived)
        {
            try
            {
                this.Adapter.UpdateWhenAnyBit(new int?(iRecurringID), new bool?(bActive), new bool?(bDeleted), new bool?(bArchived));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected RecurringMasterTableAdapter Adapter
        {
            get
            {
                if (this._RecurringMasterAdapter == null)
                {
                    return new RecurringMasterTableAdapter();
                }
                return this._RecurringMasterAdapter;
            }
        }
    }
}
