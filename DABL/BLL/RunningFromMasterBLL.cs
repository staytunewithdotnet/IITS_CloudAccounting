// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class RunningFromMasterBLL
    {
        private RunningFromMasterTableAdapter _RunningFromMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddRunningFrom(string sRunningFromName, string sRunningFromDesc, bool bRunningFromStatus)
        {
            int? runningFromID = 0;
            this.Adapter.Insert(ref runningFromID, sRunningFromName, sRunningFromDesc, new bool?(bRunningFromStatus));
            return runningFromID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteRunningFrom(int iRunningFromID)
        {
            try
            {
                this.Adapter.Delete(new int?(iRunningFromID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.RunningFromMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RunningFromMasterDataTable GetDataByRunningFromID(int iRunningFromID)
        {
            return this.Adapter.GetDataByRunningFromID(new int?(iRunningFromID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RunningFromMasterDataTable GetDataByRunningFromName(string sRunningFromName)
        {
            return this.Adapter.GetDataByRunningFrom(sRunningFromName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateRunningFrom(int iRunningFromID, string sRunningFromName, string sRunningFromDesc, bool bRunningFromStatus)
        {
            try
            {
                this.Adapter.Update(new int?(iRunningFromID), sRunningFromName, sRunningFromDesc, new bool?(bRunningFromStatus));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected RunningFromMasterTableAdapter Adapter
        {
            get
            {
                if (this._RunningFromMasterAdapter == null)
                {
                    return new RunningFromMasterTableAdapter();
                }
                return this._RunningFromMasterAdapter;
            }
        }
    }
}
