// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class FrequencyMasterBLL
    {
        private FrequencyMasterTableAdapter _FrequencyMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddFrequency(string sFrequencyName, int iNoOfDays, string sFrequencyDesc, bool bFrequencyStatus)
        {
            int? frequencyID = 0;
            this.Adapter.Insert(ref frequencyID, sFrequencyName, new int?(iNoOfDays), sFrequencyDesc, new bool?(bFrequencyStatus));
            return frequencyID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteFrequency(int iFrequencyID)
        {
            try
            {
                this.Adapter.Delete(new int?(iFrequencyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.FrequencyMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.FrequencyMasterDataTable GetDataByFrequencyID(int iFrequencyID)
        {
            return this.Adapter.GetDataByFrequencyID(new int?(iFrequencyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.FrequencyMasterDataTable GetDataByFrequencyName(string sFrequencyName)
        {
            return this.Adapter.GetDataByFrequencyName(sFrequencyName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateFrequency(int iFrequencyID, string sFrequencyName, int iNoOfDays, string sFrequencyDesc, bool bFrequencyStatus)
        {
            try
            {
                this.Adapter.Update(new int?(iFrequencyID), sFrequencyName, new int?(iNoOfDays), sFrequencyDesc, new bool?(bFrequencyStatus));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected FrequencyMasterTableAdapter Adapter
        {
            get
            {
                if (this._FrequencyMasterAdapter == null)
                {
                    return new FrequencyMasterTableAdapter();
                }
                return this._FrequencyMasterAdapter;
            }
        }
    }
}
