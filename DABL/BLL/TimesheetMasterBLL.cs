// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class TimesheetMasterBLL
    {
        private TimesheetMasterTableAdapter _TimesheetMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddTimesheet(int iCompanyID, DateTime? dtTimesheetDate, int iProjectID, int iTaskID, decimal? dHours, string sNotes, bool bBilled, bool bUnbilled, string sEntryFor, string sEntryForRole, string sEntryBy, DateTime? dtEntryDate)
        {
            int? timesheetID = 0;
            this.Adapter.Insert(ref timesheetID, new int?(iCompanyID), dtTimesheetDate, new int?(iProjectID), new int?(iTaskID), dHours, sNotes, new bool?(bBilled), new bool?(bUnbilled), sEntryFor, sEntryForRole, sEntryBy, dtEntryDate);
            return timesheetID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.DeleteByCompanyID(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteTimesheet(int iTimesheetID)
        {
            try
            {
                this.Adapter.Delete(new int?(iTimesheetID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.TimesheetMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TimesheetMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TimesheetMasterDataTable GetDataByCompanyIDANDEntryForWithDate(int iCompanyID, string sEntryFor, DateTime? dtTimesheetDate)
        {
            return this.Adapter.GetDataByCompanyIDANDEntryForWithDate(new int?(iCompanyID), sEntryFor, dtTimesheetDate);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TimesheetMasterDataTable GetDataByCompanyIDWithDate(int iCompanyID, DateTime? dtTimesheetDate)
        {
            return this.Adapter.GetDataByCompanyIDWithDate(new int?(iCompanyID), dtTimesheetDate);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TimesheetMasterDataTable GetDataByProjectID(int iProjectID)
        {
            return this.Adapter.GetDataByProjectID(new int?(iProjectID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TimesheetMasterDataTable GetDataBySearchParameter(int iCompanyID, DateTime? dtTimesheetDate, int? iProjectID, int? iTaskID, string sEntryFor)
        {
            return this.Adapter.GetDataBySearchParameter(new int?(iCompanyID), dtTimesheetDate, iProjectID, iTaskID, sEntryFor);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TimesheetMasterDataTable GetDataByTaskID(int iTaskID)
        {
            return this.Adapter.GetDataByTaskID(new int?(iTaskID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TimesheetMasterDataTable GetDataByTimesheetID(int iTimesheetID)
        {
            return this.Adapter.GetDataByTimesheetID(new int?(iTimesheetID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateBillValue(int iTimesheetID, bool bBilled, bool bUnbilled)
        {
            try
            {
                this.Adapter.UpdateBillValue(new int?(iTimesheetID), new bool?(bBilled), new bool?(bUnbilled));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateTimesheet(int iTimesheetID, int iCompanyID, DateTime? dtTimesheetDate, int iProjectID, int iTaskID, decimal? dHours, string sNotes, bool bBilled, bool bUnbilled, string sEntryFor, string sEntryForRole, string sEntryBy, DateTime? dtEntryDate)
        {
            try
            {
                this.Adapter.Update(new int?(iTimesheetID), new int?(iCompanyID), dtTimesheetDate, new int?(iProjectID), new int?(iTaskID), dHours, sNotes, new bool?(bBilled), new bool?(bUnbilled), sEntryFor, sEntryForRole, sEntryBy, dtEntryDate);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected TimesheetMasterTableAdapter Adapter
        {
            get
            {
                if (this._TimesheetMasterAdapter == null)
                {
                    return new TimesheetMasterTableAdapter();
                }
                return this._TimesheetMasterAdapter;
            }
        }
    }
}
