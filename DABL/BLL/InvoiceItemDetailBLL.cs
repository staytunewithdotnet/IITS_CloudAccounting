// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class InvoiceItemDetailBLL
    {
        private InvoiceItemDetailTableAdapter _InvoiceItemDetailAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, false)]
        public int AddInvoiceItem(int iInvoiceID, int iRecurringID)
        {
            int? invoiceItemDetailID = 0;
            this.Adapter.InsertWithRecurring(ref invoiceItemDetailID, new int?(iInvoiceID), new int?(iRecurringID));
            return invoiceItemDetailID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddInvoiceItem(int iInvoiceID, int iItemID, string sItemDesc, decimal? dUnitCost, decimal? dQuantity, int? iTaxID1, int? iTaxID2, decimal? dTotal)
        {
            int? invoiceItemDetailID = 0;
            this.Adapter.Insert(ref invoiceItemDetailID, new int?(iInvoiceID), new int?(iItemID), sItemDesc, dUnitCost, dQuantity, iTaxID1, iTaxID2, dTotal);
            return invoiceItemDetailID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByInvoice(int iInvoiceID)
        {
            try
            {
                this.Adapter.DeleteByInvoiceID(new int?(iInvoiceID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteInvoiceItem(int iInvoiceItemID)
        {
            try
            {
                this.Adapter.Delete(new int?(iInvoiceItemID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.InvoiceItemDetailDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceItemDetailDataTable GetDataByInvoiceID(int iInvoiceID)
        {
            return this.Adapter.GetDataByInvoiceID(new int?(iInvoiceID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceItemDetailDataTable GetDataByInvoiceItemID(int iInvoiceItemID)
        {
            return this.Adapter.GetDataByInvoiceItemDetailID(new int?(iInvoiceItemID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceItemDetailDataTable GetDataByItemID(int iItemID)
        {
            return this.Adapter.GetDataByItemID(new int?(iItemID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateInvoiceItem(int iInvoiceItemID, int iInvoiceID, int iItemID, string sItemDesc, decimal? dUnitCost, decimal? dQuantity, int? iTaxID1, int? iTaxID2, decimal? dTotal)
        {
            try
            {
                this.Adapter.Update(new int?(iInvoiceItemID), new int?(iInvoiceID), new int?(iItemID), sItemDesc, dUnitCost, dQuantity, iTaxID1, iTaxID2, dTotal);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected InvoiceItemDetailTableAdapter Adapter
        {
            get
            {
                if (this._InvoiceItemDetailAdapter == null)
                {
                    return new InvoiceItemDetailTableAdapter();
                }
                return this._InvoiceItemDetailAdapter;
            }
        }
    }
}
