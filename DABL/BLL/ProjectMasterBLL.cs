// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class ProjectMasterBLL
    {
        private ProjectMasterTableAdapter _ProjectMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddProject(int iCompanyID, string sProjectName, string sProjectDesc, int? iClientID, bool bCanClient, int? iProjectManager, string sBillingMethod, decimal? dPackageRate, decimal? dFlatAmount, decimal? dTimeEstimate, bool bActive, bool bArchived, bool bDeleted, bool bCompanyTeam)
        {
            int? projectID = 0;
            this.Adapter.Insert(ref projectID, new int?(iCompanyID), sProjectName, sProjectDesc, iClientID, new bool?(bCanClient), iProjectManager, sBillingMethod, dPackageRate, dFlatAmount, dTimeEstimate, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted), new bool?(bCompanyTeam));
            return projectID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.DeleteByCompanyID(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteProject(int iProjectID)
        {
            try
            {
                this.Adapter.Delete(new int?(iProjectID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.ProjectMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ProjectMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ProjectMasterDataTable GetDataByCompanyStaffStatus(int iCompanyID, int iStaffID, bool bActive, bool bArchived, bool bDeleted)
        {
            return this.Adapter.GetDataByCompanyStaffIDAndStatus(new int?(iCompanyID), new int?(iStaffID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ProjectMasterDataTable GetDataByCompanyStatus(int iCompanyID, bool bActive, bool bArchived, bool bDeleted)
        {
            return this.Adapter.GetDataByCompanyIDAndStatus(new int?(iCompanyID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ProjectMasterDataTable GetDataByProjectID(int iProjectID)
        {
            return this.Adapter.GetDataByProjectID(new int?(iProjectID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ProjectMasterDataTable GetDataByProjectName(int iCompanyID, string sProjectName)
        {
            return this.Adapter.GetDataByProjectName(new int?(iCompanyID), sProjectName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateCompanyTeam(bool bComapnyTeam, int iProjectID)
        {
            try
            {
                this.Adapter.UpdateCompanyTeam(new bool?(bComapnyTeam), iProjectID);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateProject(int iProjectID, int iCompanyID, string sProjectName, string sProjectDesc, int? iClientID, bool bCanClient, int? iProjectManager, string sBillingMethod, decimal? dPackageRate, decimal? dFlatAmount, decimal? dTimeEstimate, bool bActive, bool bArchived, bool bDeleted, bool bCompanyTeam)
        {
            try
            {
                this.Adapter.Update(new int?(iProjectID), new int?(iCompanyID), sProjectName, sProjectDesc, iClientID, new bool?(bCanClient), iProjectManager, sBillingMethod, dPackageRate, dFlatAmount, dTimeEstimate, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted), new bool?(bCompanyTeam));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenAnyBit(int iProjectID, bool bActive, bool bDeleted, bool bArchived)
        {
            try
            {
                this.Adapter.UpdateWhenAnyBit(new int?(iProjectID), new bool?(bActive), new bool?(bDeleted), new bool?(bArchived));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected ProjectMasterTableAdapter Adapter
        {
            get
            {
                if (this._ProjectMasterAdapter == null)
                {
                    return new ProjectMasterTableAdapter();
                }
                return this._ProjectMasterAdapter;
            }
        }
    }
}
