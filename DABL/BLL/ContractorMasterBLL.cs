// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class ContractorMasterBLL
    {
        private ContractorMasterTableAdapter _ContractorMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddContractor(int iCompanyID, string sContractorEmail, string sContractorName, int? iTaskID, decimal? dRebillRate, bool bActive, bool bArchived, bool bDeleted)
        {
            int? contractorID = 0;
            this.Adapter.Insert(ref contractorID, new int?(iCompanyID), sContractorEmail, sContractorName, iTaskID, dRebillRate, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
            return contractorID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.DeleteByCompanyID(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteContractor(int iContractorID)
        {
            try
            {
                this.Adapter.Delete(new int?(iContractorID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.ContractorMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ContractorMasterDataTable GetDataByCompanyEmail(int iCompanyID, string sEmail)
        {
            return this.Adapter.GetDataByCompanyIDAndEmail(new int?(iCompanyID), sEmail);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ContractorMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ContractorMasterDataTable GetDataByContractorID(int iContractorID)
        {
            return this.Adapter.GetDataByContractorID(new int?(iContractorID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateContractor(int iContractorID, int iCompanyID, string sContractorEmail, string sContractorName, int? iTaskID, decimal? dRebillRate, bool bActive, bool bArchived, bool bDeleted)
        {
            try
            {
                this.Adapter.Update(new int?(iContractorID), new int?(iCompanyID), sContractorEmail, sContractorName, iTaskID, dRebillRate, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenAnyBit(int iTaskID, bool bActive, bool bDeleted, bool bArchived)
        {
            try
            {
                this.Adapter.UpdateWhenAnyBit(new int?(iTaskID), new bool?(bActive), new bool?(bDeleted), new bool?(bArchived));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenDelete(int iContractorID, bool bActive, bool bDeleted)
        {
            try
            {
                this.Adapter.UpdateWhenDelete(new int?(iContractorID), new bool?(bActive), new bool?(bDeleted));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected ContractorMasterTableAdapter Adapter
        {
            get
            {
                if (this._ContractorMasterAdapter == null)
                {
                    return new ContractorMasterTableAdapter();
                }
                return this._ContractorMasterAdapter;
            }
        }
    }
}
