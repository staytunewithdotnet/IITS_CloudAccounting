// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class TaskMasterBLL
    {
        private TaskMasterTableAdapter _TaskMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddTask(int iCompanyID, string sTaskName, string sTaskDesc, bool bBillToClient, decimal? dRatePerHours, bool bActive, bool bArchived, bool bDeleted)
        {
            int? taskID = 0;
            this.Adapter.Insert(ref taskID, new int?(iCompanyID), sTaskName, sTaskDesc, new bool?(bBillToClient), dRatePerHours, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
            return taskID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.DeleteByCompanyID(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteTask(int iTaskID)
        {
            try
            {
                this.Adapter.Delete(new int?(iTaskID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.TaskMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TaskMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TaskMasterDataTable GetDataByCompanyStatus(int iCompanyID, bool bActive, bool bArchived, bool bDeleted)
        {
            return this.Adapter.GetDataByCompanyIDAndStatus(new int?(iCompanyID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TaskMasterDataTable GetDataByTaskID(int iTaskID)
        {
            return this.Adapter.GetDataByTaskID(new int?(iTaskID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.TaskMasterDataTable GetDataByTaskName(int iCompanyID, string sTaskName)
        {
            return this.Adapter.GetDataByTaskName(new int?(iCompanyID), sTaskName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateTask(int iTaskID, int iCompanyID, string sTaskName, string sTaskDesc, bool bBillToClient, decimal? dRatePerHours, bool bActive, bool bArchived, bool bDeleted)
        {
            try
            {
                this.Adapter.Update(new int?(iTaskID), new int?(iCompanyID), sTaskName, sTaskDesc, new bool?(bBillToClient), dRatePerHours, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenAnyBit(int iTaskID, bool bActive, bool bDeleted, bool bArchived)
        {
            try
            {
                this.Adapter.UpdateWhenAnyBit(new int?(iTaskID), new bool?(bActive), new bool?(bDeleted), new bool?(bArchived));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenDelete(int iTaskID, bool bActive, bool bDeleted)
        {
            try
            {
                this.Adapter.UpdateWhenDelete(new int?(iTaskID), new bool?(bActive), new bool?(bDeleted));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected TaskMasterTableAdapter Adapter
        {
            get
            {
                if (this._TaskMasterAdapter == null)
                {
                    return new TaskMasterTableAdapter();
                }
                return this._TaskMasterAdapter;
            }
        }
    }
}
