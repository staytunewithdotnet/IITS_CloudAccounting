// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class CompanyMasterBLL
    {
        private CompanyMasterTableAdapter _CompanyMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddCompany(string sCompanyUserName, string sCompanyName, string sCompanyContactPerson, string sCompanyContactPersonNumber, decimal? dBillingRate, int? iBussinessID, int? iIndustryID, int? iCurrentAccountID, int? iRunningID, int? iCurrencyID, string sCompanyPhone, string sCompanyFax, string sCompanyEmail, string sCompanyAddress1, string sCompanyAddress2, int? iCountryID, int? iStateID, int? iCityID, string sCompanyZipCode, string sCompanyLogoType, byte[] byCompanyLogo, string sCompanyNotes, string sTimeZone, bool bObserveDaylight, string sAccountURL)
        {
            int? companyID = 0;
            this.Adapter.Insert(ref companyID, sCompanyUserName, sCompanyName, sCompanyContactPerson, sCompanyContactPersonNumber, dBillingRate, iBussinessID, iIndustryID, iCurrentAccountID, iRunningID, iCurrencyID, sCompanyPhone, sCompanyFax, sCompanyEmail, sCompanyAddress1, sCompanyAddress2, iCountryID, iStateID, iCityID, sCompanyZipCode, sCompanyLogoType, byCompanyLogo, sCompanyNotes, sTimeZone, new bool?(bObserveDaylight), sAccountURL);
            return companyID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.Delete(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.CompanyMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CompanyMasterDataTable GetDataByActiveCompany()
        {
            return this.Adapter.GetDataByActiveCompany();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CompanyMasterDataTable GetDataByCompanyEmail(string sCompanyEmail)
        {
            return this.Adapter.GetDataByCompanyEmail(sCompanyEmail);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CompanyMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CompanyMasterDataTable GetDataByCompanyName(string sCompanyName)
        {
            return this.Adapter.GetDataByCompanyName(sCompanyName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CompanyMasterDataTable GetDataByCompanyUserName(string sCompanyUserName)
        {
            return this.Adapter.GetDataByCompanyUserName(sCompanyUserName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CompanyMasterDataTable GetDataByDeactiveCompany()
        {
            return this.Adapter.GetDataBydeactiveCompany();
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateAdminProfile(int iCompanyID, string sCompanyUsername, string sCompanyPerson, string sCompanyPersonNumber, decimal? dBillingRate, string sCompanyEmail)
        {
            try
            {
                this.Adapter.UpdateAdminProfile(new int?(iCompanyID), sCompanyUsername, sCompanyPerson, sCompanyPersonNumber, dBillingRate, sCompanyEmail);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateCompany(int iCompanyID, string sCompanyUserName, string sCompanyName, string sCompanyContactPerson, string sCompanyContactPersonNumber, decimal? dBillingRate, int? iBussinessID, int? iIndustryID, int? iCurrentAccountID, int? iRunningID, int? iCurrencyID, string sCompanyPhone, string sCompanyFax, string sCompanyEmail, string sCompanyAddress1, string sCompanyAddress2, int? iCountryID, int? iStateID, int? iCityID, string sCompanyZipCode, string sCompanyLogoType, byte[] byCompanyLogo, string sCompanyNotes, string sTimeZone, bool bObserveDaylight, string sAccountURL)
        {
            try
            {
                this.Adapter.Update(new int?(iCompanyID), sCompanyUserName, sCompanyName, sCompanyContactPerson, sCompanyContactPersonNumber, dBillingRate, iBussinessID, iIndustryID, iCurrentAccountID, iRunningID, iCurrencyID, sCompanyPhone, sCompanyFax, sCompanyEmail, sCompanyAddress1, sCompanyAddress2, iCountryID, iStateID, iCityID, sCompanyZipCode, sCompanyLogoType, byCompanyLogo, sCompanyNotes, sTimeZone, new bool?(bObserveDaylight), sAccountURL);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateCompanyDetails(int iCompanyID, string sCompanyName, int? iBussinessID, int? iIndustryID, int? iCurrencyID, string sCompanyPhone, string sCompanyFax, string sCompanyEmail, string sCompanyAddress1, string sCompanyAddress2, int? iCountryID, int? iStateID, int? iCityID, string sCompanyZipCode, string sCompanyNotes, string sTimeZone, bool bObserveDaylight, string sAccountURL)
        {
            try
            {
                this.Adapter.UpdateCompanyDetails(new int?(iCompanyID), sCompanyName, iBussinessID, iIndustryID, iCurrencyID, sCompanyPhone, sCompanyFax, sCompanyEmail, sCompanyAddress1, sCompanyAddress2, iCountryID, iStateID, iCityID, sCompanyZipCode, sCompanyNotes, sTimeZone, new bool?(bObserveDaylight), sAccountURL);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateOnlyLogo(int iCompanyID, string sCompanyLogoType, byte[] byCompanyLogo)
        {
            try
            {
                this.Adapter.UpdateOnlyLogo(new int?(iCompanyID), sCompanyLogoType, byCompanyLogo);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateSignUpIDs(int iCompanyID, int? iBussinessID, int? iIndustryID, int? iCurrentAccountID, int? iRunningID)
        {
            try
            {
                this.Adapter.UpdateSignUpIDs(new int?(iCompanyID), iBussinessID, iIndustryID, iCurrentAccountID, iRunningID);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected CompanyMasterTableAdapter Adapter
        {
            get
            {
                if (this._CompanyMasterAdapter == null)
                {
                    return new CompanyMasterTableAdapter();
                }
                return this._CompanyMasterAdapter;
            }
        }
    }
}
