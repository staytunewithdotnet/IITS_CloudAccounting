// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class RecurringTaskDetailBLL
    {
        private RecurringTaskDetailTableAdapter _RecurringTaskDetailAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddRecurringTask(int iRecurringID, int iTaskID, string sTaskDesc, decimal? dRate, decimal? dHours, int? iTaxID1, int? iTaxID2, decimal? dTotal)
        {
            int? recurringTaskDetailID = 0;
            this.Adapter.Insert(ref recurringTaskDetailID, new int?(iRecurringID), new int?(iTaskID), sTaskDesc, dRate, dHours, iTaxID1, iTaxID2, dTotal);
            return recurringTaskDetailID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByRecurring(int iRecurringID)
        {
            try
            {
                this.Adapter.DeleteByRecurringID(new int?(iRecurringID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteRecurringTask(int iRecurringTaskID)
        {
            try
            {
                this.Adapter.Delete(new int?(iRecurringTaskID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.RecurringTaskDetailDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringTaskDetailDataTable GetDataByRecurringID(int iRecurringID)
        {
            return this.Adapter.GetDataByRecurringID(new int?(iRecurringID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringTaskDetailDataTable GetDataByRecurringTaskID(int iRecurringTaskID)
        {
            return this.Adapter.GetDataByRecurringTaskDetailID(new int?(iRecurringTaskID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.RecurringTaskDetailDataTable GetDataByTaskID(int iTaskID)
        {
            return this.Adapter.GetDataByTaskID(new int?(iTaskID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateRecurringTask(int iRecurringTaskID, int iRecurringID, int iTaskID, string sTaskDesc, decimal? dRate, decimal? dHours, int? iTaxID1, int? iTaxID2, decimal? dTotal)
        {
            try
            {
                this.Adapter.Update(new int?(iRecurringTaskID), new int?(iRecurringID), new int?(iTaskID), sTaskDesc, dRate, dHours, iTaxID1, iTaxID2, dTotal);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected RecurringTaskDetailTableAdapter Adapter
        {
            get
            {
                if (this._RecurringTaskDetailAdapter == null)
                {
                    return new RecurringTaskDetailTableAdapter();
                }
                return this._RecurringTaskDetailAdapter;
            }
        }
    }
}
