// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class InvoiceMasterBLL
    {
        private InvoiceMasterTableAdapter _InvoiceMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, false)]
        public int AddInvoice(string sInvoiceNumber, int iRecurringID)
        {
            int? invoiceID = 0;
            this.Adapter.InsertWithRecurring(ref invoiceID, sInvoiceNumber, new int?(iRecurringID));
            return invoiceID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddInvoice(int iCompanyID, int? iClientID, int? iCurrencyID, string sInvoiceNumber, DateTime? dtInvoiceDate, string sPONumber, decimal? dDiscount, decimal? dDiscountAmt, string sNotes, string sTerms, string sInvoiceStatus, decimal? dInvoiceTotal, decimal? dPaidToDate, bool bActive, bool bArchived, bool bDeleted, bool bReceivedActive, bool bReceivedArchived, bool bReceivedDeleted, bool bConvertToExpence)
        {
            int? invoiceID = 0;
            this.Adapter.Insert(ref invoiceID, new int?(iCompanyID), iClientID, iCurrencyID, sInvoiceNumber, dtInvoiceDate, sPONumber, dDiscount, dDiscountAmt, sNotes, sTerms, sInvoiceStatus, dInvoiceTotal, dPaidToDate, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted), new bool?(bReceivedActive), new bool?(bReceivedArchived), new bool?(bReceivedDeleted), new bool?(bConvertToExpence));
            return invoiceID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByClient(int iClientID)
        {
            try
            {
                this.Adapter.DeleteByClientID(new int?(iClientID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.DeleteByCompanyID(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteInvoice(int iInvoiceID)
        {
            try
            {
                this.Adapter.Delete(new int?(iInvoiceID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.InvoiceMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceMasterDataTable GetDataByClientID(int iClientID)
        {
            return this.Adapter.GetDataByClientID(new int?(iClientID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceMasterDataTable GetDataByCompanyInvoice(int iCompanyID, string sInvoiceNum)
        {
            return this.Adapter.GetDataByCompanyInvoiceNumber(new int?(iCompanyID), sInvoiceNum);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceMasterDataTable GetDataByCompanyInvoiceUpdate(int iCompanyID, string sInvoiceNum, int iInvoiceID)
        {
            return this.Adapter.GetDataByCompanyInvoiceNumberUpdate(new int?(iCompanyID), sInvoiceNum, new int?(iInvoiceID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceMasterDataTable GetDataByCompanyStaffIDAndStatus(int iCompanyID, int iStaffID, bool bActive, bool bArchived, bool bDeleted)
        {
            return this.Adapter.GetDataByCompanyStaffIDAndStatus(new int?(iCompanyID), new int?(iStaffID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceMasterDataTable GetDataByCompanyStatus(int iCompanyID, bool bActive, bool bArchived, bool bDeleted)
        {
            return this.Adapter.GetDataByCompanyIDANDStatus(new int?(iCompanyID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.InvoiceMasterDataTable GetDataByInvoiceID(int iInvoiceID)
        {
            return this.Adapter.GetDataByInvoiceID(new int?(iInvoiceID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateConvertToExpence(bool bConvertToExpence, int iInvoiceID)
        {
            try
            {
                this.Adapter.UpdateConvertToExpence(new bool?(bConvertToExpence), iInvoiceID);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateInvoice(int iInvoiceID, int iCompanyID, int? iClientID, int? iCurrencyID, string sInvoiceNumber, DateTime? dtInvoiceDate, string sPONumber, decimal? dDiscount, decimal? dDiscountAmt, string sNotes, string sTerms, string sInvoiceStatus, decimal? dInvoiceTotal, decimal? dPaidToDate, bool bActive, bool bArchived, bool bDeleted, bool bReceivedActive, bool bReceivedArchived, bool bReceivedDeleted, bool bConvertToExpence)
        {
            try
            {
                this.Adapter.Update(new int?(iInvoiceID), new int?(iCompanyID), iClientID, iCurrencyID, sInvoiceNumber, dtInvoiceDate, sPONumber, dDiscount, dDiscountAmt, sNotes, sTerms, sInvoiceStatus, dInvoiceTotal, dPaidToDate, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted), new bool?(bReceivedActive), new bool?(bReceivedArchived), new bool?(bReceivedDeleted), new bool?(bConvertToExpence));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateInvoiceStatus(string sInvoiceStatus, int iInvoiceID)
        {
            try
            {
                this.Adapter.UpdateInvoiceStatus(sInvoiceStatus, iInvoiceID);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdatePaidToDate(decimal? dPaidToDate, int iInvoiceID)
        {
            try
            {
                this.Adapter.UpdatePaidToDate(dPaidToDate, iInvoiceID);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenAnyBit(int iInvoiceID, bool bActive, bool bDeleted, bool bArchived)
        {
            try
            {
                this.Adapter.UpdateWhenAnyBit(new int?(iInvoiceID), new bool?(bActive), new bool?(bDeleted), new bool?(bArchived));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenAnyReceivedBit(int iInvoiceID, bool bReceivedActive, bool bReceivedDeleted, bool bReceivedArchived)
        {
            try
            {
                this.Adapter.UpdateWhenAnyReceivedBit(new int?(iInvoiceID), new bool?(bReceivedActive), new bool?(bReceivedDeleted), new bool?(bReceivedArchived));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected InvoiceMasterTableAdapter Adapter
        {
            get
            {
                if (this._InvoiceMasterAdapter == null)
                {
                    return new InvoiceMasterTableAdapter();
                }
                return this._InvoiceMasterAdapter;
            }
        }
    }
}
