// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class CurrencyMasterBLL
    {
        private CurrencyMasterTableAdapter _CurrencyMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddCurrency(int iCountryID, string sCurrencyCode, string sCurrencyName, string sCurrencySymbol, string sCurrencyDesc, bool bStatus)
        {
            int? currencyID = 0;
            this.Adapter.Insert(ref currencyID, new int?(iCountryID), sCurrencyCode, sCurrencyName, sCurrencySymbol, sCurrencyDesc, new bool?(bStatus));
            return currencyID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteCurrency(int iCurrencyID)
        {
            try
            {
                this.Adapter.Delete(new int?(iCurrencyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.CurrencyMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CurrencyMasterDataTable GetDataByCountryID(int iCountryID)
        {
            return this.Adapter.GetDataByCountryID(new int?(iCountryID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CurrencyMasterDataTable GetDataByCountryIDUpdate(int iCurrencyID, int iCountryID)
        {
            return this.Adapter.GetDataByCountryIDUpdate(new int?(iCurrencyID), new int?(iCountryID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CurrencyMasterDataTable GetDataByCurrencyID(int iCurrencyID)
        {
            return this.Adapter.GetDataByCurrencyID(new int?(iCurrencyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CurrencyMasterDataTable GetDataByCurrencyName(string sCurrencyName)
        {
            return this.Adapter.GetDataByCurrencyName(sCurrencyName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.CurrencyMasterDataTable GetDataByCurrencyNameUpdate(int iCurrencyID, string sCurrencyName)
        {
            return this.Adapter.GetDataByCurrencyNameUpdate(new int?(iCurrencyID), sCurrencyName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateCurrency(int iCurrencyID, int iCountryID, string sCurrencyCode, string sCurrencyName, string sCurrencySymbol, string sCurrencyDesc, bool bStatus)
        {
            try
            {
                this.Adapter.Update(new int?(iCurrencyID), new int?(iCountryID), sCurrencyCode, sCurrencyName, sCurrencySymbol, sCurrencyDesc, new bool?(bStatus));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected CurrencyMasterTableAdapter Adapter
        {
            get
            {
                if (this._CurrencyMasterAdapter == null)
                {
                    return new CurrencyMasterTableAdapter();
                }
                return this._CurrencyMasterAdapter;
            }
        }
    }
}
