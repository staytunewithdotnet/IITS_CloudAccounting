// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.BLL
{
    using DABL.DAL;
    using DABL.DAL.CloudAccountDATableAdapters;
    using System;
    using System.ComponentModel;
    
    public class ItemMasterBLL
    {
        private ItemMasterTableAdapter _ItemMasterAdapter;
        
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int AddItem(int iCompanyID, string sItemName, string sItemDesc, decimal? dUnitCost, decimal? dQuantity, int? iTaskID1, int? iTaskID2, bool bTrackInventory, decimal? dCurrentStock, bool bActive, bool bArchived, bool bDeleted)
        {
            int? itemID = 0;
            this.Adapter.Insert(ref itemID, new int?(iCompanyID), sItemName, sItemDesc, dUnitCost, dQuantity, iTaskID1, iTaskID2, new bool?(bTrackInventory), dCurrentStock, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
            return itemID.Value;
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool DeleteByCompany(int iCompanyID)
        {
            try
            {
                this.Adapter.DeleteByCompanyID(new int?(iCompanyID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool DeleteItem(int iItemID)
        {
            try
            {
                this.Adapter.Delete(new int?(iItemID));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public CloudAccountDA.ItemMasterDataTable GetAllDetail()
        {
            return this.Adapter.GetData();
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ItemMasterDataTable GetDataByCompanyID(int iCompanyID)
        {
            return this.Adapter.GetDataByCompanyID(new int?(iCompanyID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ItemMasterDataTable GetDataByCompanyStatus(int iCompanyID, bool bActive, bool bArchived, bool bDeleted, string sItemName, string sItemDesc, string sTax, decimal? dUnitCostTo, decimal? dUnitCostFrom, decimal? dInventoryTo, decimal? dInventoryFrom, decimal? dQuantityTo, decimal? dQuantityFrom)
        {
            return this.Adapter.GetDataByCompanyIDAndStatus(new int?(iCompanyID), new bool?(bActive), new bool?(bArchived), new bool?(bDeleted), sItemName, sItemDesc, sTax, dUnitCostTo, dUnitCostFrom, dInventoryTo, dInventoryFrom, dQuantityTo, dQuantityFrom);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ItemMasterDataTable GetDataByItemID(int iItemID)
        {
            return this.Adapter.GetDataByItemID(new int?(iItemID));
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public CloudAccountDA.ItemMasterDataTable GetDataByItemName(int iCompanyID, string sItemName)
        {
            return this.Adapter.GetDataByItemName(new int?(iCompanyID), sItemName);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateCurrentStock(int iItemID, decimal? dCurrentStock)
        {
            try
            {
                this.Adapter.UpdateCurrentStock(new int?(iItemID), dCurrentStock);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public bool UpdateItem(int iItemID, int iCompanyID, string sItemName, string sItemDesc, decimal? dUnitCost, decimal? dQuantity, int? iTaskID1, int? iTaskID2, bool bTrackInventory, decimal? dCurrentStock, bool bActive, bool bArchived, bool bDeleted)
        {
            try
            {
                this.Adapter.Update(new int?(iItemID), new int?(iCompanyID), sItemName, sItemDesc, dUnitCost, dQuantity, iTaskID1, iTaskID2, new bool?(bTrackInventory), dCurrentStock, new bool?(bActive), new bool?(bArchived), new bool?(bDeleted));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenAnyBit(int iItemID, bool bActive, bool bDeleted, bool bArchived)
        {
            try
            {
                this.Adapter.UpdateWhenAnyBit(new int?(iItemID), new bool?(bActive), new bool?(bDeleted), new bool?(bArchived));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public bool UpdateWhenDelete(int iItemID, bool bActive, bool bDeleted)
        {
            try
            {
                this.Adapter.UpdateWhenDelete(new int?(iItemID), new bool?(bActive), new bool?(bDeleted));
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        
        protected ItemMasterTableAdapter Adapter
        {
            get
            {
                if (this._ItemMasterAdapter == null)
                {
                    return new ItemMasterTableAdapter();
                }
                return this._ItemMasterAdapter;
            }
        }
    }
}
