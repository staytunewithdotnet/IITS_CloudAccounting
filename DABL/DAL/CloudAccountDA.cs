// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.DAL
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Data;
    using System.Diagnostics;
    using System.IO;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    [Serializable, ToolboxItem(true), XmlSchemaProvider("GetTypedDataSetSchema"), XmlRoot("CloudAccountDA"), HelpKeyword("vs.data.DataSet"), DesignerCategory("code")]
    public class CloudAccountDA : DataSet
    {
        private System.Data.SchemaSerializationMode _schemaSerializationMode;
        private AboutCategoryMasterDataTable tableAboutCategoryMaster;
        private AboutContentMasterDataTable tableAboutContentMaster;
        private AccountantClientDetailDataTable tableAccountantClientDetail;
        private AccountantMasterDataTable tableAccountantMaster;
        private AdminPermissionMasterDataTable tableAdminPermissionMaster;
        private aspnet_MembershipDataTable tableaspnet_Membership;
        private aspnet_UsersDataTable tableaspnet_Users;
        private AutoBillEmailTemplateDataTable tableAutoBillEmailTemplate;
        private BussinessMasterDataTable tableBussinessMaster;
        private CategoryMasterDataTable tableCategoryMaster;
        private ChangeUsernameDataTable tableChangeUsername;
        private CityMasterDataTable tableCityMaster;
        private ClientMasterDataTable tableClientMaster;
        private ClientPermissionMasterDataTable tableClientPermissionMaster;
        private CloudPackageDetailsDataTable tableCloudPackageDetails;
        private CloudPackageMasterDataTable tableCloudPackageMaster;
        private CompanyAdminRightsMasterDataTable tableCompanyAdminRightsMaster;
        private CompanyClientContactDetailDataTable tableCompanyClientContactDetail;
        private CompanyClientMasterDataTable tableCompanyClientMaster;
        private CompanyLoginMasterDataTable tableCompanyLoginMaster;
        private CompanyMasterDataTable tableCompanyMaster;
        private CompanyPackageDetailsDataTable tableCompanyPackageDetails;
        private CompanyPackageMasterDataTable tableCompanyPackageMaster;
        private CompanyPaymentMasterDataTable tableCompanyPaymentMaster;
        private CompanyPaypalMasterDataTable tableCompanyPaypalMaster;
        private CompanyUserMasterDataTable tableCompanyUserMaster;
        private ContactMasterDataTable tableContactMaster;
        private ContractorMasterDataTable tableContractorMaster;
        private ContractorProjectDetailDataTable tableContractorProjectDetail;
        private CountryMasterDataTable tableCountryMaster;
        private CreditDefaultTermsMasterDataTable tableCreditDefaultTermsMaster;
        private CreditHistoryDetailDataTable tableCreditHistoryDetail;
        private CreditItemDetailDataTable tableCreditItemDetail;
        private CreditMasterDataTable tableCreditMaster;
        private CreditTaskDetailDataTable tableCreditTaskDetail;
        private CurrencyMasterDataTable tableCurrencyMaster;
        private CurrentAccountMasterDataTable tableCurrentAccountMaster;
        private DoyinGoSupportDiscussionDataTable tableDoyinGoSupportDiscussion;
        private DoyinGoSupportTicketDataTable tableDoyinGoSupportTicket;
        private DoyinGoTicketAttachmentDataTable tableDoyinGoTicketAttachment;
        private EmailNotificationsDataTable tableEmailNotifications;
        private EstimateDefaultTermsMasterDataTable tableEstimateDefaultTermsMaster;
        private EstimateDisputeHistoryDataTable tableEstimateDisputeHistory;
        private EstimateItemDetailDataTable tableEstimateItemDetail;
        private EstimateMasterDataTable tableEstimateMaster;
        private EstimateTaskDetailDataTable tableEstimateTaskDetail;
        private ExpenseMasterDataTable tableExpenseMaster;
        private FAQCategoryMasterDataTable tableFAQCategoryMaster;
        private FAQMasterDataTable tableFAQMaster;
        private FeatureCategoryMasterDataTable tableFeatureCategoryMaster;
        private FeatureContentMasterDataTable tableFeatureContentMaster;
        private FeatureMasterDataTable tableFeatureMaster;
        private FooterContentDataTable tableFooterContent;
        private FormGridCompanyAdminMasterDataTable tableFormGridCompanyAdminMaster;
        private FormGridMasterAdminMasterDataTable tableFormGridMasterAdminMaster;
        private FormMasterDataTable tableFormMaster;
        private FreePackageSettingsDataTable tableFreePackageSettings;
        private FrequencyMasterDataTable tableFrequencyMaster;
        private HomeMasterDataTable tableHomeMaster;
        private HomePageSliderDataTable tableHomePageSlider;
        private IndustryMasterDataTable tableIndustryMaster;
        private InquiryMasterDataTable tableInquiryMaster;
        private InvoiceDefaultTermsMasterDataTable tableInvoiceDefaultTermsMaster;
        private InvoiceDisputeHistoryDataTable tableInvoiceDisputeHistory;
        private InvoiceItemDetailDataTable tableInvoiceItemDetail;
        private InvoiceMasterDataTable tableInvoiceMaster;
        private InvoiceTaskDetailDataTable tableInvoiceTaskDetail;
        private ItemMasterDataTable tableItemMaster;
        private LatePaymentReminderTemplateDataTable tableLatePaymentReminderTemplate;
        private MasterAdminLoginMasterDataTable tableMasterAdminLoginMaster;
        private MasterAdminRightsMasterDataTable tableMasterAdminRightsMaster;
        private MiscellaneousMasterDataTable tableMiscellaneousMaster;
        private ModuleFormMasterDataTable tableModuleFormMaster;
        private ModuleMasterDataTable tableModuleMaster;
        private NewClientEmailTemplateDataTable tableNewClientEmailTemplate;
        private NewCreditEmailTemplateDataTable tableNewCreditEmailTemplate;
        private NewEstimateEmailTemplateDataTable tableNewEstimateEmailTemplate;
        private NewInvoiceEmailTemplateDataTable tableNewInvoiceEmailTemplate;
        private NewPaymentEmailTemplateDataTable tableNewPaymentEmailTemplate;
        private NewStaffEmailTemplateDataTable tableNewStaffEmailTemplate;
        private PackageDetailsDataTable tablePackageDetails;
        private PackageFeatureMasterDataTable tablePackageFeatureMaster;
        private PackageMasterDataTable tablePackageMaster;
        private PackageModuleMasterDataTable tablePackageModuleMaster;
        private PackageUpgradeRequestMasterDataTable tablePackageUpgradeRequestMaster;
        private PaymentGatewayMasterDataTable tablePaymentGatewayMaster;
        private PaymentGatewayPaypalMasterDataTable tablePaymentGatewayPaypalMaster;
        private PaymentMasterDataTable tablePaymentMaster;
        private PrivacyPolicyContentDataTable tablePrivacyPolicyContent;
        private ProjectMasterDataTable tableProjectMaster;
        private ProjectTaskDetailDataTable tableProjectTaskDetail;
        private RecurringItemDetailDataTable tableRecurringItemDetail;
        private RecurringMasterDataTable tableRecurringMaster;
        private RecurringTaskDetailDataTable tableRecurringTaskDetail;
        private ReportEstimatedBillingClientDataTable tableReportEstimatedBillingClient;
        private ReportEstimatedBillingProjectDataTable tableReportEstimatedBillingProject;
        private ReportEstimatedBillingTaskDataTable tableReportEstimatedBillingTask;
        private ReportEstimatedBillingTeamDataTable tableReportEstimatedBillingTeam;
        private ReportExpensesDataTable tableReportExpenses;
        private ReportInvoiceDetailsDataTable tableReportInvoiceDetails;
        private ReportItemSalesDataTable tableReportItemSales;
        private ReportPaymentsCollectedDataTable tableReportPaymentsCollected;
        private ReportProjectTaskDataTable tableReportProjectTask;
        private ReportProjectUserDataTable tableReportProjectUser;
        private ReportRecurringAnnualDataTable tableReportRecurringAnnual;
        private ReportRecurringDetailedDataTable tableReportRecurringDetailed;
        private ReportRevenueByClientDataTable tableReportRevenueByClient;
        private ReportTasksInvoicedDataTable tableReportTasksInvoiced;
        private ReportTaxSummaryDataTable tableReportTaxSummary;
        private ReportTimesheetDataTable tableReportTimesheet;
        private ReportTimesheetDetailsClientDataTable tableReportTimesheetDetailsClient;
        private ReportTimesheetDetailsProjectDataTable tableReportTimesheetDetailsProject;
        private ReportTimesheetDetailsTaskDataTable tableReportTimesheetDetailsTask;
        private ReportTimesheetDetailsTeamDataTable tableReportTimesheetDetailsTeam;
        private RunningFromMasterDataTable tableRunningFromMaster;
        private SecurityQuestionMasterDataTable tableSecurityQuestionMaster;
        private SMTPSettingsDataTable tableSMTPSettings;
        private StaffClientAssignDetailDataTable tableStaffClientAssignDetail;
        private StaffMasterDataTable tableStaffMaster;
        private StaffPermissionMasterDataTable tableStaffPermissionMaster;
        private StaffProjectDetailDataTable tableStaffProjectDetail;
        private StateMasterDataTable tableStateMaster;
        private SubCategoryMasterDataTable tableSubCategoryMaster;
        private SupportDepartmentMasterDataTable tableSupportDepartmentMaster;
        private TaskMasterDataTable tableTaskMaster;
        private TaxMasterDataTable tableTaxMaster;
        private TeamSummaryDataTable tableTeamSummary;
        private TemplateMasterDataTable tableTemplateMaster;
        private TemplateSettingsDataTable tableTemplateSettings;
        private TermServiceContentDataTable tableTermServiceContent;
        private TestimonialsMasterDataTable tableTestimonialsMaster;
        private TimesheetGridMasterDataTable tableTimesheetGridMaster;
        private TimesheetMasterDataTable tableTimesheetMaster;
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public CloudAccountDA()
        {
            this._schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            base.BeginInit();
            this.InitClass();
            CollectionChangeEventHandler handler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += handler;
            base.Relations.CollectionChanged += handler;
            base.EndInit();
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected CloudAccountDA(SerializationInfo info, StreamingContext context) : base(info, context, false)
        {
            this._schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            if (base.IsBinarySerialized(info, context))
            {
                this.InitVars(false);
                CollectionChangeEventHandler handler = new CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += handler;
                this.Relations.CollectionChanged += handler;
            }
            else
            {
                string s = (string) info.GetValue("XmlSchema", typeof(string));
                if (base.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)
                {
                    DataSet dataSet = new DataSet();
                    dataSet.ReadXmlSchema(new XmlTextReader(new StringReader(s)));
                    if (dataSet.Tables["AboutContentMaster"] != null)
                    {
                        base.Tables.Add(new AboutContentMasterDataTable(dataSet.Tables["AboutContentMaster"]));
                    }
                    if (dataSet.Tables["AboutCategoryMaster"] != null)
                    {
                        base.Tables.Add(new AboutCategoryMasterDataTable(dataSet.Tables["AboutCategoryMaster"]));
                    }
                    if (dataSet.Tables["FeatureCategoryMaster"] != null)
                    {
                        base.Tables.Add(new FeatureCategoryMasterDataTable(dataSet.Tables["FeatureCategoryMaster"]));
                    }
                    if (dataSet.Tables["FeatureContentMaster"] != null)
                    {
                        base.Tables.Add(new FeatureContentMasterDataTable(dataSet.Tables["FeatureContentMaster"]));
                    }
                    if (dataSet.Tables["HomeMaster"] != null)
                    {
                        base.Tables.Add(new HomeMasterDataTable(dataSet.Tables["HomeMaster"]));
                    }
                    if (dataSet.Tables["FAQCategoryMaster"] != null)
                    {
                        base.Tables.Add(new FAQCategoryMasterDataTable(dataSet.Tables["FAQCategoryMaster"]));
                    }
                    if (dataSet.Tables["FAQMaster"] != null)
                    {
                        base.Tables.Add(new FAQMasterDataTable(dataSet.Tables["FAQMaster"]));
                    }
                    if (dataSet.Tables["HomePageSlider"] != null)
                    {
                        base.Tables.Add(new HomePageSliderDataTable(dataSet.Tables["HomePageSlider"]));
                    }
                    if (dataSet.Tables["ContactMaster"] != null)
                    {
                        base.Tables.Add(new ContactMasterDataTable(dataSet.Tables["ContactMaster"]));
                    }
                    if (dataSet.Tables["FeatureMaster"] != null)
                    {
                        base.Tables.Add(new FeatureMasterDataTable(dataSet.Tables["FeatureMaster"]));
                    }
                    if (dataSet.Tables["CountryMaster"] != null)
                    {
                        base.Tables.Add(new CountryMasterDataTable(dataSet.Tables["CountryMaster"]));
                    }
                    if (dataSet.Tables["StateMaster"] != null)
                    {
                        base.Tables.Add(new StateMasterDataTable(dataSet.Tables["StateMaster"]));
                    }
                    if (dataSet.Tables["CityMaster"] != null)
                    {
                        base.Tables.Add(new CityMasterDataTable(dataSet.Tables["CityMaster"]));
                    }
                    if (dataSet.Tables["CurrencyMaster"] != null)
                    {
                        base.Tables.Add(new CurrencyMasterDataTable(dataSet.Tables["CurrencyMaster"]));
                    }
                    if (dataSet.Tables["ClientMaster"] != null)
                    {
                        base.Tables.Add(new ClientMasterDataTable(dataSet.Tables["ClientMaster"]));
                    }
                    if (dataSet.Tables["TestimonialsMaster"] != null)
                    {
                        base.Tables.Add(new TestimonialsMasterDataTable(dataSet.Tables["TestimonialsMaster"]));
                    }
                    if (dataSet.Tables["InquiryMaster"] != null)
                    {
                        base.Tables.Add(new InquiryMasterDataTable(dataSet.Tables["InquiryMaster"]));
                    }
                    if (dataSet.Tables["FooterContent"] != null)
                    {
                        base.Tables.Add(new FooterContentDataTable(dataSet.Tables["FooterContent"]));
                    }
                    if (dataSet.Tables["MasterAdminLoginMaster"] != null)
                    {
                        base.Tables.Add(new MasterAdminLoginMasterDataTable(dataSet.Tables["MasterAdminLoginMaster"]));
                    }
                    if (dataSet.Tables["aspnet_Users"] != null)
                    {
                        base.Tables.Add(new aspnet_UsersDataTable(dataSet.Tables["aspnet_Users"]));
                    }
                    if (dataSet.Tables["ModuleMaster"] != null)
                    {
                        base.Tables.Add(new ModuleMasterDataTable(dataSet.Tables["ModuleMaster"]));
                    }
                    if (dataSet.Tables["PackageDetails"] != null)
                    {
                        base.Tables.Add(new PackageDetailsDataTable(dataSet.Tables["PackageDetails"]));
                    }
                    if (dataSet.Tables["PackageMaster"] != null)
                    {
                        base.Tables.Add(new PackageMasterDataTable(dataSet.Tables["PackageMaster"]));
                    }
                    if (dataSet.Tables["CompanyPackageDetails"] != null)
                    {
                        base.Tables.Add(new CompanyPackageDetailsDataTable(dataSet.Tables["CompanyPackageDetails"]));
                    }
                    if (dataSet.Tables["FormMaster"] != null)
                    {
                        base.Tables.Add(new FormMasterDataTable(dataSet.Tables["FormMaster"]));
                    }
                    if (dataSet.Tables["MasterAdminRightsMaster"] != null)
                    {
                        base.Tables.Add(new MasterAdminRightsMasterDataTable(dataSet.Tables["MasterAdminRightsMaster"]));
                    }
                    if (dataSet.Tables["FormGridMasterAdminMaster"] != null)
                    {
                        base.Tables.Add(new FormGridMasterAdminMasterDataTable(dataSet.Tables["FormGridMasterAdminMaster"]));
                    }
                    if (dataSet.Tables["ModuleFormMaster"] != null)
                    {
                        base.Tables.Add(new ModuleFormMasterDataTable(dataSet.Tables["ModuleFormMaster"]));
                    }
                    if (dataSet.Tables["FormGridCompanyAdminMaster"] != null)
                    {
                        base.Tables.Add(new FormGridCompanyAdminMasterDataTable(dataSet.Tables["FormGridCompanyAdminMaster"]));
                    }
                    if (dataSet.Tables["CompanyLoginMaster"] != null)
                    {
                        base.Tables.Add(new CompanyLoginMasterDataTable(dataSet.Tables["CompanyLoginMaster"]));
                    }
                    if (dataSet.Tables["CompanyAdminRightsMaster"] != null)
                    {
                        base.Tables.Add(new CompanyAdminRightsMasterDataTable(dataSet.Tables["CompanyAdminRightsMaster"]));
                    }
                    if (dataSet.Tables["PackageUpgradeRequestMaster"] != null)
                    {
                        base.Tables.Add(new PackageUpgradeRequestMasterDataTable(dataSet.Tables["PackageUpgradeRequestMaster"]));
                    }
                    if (dataSet.Tables["BussinessMaster"] != null)
                    {
                        base.Tables.Add(new BussinessMasterDataTable(dataSet.Tables["BussinessMaster"]));
                    }
                    if (dataSet.Tables["CurrentAccountMaster"] != null)
                    {
                        base.Tables.Add(new CurrentAccountMasterDataTable(dataSet.Tables["CurrentAccountMaster"]));
                    }
                    if (dataSet.Tables["IndustryMaster"] != null)
                    {
                        base.Tables.Add(new IndustryMasterDataTable(dataSet.Tables["IndustryMaster"]));
                    }
                    if (dataSet.Tables["RunningFromMaster"] != null)
                    {
                        base.Tables.Add(new RunningFromMasterDataTable(dataSet.Tables["RunningFromMaster"]));
                    }
                    if (dataSet.Tables["PackageModuleMaster"] != null)
                    {
                        base.Tables.Add(new PackageModuleMasterDataTable(dataSet.Tables["PackageModuleMaster"]));
                    }
                    if (dataSet.Tables["CloudPackageDetails"] != null)
                    {
                        base.Tables.Add(new CloudPackageDetailsDataTable(dataSet.Tables["CloudPackageDetails"]));
                    }
                    if (dataSet.Tables["PackageFeatureMaster"] != null)
                    {
                        base.Tables.Add(new PackageFeatureMasterDataTable(dataSet.Tables["PackageFeatureMaster"]));
                    }
                    if (dataSet.Tables["StaffMaster"] != null)
                    {
                        base.Tables.Add(new StaffMasterDataTable(dataSet.Tables["StaffMaster"]));
                    }
                    if (dataSet.Tables["TaskMaster"] != null)
                    {
                        base.Tables.Add(new TaskMasterDataTable(dataSet.Tables["TaskMaster"]));
                    }
                    if (dataSet.Tables["ContractorMaster"] != null)
                    {
                        base.Tables.Add(new ContractorMasterDataTable(dataSet.Tables["ContractorMaster"]));
                    }
                    if (dataSet.Tables["ItemMaster"] != null)
                    {
                        base.Tables.Add(new ItemMasterDataTable(dataSet.Tables["ItemMaster"]));
                    }
                    if (dataSet.Tables["TaxMaster"] != null)
                    {
                        base.Tables.Add(new TaxMasterDataTable(dataSet.Tables["TaxMaster"]));
                    }
                    if (dataSet.Tables["ContractorProjectDetail"] != null)
                    {
                        base.Tables.Add(new ContractorProjectDetailDataTable(dataSet.Tables["ContractorProjectDetail"]));
                    }
                    if (dataSet.Tables["StaffProjectDetail"] != null)
                    {
                        base.Tables.Add(new StaffProjectDetailDataTable(dataSet.Tables["StaffProjectDetail"]));
                    }
                    if (dataSet.Tables["ProjectTaskDetail"] != null)
                    {
                        base.Tables.Add(new ProjectTaskDetailDataTable(dataSet.Tables["ProjectTaskDetail"]));
                    }
                    if (dataSet.Tables["ProjectMaster"] != null)
                    {
                        base.Tables.Add(new ProjectMasterDataTable(dataSet.Tables["ProjectMaster"]));
                    }
                    if (dataSet.Tables["StaffClientAssignDetail"] != null)
                    {
                        base.Tables.Add(new StaffClientAssignDetailDataTable(dataSet.Tables["StaffClientAssignDetail"]));
                    }
                    if (dataSet.Tables["SecurityQuestionMaster"] != null)
                    {
                        base.Tables.Add(new SecurityQuestionMasterDataTable(dataSet.Tables["SecurityQuestionMaster"]));
                    }
                    if (dataSet.Tables["aspnet_Membership"] != null)
                    {
                        base.Tables.Add(new aspnet_MembershipDataTable(dataSet.Tables["aspnet_Membership"]));
                    }
                    if (dataSet.Tables["InvoiceItemDetail"] != null)
                    {
                        base.Tables.Add(new InvoiceItemDetailDataTable(dataSet.Tables["InvoiceItemDetail"]));
                    }
                    if (dataSet.Tables["InvoiceTaskDetail"] != null)
                    {
                        base.Tables.Add(new InvoiceTaskDetailDataTable(dataSet.Tables["InvoiceTaskDetail"]));
                    }
                    if (dataSet.Tables["CompanyMaster"] != null)
                    {
                        base.Tables.Add(new CompanyMasterDataTable(dataSet.Tables["CompanyMaster"]));
                    }
                    if (dataSet.Tables["PaymentMaster"] != null)
                    {
                        base.Tables.Add(new PaymentMasterDataTable(dataSet.Tables["PaymentMaster"]));
                    }
                    if (dataSet.Tables["EstimateTaskDetail"] != null)
                    {
                        base.Tables.Add(new EstimateTaskDetailDataTable(dataSet.Tables["EstimateTaskDetail"]));
                    }
                    if (dataSet.Tables["EstimateItemDetail"] != null)
                    {
                        base.Tables.Add(new EstimateItemDetailDataTable(dataSet.Tables["EstimateItemDetail"]));
                    }
                    if (dataSet.Tables["CreditTaskDetail"] != null)
                    {
                        base.Tables.Add(new CreditTaskDetailDataTable(dataSet.Tables["CreditTaskDetail"]));
                    }
                    if (dataSet.Tables["CreditItemDetail"] != null)
                    {
                        base.Tables.Add(new CreditItemDetailDataTable(dataSet.Tables["CreditItemDetail"]));
                    }
                    if (dataSet.Tables["CompanyClientContactDetail"] != null)
                    {
                        base.Tables.Add(new CompanyClientContactDetailDataTable(dataSet.Tables["CompanyClientContactDetail"]));
                    }
                    if (dataSet.Tables["CompanyClientMaster"] != null)
                    {
                        base.Tables.Add(new CompanyClientMasterDataTable(dataSet.Tables["CompanyClientMaster"]));
                    }
                    if (dataSet.Tables["CreditDefaultTermsMaster"] != null)
                    {
                        base.Tables.Add(new CreditDefaultTermsMasterDataTable(dataSet.Tables["CreditDefaultTermsMaster"]));
                    }
                    if (dataSet.Tables["EstimateDefaultTermsMaster"] != null)
                    {
                        base.Tables.Add(new EstimateDefaultTermsMasterDataTable(dataSet.Tables["EstimateDefaultTermsMaster"]));
                    }
                    if (dataSet.Tables["InvoiceDefaultTermsMaster"] != null)
                    {
                        base.Tables.Add(new InvoiceDefaultTermsMasterDataTable(dataSet.Tables["InvoiceDefaultTermsMaster"]));
                    }
                    if (dataSet.Tables["RecurringTaskDetail"] != null)
                    {
                        base.Tables.Add(new RecurringTaskDetailDataTable(dataSet.Tables["RecurringTaskDetail"]));
                    }
                    if (dataSet.Tables["RecurringItemDetail"] != null)
                    {
                        base.Tables.Add(new RecurringItemDetailDataTable(dataSet.Tables["RecurringItemDetail"]));
                    }
                    if (dataSet.Tables["CategoryMaster"] != null)
                    {
                        base.Tables.Add(new CategoryMasterDataTable(dataSet.Tables["CategoryMaster"]));
                    }
                    if (dataSet.Tables["SubCategoryMaster"] != null)
                    {
                        base.Tables.Add(new SubCategoryMasterDataTable(dataSet.Tables["SubCategoryMaster"]));
                    }
                    if (dataSet.Tables["ExpenseMaster"] != null)
                    {
                        base.Tables.Add(new ExpenseMasterDataTable(dataSet.Tables["ExpenseMaster"]));
                    }
                    if (dataSet.Tables["TimesheetMaster"] != null)
                    {
                        base.Tables.Add(new TimesheetMasterDataTable(dataSet.Tables["TimesheetMaster"]));
                    }
                    if (dataSet.Tables["TimesheetGridMaster"] != null)
                    {
                        base.Tables.Add(new TimesheetGridMasterDataTable(dataSet.Tables["TimesheetGridMaster"]));
                    }
                    if (dataSet.Tables["TeamSummary"] != null)
                    {
                        base.Tables.Add(new TeamSummaryDataTable(dataSet.Tables["TeamSummary"]));
                    }
                    if (dataSet.Tables["CreditMaster"] != null)
                    {
                        base.Tables.Add(new CreditMasterDataTable(dataSet.Tables["CreditMaster"]));
                    }
                    if (dataSet.Tables["CreditHistoryDetail"] != null)
                    {
                        base.Tables.Add(new CreditHistoryDetailDataTable(dataSet.Tables["CreditHistoryDetail"]));
                    }
                    if (dataSet.Tables["ChangeUsername"] != null)
                    {
                        base.Tables.Add(new ChangeUsernameDataTable(dataSet.Tables["ChangeUsername"]));
                    }
                    if (dataSet.Tables["AccountantMaster"] != null)
                    {
                        base.Tables.Add(new AccountantMasterDataTable(dataSet.Tables["AccountantMaster"]));
                    }
                    if (dataSet.Tables["AccountantClientDetail"] != null)
                    {
                        base.Tables.Add(new AccountantClientDetailDataTable(dataSet.Tables["AccountantClientDetail"]));
                    }
                    if (dataSet.Tables["FrequencyMaster"] != null)
                    {
                        base.Tables.Add(new FrequencyMasterDataTable(dataSet.Tables["FrequencyMaster"]));
                    }
                    if (dataSet.Tables["RecurringMaster"] != null)
                    {
                        base.Tables.Add(new RecurringMasterDataTable(dataSet.Tables["RecurringMaster"]));
                    }
                    if (dataSet.Tables["InvoiceMaster"] != null)
                    {
                        base.Tables.Add(new InvoiceMasterDataTable(dataSet.Tables["InvoiceMaster"]));
                    }
                    if (dataSet.Tables["EstimateMaster"] != null)
                    {
                        base.Tables.Add(new EstimateMasterDataTable(dataSet.Tables["EstimateMaster"]));
                    }
                    if (dataSet.Tables["AdminPermissionMaster"] != null)
                    {
                        base.Tables.Add(new AdminPermissionMasterDataTable(dataSet.Tables["AdminPermissionMaster"]));
                    }
                    if (dataSet.Tables["StaffPermissionMaster"] != null)
                    {
                        base.Tables.Add(new StaffPermissionMasterDataTable(dataSet.Tables["StaffPermissionMaster"]));
                    }
                    if (dataSet.Tables["ClientPermissionMaster"] != null)
                    {
                        base.Tables.Add(new ClientPermissionMasterDataTable(dataSet.Tables["ClientPermissionMaster"]));
                    }
                    if (dataSet.Tables["TemplateMaster"] != null)
                    {
                        base.Tables.Add(new TemplateMasterDataTable(dataSet.Tables["TemplateMaster"]));
                    }
                    if (dataSet.Tables["TemplateSettings"] != null)
                    {
                        base.Tables.Add(new TemplateSettingsDataTable(dataSet.Tables["TemplateSettings"]));
                    }
                    if (dataSet.Tables["MiscellaneousMaster"] != null)
                    {
                        base.Tables.Add(new MiscellaneousMasterDataTable(dataSet.Tables["MiscellaneousMaster"]));
                    }
                    if (dataSet.Tables["NewInvoiceEmailTemplate"] != null)
                    {
                        base.Tables.Add(new NewInvoiceEmailTemplateDataTable(dataSet.Tables["NewInvoiceEmailTemplate"]));
                    }
                    if (dataSet.Tables["NewEstimateEmailTemplate"] != null)
                    {
                        base.Tables.Add(new NewEstimateEmailTemplateDataTable(dataSet.Tables["NewEstimateEmailTemplate"]));
                    }
                    if (dataSet.Tables["NewCreditEmailTemplate"] != null)
                    {
                        base.Tables.Add(new NewCreditEmailTemplateDataTable(dataSet.Tables["NewCreditEmailTemplate"]));
                    }
                    if (dataSet.Tables["NewStaffEmailTemplate"] != null)
                    {
                        base.Tables.Add(new NewStaffEmailTemplateDataTable(dataSet.Tables["NewStaffEmailTemplate"]));
                    }
                    if (dataSet.Tables["NewClientEmailTemplate"] != null)
                    {
                        base.Tables.Add(new NewClientEmailTemplateDataTable(dataSet.Tables["NewClientEmailTemplate"]));
                    }
                    if (dataSet.Tables["SMTPSettings"] != null)
                    {
                        base.Tables.Add(new SMTPSettingsDataTable(dataSet.Tables["SMTPSettings"]));
                    }
                    if (dataSet.Tables["EmailNotifications"] != null)
                    {
                        base.Tables.Add(new EmailNotificationsDataTable(dataSet.Tables["EmailNotifications"]));
                    }
                    if (dataSet.Tables["NewPaymentEmailTemplate"] != null)
                    {
                        base.Tables.Add(new NewPaymentEmailTemplateDataTable(dataSet.Tables["NewPaymentEmailTemplate"]));
                    }
                    if (dataSet.Tables["LatePaymentReminderTemplate"] != null)
                    {
                        base.Tables.Add(new LatePaymentReminderTemplateDataTable(dataSet.Tables["LatePaymentReminderTemplate"]));
                    }
                    if (dataSet.Tables["AutoBillEmailTemplate"] != null)
                    {
                        base.Tables.Add(new AutoBillEmailTemplateDataTable(dataSet.Tables["AutoBillEmailTemplate"]));
                    }
                    if (dataSet.Tables["InvoiceDisputeHistory"] != null)
                    {
                        base.Tables.Add(new InvoiceDisputeHistoryDataTable(dataSet.Tables["InvoiceDisputeHistory"]));
                    }
                    if (dataSet.Tables["EstimateDisputeHistory"] != null)
                    {
                        base.Tables.Add(new EstimateDisputeHistoryDataTable(dataSet.Tables["EstimateDisputeHistory"]));
                    }
                    if (dataSet.Tables["CompanyUserMaster"] != null)
                    {
                        base.Tables.Add(new CompanyUserMasterDataTable(dataSet.Tables["CompanyUserMaster"]));
                    }
                    if (dataSet.Tables["ReportRevenueByClient"] != null)
                    {
                        base.Tables.Add(new ReportRevenueByClientDataTable(dataSet.Tables["ReportRevenueByClient"]));
                    }
                    if (dataSet.Tables["ReportPaymentsCollected"] != null)
                    {
                        base.Tables.Add(new ReportPaymentsCollectedDataTable(dataSet.Tables["ReportPaymentsCollected"]));
                    }
                    if (dataSet.Tables["ReportTasksInvoiced"] != null)
                    {
                        base.Tables.Add(new ReportTasksInvoicedDataTable(dataSet.Tables["ReportTasksInvoiced"]));
                    }
                    if (dataSet.Tables["ReportItemSales"] != null)
                    {
                        base.Tables.Add(new ReportItemSalesDataTable(dataSet.Tables["ReportItemSales"]));
                    }
                    if (dataSet.Tables["ReportRecurringDetailed"] != null)
                    {
                        base.Tables.Add(new ReportRecurringDetailedDataTable(dataSet.Tables["ReportRecurringDetailed"]));
                    }
                    if (dataSet.Tables["ReportRecurringAnnual"] != null)
                    {
                        base.Tables.Add(new ReportRecurringAnnualDataTable(dataSet.Tables["ReportRecurringAnnual"]));
                    }
                    if (dataSet.Tables["ReportProjectTask"] != null)
                    {
                        base.Tables.Add(new ReportProjectTaskDataTable(dataSet.Tables["ReportProjectTask"]));
                    }
                    if (dataSet.Tables["ReportProjectUser"] != null)
                    {
                        base.Tables.Add(new ReportProjectUserDataTable(dataSet.Tables["ReportProjectUser"]));
                    }
                    if (dataSet.Tables["ReportTimesheetDetailsTeam"] != null)
                    {
                        base.Tables.Add(new ReportTimesheetDetailsTeamDataTable(dataSet.Tables["ReportTimesheetDetailsTeam"]));
                    }
                    if (dataSet.Tables["ReportTimesheetDetailsTask"] != null)
                    {
                        base.Tables.Add(new ReportTimesheetDetailsTaskDataTable(dataSet.Tables["ReportTimesheetDetailsTask"]));
                    }
                    if (dataSet.Tables["ReportTimesheetDetailsProject"] != null)
                    {
                        base.Tables.Add(new ReportTimesheetDetailsProjectDataTable(dataSet.Tables["ReportTimesheetDetailsProject"]));
                    }
                    if (dataSet.Tables["ReportTimesheetDetailsClient"] != null)
                    {
                        base.Tables.Add(new ReportTimesheetDetailsClientDataTable(dataSet.Tables["ReportTimesheetDetailsClient"]));
                    }
                    if (dataSet.Tables["ReportEstimatedBillingTeam"] != null)
                    {
                        base.Tables.Add(new ReportEstimatedBillingTeamDataTable(dataSet.Tables["ReportEstimatedBillingTeam"]));
                    }
                    if (dataSet.Tables["ReportEstimatedBillingTask"] != null)
                    {
                        base.Tables.Add(new ReportEstimatedBillingTaskDataTable(dataSet.Tables["ReportEstimatedBillingTask"]));
                    }
                    if (dataSet.Tables["ReportEstimatedBillingProject"] != null)
                    {
                        base.Tables.Add(new ReportEstimatedBillingProjectDataTable(dataSet.Tables["ReportEstimatedBillingProject"]));
                    }
                    if (dataSet.Tables["ReportEstimatedBillingClient"] != null)
                    {
                        base.Tables.Add(new ReportEstimatedBillingClientDataTable(dataSet.Tables["ReportEstimatedBillingClient"]));
                    }
                    if (dataSet.Tables["ReportTimesheet"] != null)
                    {
                        base.Tables.Add(new ReportTimesheetDataTable(dataSet.Tables["ReportTimesheet"]));
                    }
                    if (dataSet.Tables["ReportInvoiceDetails"] != null)
                    {
                        base.Tables.Add(new ReportInvoiceDetailsDataTable(dataSet.Tables["ReportInvoiceDetails"]));
                    }
                    if (dataSet.Tables["ReportExpenses"] != null)
                    {
                        base.Tables.Add(new ReportExpensesDataTable(dataSet.Tables["ReportExpenses"]));
                    }
                    if (dataSet.Tables["ReportTaxSummary"] != null)
                    {
                        base.Tables.Add(new ReportTaxSummaryDataTable(dataSet.Tables["ReportTaxSummary"]));
                    }
                    if (dataSet.Tables["PaymentGatewayMaster"] != null)
                    {
                        base.Tables.Add(new PaymentGatewayMasterDataTable(dataSet.Tables["PaymentGatewayMaster"]));
                    }
                    if (dataSet.Tables["PaymentGatewayPaypalMaster"] != null)
                    {
                        base.Tables.Add(new PaymentGatewayPaypalMasterDataTable(dataSet.Tables["PaymentGatewayPaypalMaster"]));
                    }
                    if (dataSet.Tables["CompanyPaypalMaster"] != null)
                    {
                        base.Tables.Add(new CompanyPaypalMasterDataTable(dataSet.Tables["CompanyPaypalMaster"]));
                    }
                    if (dataSet.Tables["CompanyPaymentMaster"] != null)
                    {
                        base.Tables.Add(new CompanyPaymentMasterDataTable(dataSet.Tables["CompanyPaymentMaster"]));
                    }
                    if (dataSet.Tables["CloudPackageMaster"] != null)
                    {
                        base.Tables.Add(new CloudPackageMasterDataTable(dataSet.Tables["CloudPackageMaster"]));
                    }
                    if (dataSet.Tables["CompanyPackageMaster"] != null)
                    {
                        base.Tables.Add(new CompanyPackageMasterDataTable(dataSet.Tables["CompanyPackageMaster"]));
                    }
                    if (dataSet.Tables["FreePackageSettings"] != null)
                    {
                        base.Tables.Add(new FreePackageSettingsDataTable(dataSet.Tables["FreePackageSettings"]));
                    }
                    if (dataSet.Tables["SupportDepartmentMaster"] != null)
                    {
                        base.Tables.Add(new SupportDepartmentMasterDataTable(dataSet.Tables["SupportDepartmentMaster"]));
                    }
                    if (dataSet.Tables["DoyinGoSupportTicket"] != null)
                    {
                        base.Tables.Add(new DoyinGoSupportTicketDataTable(dataSet.Tables["DoyinGoSupportTicket"]));
                    }
                    if (dataSet.Tables["DoyinGoTicketAttachment"] != null)
                    {
                        base.Tables.Add(new DoyinGoTicketAttachmentDataTable(dataSet.Tables["DoyinGoTicketAttachment"]));
                    }
                    if (dataSet.Tables["DoyinGoSupportDiscussion"] != null)
                    {
                        base.Tables.Add(new DoyinGoSupportDiscussionDataTable(dataSet.Tables["DoyinGoSupportDiscussion"]));
                    }
                    if (dataSet.Tables["TermServiceContent"] != null)
                    {
                        base.Tables.Add(new TermServiceContentDataTable(dataSet.Tables["TermServiceContent"]));
                    }
                    if (dataSet.Tables["PrivacyPolicyContent"] != null)
                    {
                        base.Tables.Add(new PrivacyPolicyContentDataTable(dataSet.Tables["PrivacyPolicyContent"]));
                    }
                    base.DataSetName = dataSet.DataSetName;
                    base.Prefix = dataSet.Prefix;
                    base.Namespace = dataSet.Namespace;
                    base.Locale = dataSet.Locale;
                    base.CaseSensitive = dataSet.CaseSensitive;
                    base.EnforceConstraints = dataSet.EnforceConstraints;
                    base.Merge(dataSet, false, MissingSchemaAction.Add);
                    this.InitVars();
                }
                else
                {
                    base.ReadXmlSchema(new XmlTextReader(new StringReader(s)));
                }
                base.GetSerializationData(info, context);
                CollectionChangeEventHandler handler2 = new CollectionChangeEventHandler(this.SchemaChanged);
                base.Tables.CollectionChanged += handler2;
                this.Relations.CollectionChanged += handler2;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override DataSet Clone()
        {
            CloudAccountDA tda = (CloudAccountDA) base.Clone();
            tda.InitVars();
            tda.SchemaSerializationMode = this.SchemaSerializationMode;
            return tda;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected override XmlSchema GetSchemaSerializable()
        {
            MemoryStream w = new MemoryStream();
            base.WriteXmlSchema(new XmlTextWriter(w, null));
            w.Position = 0L;
            return XmlSchema.Read(new XmlTextReader(w), null);
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs)
        {
            CloudAccountDA tda = new CloudAccountDA();
            XmlSchemaComplexType type = new XmlSchemaComplexType();
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaAny item = new XmlSchemaAny {
                Namespace = tda.Namespace
            };
            sequence.Items.Add(item);
            type.Particle = sequence;
            XmlSchema schemaSerializable = tda.GetSchemaSerializable();
            if (xs.Contains(schemaSerializable.TargetNamespace))
            {
                MemoryStream stream = new MemoryStream();
                MemoryStream stream2 = new MemoryStream();
                try
                {
                    XmlSchema current = null;
                    schemaSerializable.Write(stream);
                    IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                    while (enumerator.MoveNext())
                    {
                        current = (XmlSchema) enumerator.Current;
                        stream2.SetLength(0L);
                        current.Write(stream2);
                        if (stream.Length == stream2.Length)
                        {
                            stream.Position = 0L;
                            stream2.Position = 0L;
                            while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                            {
                            }
                            if (stream.Position == stream.Length)
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if (stream != null)
                    {
                        stream.Close();
                    }
                    if (stream2 != null)
                    {
                        stream2.Close();
                    }
                }
            }
            xs.Add(schemaSerializable);
            return type;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass()
        {
            base.DataSetName = "CloudAccountDA";
            base.Prefix = "";
            base.Namespace = "http://tempuri.org/CloudAccountDA.xsd";
            base.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAboutContentMaster = new AboutContentMasterDataTable();
            base.Tables.Add(this.tableAboutContentMaster);
            this.tableAboutCategoryMaster = new AboutCategoryMasterDataTable();
            base.Tables.Add(this.tableAboutCategoryMaster);
            this.tableFeatureCategoryMaster = new FeatureCategoryMasterDataTable();
            base.Tables.Add(this.tableFeatureCategoryMaster);
            this.tableFeatureContentMaster = new FeatureContentMasterDataTable();
            base.Tables.Add(this.tableFeatureContentMaster);
            this.tableHomeMaster = new HomeMasterDataTable();
            base.Tables.Add(this.tableHomeMaster);
            this.tableFAQCategoryMaster = new FAQCategoryMasterDataTable();
            base.Tables.Add(this.tableFAQCategoryMaster);
            this.tableFAQMaster = new FAQMasterDataTable();
            base.Tables.Add(this.tableFAQMaster);
            this.tableHomePageSlider = new HomePageSliderDataTable();
            base.Tables.Add(this.tableHomePageSlider);
            this.tableContactMaster = new ContactMasterDataTable();
            base.Tables.Add(this.tableContactMaster);
            this.tableFeatureMaster = new FeatureMasterDataTable();
            base.Tables.Add(this.tableFeatureMaster);
            this.tableCountryMaster = new CountryMasterDataTable();
            base.Tables.Add(this.tableCountryMaster);
            this.tableStateMaster = new StateMasterDataTable();
            base.Tables.Add(this.tableStateMaster);
            this.tableCityMaster = new CityMasterDataTable();
            base.Tables.Add(this.tableCityMaster);
            this.tableCurrencyMaster = new CurrencyMasterDataTable();
            base.Tables.Add(this.tableCurrencyMaster);
            this.tableClientMaster = new ClientMasterDataTable();
            base.Tables.Add(this.tableClientMaster);
            this.tableTestimonialsMaster = new TestimonialsMasterDataTable();
            base.Tables.Add(this.tableTestimonialsMaster);
            this.tableInquiryMaster = new InquiryMasterDataTable();
            base.Tables.Add(this.tableInquiryMaster);
            this.tableFooterContent = new FooterContentDataTable();
            base.Tables.Add(this.tableFooterContent);
            this.tableMasterAdminLoginMaster = new MasterAdminLoginMasterDataTable();
            base.Tables.Add(this.tableMasterAdminLoginMaster);
            this.tableaspnet_Users = new aspnet_UsersDataTable();
            base.Tables.Add(this.tableaspnet_Users);
            this.tableModuleMaster = new ModuleMasterDataTable();
            base.Tables.Add(this.tableModuleMaster);
            this.tablePackageDetails = new PackageDetailsDataTable();
            base.Tables.Add(this.tablePackageDetails);
            this.tablePackageMaster = new PackageMasterDataTable();
            base.Tables.Add(this.tablePackageMaster);
            this.tableCompanyPackageDetails = new CompanyPackageDetailsDataTable();
            base.Tables.Add(this.tableCompanyPackageDetails);
            this.tableFormMaster = new FormMasterDataTable();
            base.Tables.Add(this.tableFormMaster);
            this.tableMasterAdminRightsMaster = new MasterAdminRightsMasterDataTable();
            base.Tables.Add(this.tableMasterAdminRightsMaster);
            this.tableFormGridMasterAdminMaster = new FormGridMasterAdminMasterDataTable();
            base.Tables.Add(this.tableFormGridMasterAdminMaster);
            this.tableModuleFormMaster = new ModuleFormMasterDataTable();
            base.Tables.Add(this.tableModuleFormMaster);
            this.tableFormGridCompanyAdminMaster = new FormGridCompanyAdminMasterDataTable();
            base.Tables.Add(this.tableFormGridCompanyAdminMaster);
            this.tableCompanyLoginMaster = new CompanyLoginMasterDataTable();
            base.Tables.Add(this.tableCompanyLoginMaster);
            this.tableCompanyAdminRightsMaster = new CompanyAdminRightsMasterDataTable();
            base.Tables.Add(this.tableCompanyAdminRightsMaster);
            this.tablePackageUpgradeRequestMaster = new PackageUpgradeRequestMasterDataTable();
            base.Tables.Add(this.tablePackageUpgradeRequestMaster);
            this.tableBussinessMaster = new BussinessMasterDataTable();
            base.Tables.Add(this.tableBussinessMaster);
            this.tableCurrentAccountMaster = new CurrentAccountMasterDataTable();
            base.Tables.Add(this.tableCurrentAccountMaster);
            this.tableIndustryMaster = new IndustryMasterDataTable();
            base.Tables.Add(this.tableIndustryMaster);
            this.tableRunningFromMaster = new RunningFromMasterDataTable();
            base.Tables.Add(this.tableRunningFromMaster);
            this.tablePackageModuleMaster = new PackageModuleMasterDataTable();
            base.Tables.Add(this.tablePackageModuleMaster);
            this.tableCloudPackageDetails = new CloudPackageDetailsDataTable();
            base.Tables.Add(this.tableCloudPackageDetails);
            this.tablePackageFeatureMaster = new PackageFeatureMasterDataTable();
            base.Tables.Add(this.tablePackageFeatureMaster);
            this.tableStaffMaster = new StaffMasterDataTable();
            base.Tables.Add(this.tableStaffMaster);
            this.tableTaskMaster = new TaskMasterDataTable();
            base.Tables.Add(this.tableTaskMaster);
            this.tableContractorMaster = new ContractorMasterDataTable();
            base.Tables.Add(this.tableContractorMaster);
            this.tableItemMaster = new ItemMasterDataTable();
            base.Tables.Add(this.tableItemMaster);
            this.tableTaxMaster = new TaxMasterDataTable();
            base.Tables.Add(this.tableTaxMaster);
            this.tableContractorProjectDetail = new ContractorProjectDetailDataTable();
            base.Tables.Add(this.tableContractorProjectDetail);
            this.tableStaffProjectDetail = new StaffProjectDetailDataTable();
            base.Tables.Add(this.tableStaffProjectDetail);
            this.tableProjectTaskDetail = new ProjectTaskDetailDataTable();
            base.Tables.Add(this.tableProjectTaskDetail);
            this.tableProjectMaster = new ProjectMasterDataTable();
            base.Tables.Add(this.tableProjectMaster);
            this.tableStaffClientAssignDetail = new StaffClientAssignDetailDataTable();
            base.Tables.Add(this.tableStaffClientAssignDetail);
            this.tableSecurityQuestionMaster = new SecurityQuestionMasterDataTable();
            base.Tables.Add(this.tableSecurityQuestionMaster);
            this.tableaspnet_Membership = new aspnet_MembershipDataTable();
            base.Tables.Add(this.tableaspnet_Membership);
            this.tableInvoiceItemDetail = new InvoiceItemDetailDataTable();
            base.Tables.Add(this.tableInvoiceItemDetail);
            this.tableInvoiceTaskDetail = new InvoiceTaskDetailDataTable();
            base.Tables.Add(this.tableInvoiceTaskDetail);
            this.tableCompanyMaster = new CompanyMasterDataTable();
            base.Tables.Add(this.tableCompanyMaster);
            this.tablePaymentMaster = new PaymentMasterDataTable();
            base.Tables.Add(this.tablePaymentMaster);
            this.tableEstimateTaskDetail = new EstimateTaskDetailDataTable();
            base.Tables.Add(this.tableEstimateTaskDetail);
            this.tableEstimateItemDetail = new EstimateItemDetailDataTable();
            base.Tables.Add(this.tableEstimateItemDetail);
            this.tableCreditTaskDetail = new CreditTaskDetailDataTable();
            base.Tables.Add(this.tableCreditTaskDetail);
            this.tableCreditItemDetail = new CreditItemDetailDataTable();
            base.Tables.Add(this.tableCreditItemDetail);
            this.tableCompanyClientContactDetail = new CompanyClientContactDetailDataTable();
            base.Tables.Add(this.tableCompanyClientContactDetail);
            this.tableCompanyClientMaster = new CompanyClientMasterDataTable();
            base.Tables.Add(this.tableCompanyClientMaster);
            this.tableCreditDefaultTermsMaster = new CreditDefaultTermsMasterDataTable();
            base.Tables.Add(this.tableCreditDefaultTermsMaster);
            this.tableEstimateDefaultTermsMaster = new EstimateDefaultTermsMasterDataTable();
            base.Tables.Add(this.tableEstimateDefaultTermsMaster);
            this.tableInvoiceDefaultTermsMaster = new InvoiceDefaultTermsMasterDataTable();
            base.Tables.Add(this.tableInvoiceDefaultTermsMaster);
            this.tableRecurringTaskDetail = new RecurringTaskDetailDataTable();
            base.Tables.Add(this.tableRecurringTaskDetail);
            this.tableRecurringItemDetail = new RecurringItemDetailDataTable();
            base.Tables.Add(this.tableRecurringItemDetail);
            this.tableCategoryMaster = new CategoryMasterDataTable();
            base.Tables.Add(this.tableCategoryMaster);
            this.tableSubCategoryMaster = new SubCategoryMasterDataTable();
            base.Tables.Add(this.tableSubCategoryMaster);
            this.tableExpenseMaster = new ExpenseMasterDataTable();
            base.Tables.Add(this.tableExpenseMaster);
            this.tableTimesheetMaster = new TimesheetMasterDataTable();
            base.Tables.Add(this.tableTimesheetMaster);
            this.tableTimesheetGridMaster = new TimesheetGridMasterDataTable();
            base.Tables.Add(this.tableTimesheetGridMaster);
            this.tableTeamSummary = new TeamSummaryDataTable();
            base.Tables.Add(this.tableTeamSummary);
            this.tableCreditMaster = new CreditMasterDataTable();
            base.Tables.Add(this.tableCreditMaster);
            this.tableCreditHistoryDetail = new CreditHistoryDetailDataTable();
            base.Tables.Add(this.tableCreditHistoryDetail);
            this.tableChangeUsername = new ChangeUsernameDataTable();
            base.Tables.Add(this.tableChangeUsername);
            this.tableAccountantMaster = new AccountantMasterDataTable();
            base.Tables.Add(this.tableAccountantMaster);
            this.tableAccountantClientDetail = new AccountantClientDetailDataTable();
            base.Tables.Add(this.tableAccountantClientDetail);
            this.tableFrequencyMaster = new FrequencyMasterDataTable();
            base.Tables.Add(this.tableFrequencyMaster);
            this.tableRecurringMaster = new RecurringMasterDataTable();
            base.Tables.Add(this.tableRecurringMaster);
            this.tableInvoiceMaster = new InvoiceMasterDataTable();
            base.Tables.Add(this.tableInvoiceMaster);
            this.tableEstimateMaster = new EstimateMasterDataTable();
            base.Tables.Add(this.tableEstimateMaster);
            this.tableAdminPermissionMaster = new AdminPermissionMasterDataTable();
            base.Tables.Add(this.tableAdminPermissionMaster);
            this.tableStaffPermissionMaster = new StaffPermissionMasterDataTable();
            base.Tables.Add(this.tableStaffPermissionMaster);
            this.tableClientPermissionMaster = new ClientPermissionMasterDataTable();
            base.Tables.Add(this.tableClientPermissionMaster);
            this.tableTemplateMaster = new TemplateMasterDataTable();
            base.Tables.Add(this.tableTemplateMaster);
            this.tableTemplateSettings = new TemplateSettingsDataTable();
            base.Tables.Add(this.tableTemplateSettings);
            this.tableMiscellaneousMaster = new MiscellaneousMasterDataTable();
            base.Tables.Add(this.tableMiscellaneousMaster);
            this.tableNewInvoiceEmailTemplate = new NewInvoiceEmailTemplateDataTable();
            base.Tables.Add(this.tableNewInvoiceEmailTemplate);
            this.tableNewEstimateEmailTemplate = new NewEstimateEmailTemplateDataTable();
            base.Tables.Add(this.tableNewEstimateEmailTemplate);
            this.tableNewCreditEmailTemplate = new NewCreditEmailTemplateDataTable();
            base.Tables.Add(this.tableNewCreditEmailTemplate);
            this.tableNewStaffEmailTemplate = new NewStaffEmailTemplateDataTable();
            base.Tables.Add(this.tableNewStaffEmailTemplate);
            this.tableNewClientEmailTemplate = new NewClientEmailTemplateDataTable();
            base.Tables.Add(this.tableNewClientEmailTemplate);
            this.tableSMTPSettings = new SMTPSettingsDataTable();
            base.Tables.Add(this.tableSMTPSettings);
            this.tableEmailNotifications = new EmailNotificationsDataTable();
            base.Tables.Add(this.tableEmailNotifications);
            this.tableNewPaymentEmailTemplate = new NewPaymentEmailTemplateDataTable();
            base.Tables.Add(this.tableNewPaymentEmailTemplate);
            this.tableLatePaymentReminderTemplate = new LatePaymentReminderTemplateDataTable();
            base.Tables.Add(this.tableLatePaymentReminderTemplate);
            this.tableAutoBillEmailTemplate = new AutoBillEmailTemplateDataTable();
            base.Tables.Add(this.tableAutoBillEmailTemplate);
            this.tableInvoiceDisputeHistory = new InvoiceDisputeHistoryDataTable();
            base.Tables.Add(this.tableInvoiceDisputeHistory);
            this.tableEstimateDisputeHistory = new EstimateDisputeHistoryDataTable();
            base.Tables.Add(this.tableEstimateDisputeHistory);
            this.tableCompanyUserMaster = new CompanyUserMasterDataTable();
            base.Tables.Add(this.tableCompanyUserMaster);
            this.tableReportRevenueByClient = new ReportRevenueByClientDataTable();
            base.Tables.Add(this.tableReportRevenueByClient);
            this.tableReportPaymentsCollected = new ReportPaymentsCollectedDataTable();
            base.Tables.Add(this.tableReportPaymentsCollected);
            this.tableReportTasksInvoiced = new ReportTasksInvoicedDataTable();
            base.Tables.Add(this.tableReportTasksInvoiced);
            this.tableReportItemSales = new ReportItemSalesDataTable();
            base.Tables.Add(this.tableReportItemSales);
            this.tableReportRecurringDetailed = new ReportRecurringDetailedDataTable();
            base.Tables.Add(this.tableReportRecurringDetailed);
            this.tableReportRecurringAnnual = new ReportRecurringAnnualDataTable();
            base.Tables.Add(this.tableReportRecurringAnnual);
            this.tableReportProjectTask = new ReportProjectTaskDataTable();
            base.Tables.Add(this.tableReportProjectTask);
            this.tableReportProjectUser = new ReportProjectUserDataTable();
            base.Tables.Add(this.tableReportProjectUser);
            this.tableReportTimesheetDetailsTeam = new ReportTimesheetDetailsTeamDataTable();
            base.Tables.Add(this.tableReportTimesheetDetailsTeam);
            this.tableReportTimesheetDetailsTask = new ReportTimesheetDetailsTaskDataTable();
            base.Tables.Add(this.tableReportTimesheetDetailsTask);
            this.tableReportTimesheetDetailsProject = new ReportTimesheetDetailsProjectDataTable();
            base.Tables.Add(this.tableReportTimesheetDetailsProject);
            this.tableReportTimesheetDetailsClient = new ReportTimesheetDetailsClientDataTable();
            base.Tables.Add(this.tableReportTimesheetDetailsClient);
            this.tableReportEstimatedBillingTeam = new ReportEstimatedBillingTeamDataTable();
            base.Tables.Add(this.tableReportEstimatedBillingTeam);
            this.tableReportEstimatedBillingTask = new ReportEstimatedBillingTaskDataTable();
            base.Tables.Add(this.tableReportEstimatedBillingTask);
            this.tableReportEstimatedBillingProject = new ReportEstimatedBillingProjectDataTable();
            base.Tables.Add(this.tableReportEstimatedBillingProject);
            this.tableReportEstimatedBillingClient = new ReportEstimatedBillingClientDataTable();
            base.Tables.Add(this.tableReportEstimatedBillingClient);
            this.tableReportTimesheet = new ReportTimesheetDataTable();
            base.Tables.Add(this.tableReportTimesheet);
            this.tableReportInvoiceDetails = new ReportInvoiceDetailsDataTable();
            base.Tables.Add(this.tableReportInvoiceDetails);
            this.tableReportExpenses = new ReportExpensesDataTable();
            base.Tables.Add(this.tableReportExpenses);
            this.tableReportTaxSummary = new ReportTaxSummaryDataTable();
            base.Tables.Add(this.tableReportTaxSummary);
            this.tablePaymentGatewayMaster = new PaymentGatewayMasterDataTable();
            base.Tables.Add(this.tablePaymentGatewayMaster);
            this.tablePaymentGatewayPaypalMaster = new PaymentGatewayPaypalMasterDataTable();
            base.Tables.Add(this.tablePaymentGatewayPaypalMaster);
            this.tableCompanyPaypalMaster = new CompanyPaypalMasterDataTable();
            base.Tables.Add(this.tableCompanyPaypalMaster);
            this.tableCompanyPaymentMaster = new CompanyPaymentMasterDataTable();
            base.Tables.Add(this.tableCompanyPaymentMaster);
            this.tableCloudPackageMaster = new CloudPackageMasterDataTable();
            base.Tables.Add(this.tableCloudPackageMaster);
            this.tableCompanyPackageMaster = new CompanyPackageMasterDataTable();
            base.Tables.Add(this.tableCompanyPackageMaster);
            this.tableFreePackageSettings = new FreePackageSettingsDataTable();
            base.Tables.Add(this.tableFreePackageSettings);
            this.tableSupportDepartmentMaster = new SupportDepartmentMasterDataTable();
            base.Tables.Add(this.tableSupportDepartmentMaster);
            this.tableDoyinGoSupportTicket = new DoyinGoSupportTicketDataTable();
            base.Tables.Add(this.tableDoyinGoSupportTicket);
            this.tableDoyinGoTicketAttachment = new DoyinGoTicketAttachmentDataTable();
            base.Tables.Add(this.tableDoyinGoTicketAttachment);
            this.tableDoyinGoSupportDiscussion = new DoyinGoSupportDiscussionDataTable();
            base.Tables.Add(this.tableDoyinGoSupportDiscussion);
            this.tableTermServiceContent = new TermServiceContentDataTable();
            base.Tables.Add(this.tableTermServiceContent);
            this.tablePrivacyPolicyContent = new PrivacyPolicyContentDataTable();
            base.Tables.Add(this.tablePrivacyPolicyContent);
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected override void InitializeDerivedDataSet()
        {
            base.BeginInit();
            this.InitClass();
            base.EndInit();
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal void InitVars()
        {
            this.InitVars(true);
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable)
        {
            this.tableAboutContentMaster = (AboutContentMasterDataTable) base.Tables["AboutContentMaster"];
            if (initTable && (this.tableAboutContentMaster != null))
            {
                this.tableAboutContentMaster.InitVars();
            }
            this.tableAboutCategoryMaster = (AboutCategoryMasterDataTable) base.Tables["AboutCategoryMaster"];
            if (initTable && (this.tableAboutCategoryMaster != null))
            {
                this.tableAboutCategoryMaster.InitVars();
            }
            this.tableFeatureCategoryMaster = (FeatureCategoryMasterDataTable) base.Tables["FeatureCategoryMaster"];
            if (initTable && (this.tableFeatureCategoryMaster != null))
            {
                this.tableFeatureCategoryMaster.InitVars();
            }
            this.tableFeatureContentMaster = (FeatureContentMasterDataTable) base.Tables["FeatureContentMaster"];
            if (initTable && (this.tableFeatureContentMaster != null))
            {
                this.tableFeatureContentMaster.InitVars();
            }
            this.tableHomeMaster = (HomeMasterDataTable) base.Tables["HomeMaster"];
            if (initTable && (this.tableHomeMaster != null))
            {
                this.tableHomeMaster.InitVars();
            }
            this.tableFAQCategoryMaster = (FAQCategoryMasterDataTable) base.Tables["FAQCategoryMaster"];
            if (initTable && (this.tableFAQCategoryMaster != null))
            {
                this.tableFAQCategoryMaster.InitVars();
            }
            this.tableFAQMaster = (FAQMasterDataTable) base.Tables["FAQMaster"];
            if (initTable && (this.tableFAQMaster != null))
            {
                this.tableFAQMaster.InitVars();
            }
            this.tableHomePageSlider = (HomePageSliderDataTable) base.Tables["HomePageSlider"];
            if (initTable && (this.tableHomePageSlider != null))
            {
                this.tableHomePageSlider.InitVars();
            }
            this.tableContactMaster = (ContactMasterDataTable) base.Tables["ContactMaster"];
            if (initTable && (this.tableContactMaster != null))
            {
                this.tableContactMaster.InitVars();
            }
            this.tableFeatureMaster = (FeatureMasterDataTable) base.Tables["FeatureMaster"];
            if (initTable && (this.tableFeatureMaster != null))
            {
                this.tableFeatureMaster.InitVars();
            }
            this.tableCountryMaster = (CountryMasterDataTable) base.Tables["CountryMaster"];
            if (initTable && (this.tableCountryMaster != null))
            {
                this.tableCountryMaster.InitVars();
            }
            this.tableStateMaster = (StateMasterDataTable) base.Tables["StateMaster"];
            if (initTable && (this.tableStateMaster != null))
            {
                this.tableStateMaster.InitVars();
            }
            this.tableCityMaster = (CityMasterDataTable) base.Tables["CityMaster"];
            if (initTable && (this.tableCityMaster != null))
            {
                this.tableCityMaster.InitVars();
            }
            this.tableCurrencyMaster = (CurrencyMasterDataTable) base.Tables["CurrencyMaster"];
            if (initTable && (this.tableCurrencyMaster != null))
            {
                this.tableCurrencyMaster.InitVars();
            }
            this.tableClientMaster = (ClientMasterDataTable) base.Tables["ClientMaster"];
            if (initTable && (this.tableClientMaster != null))
            {
                this.tableClientMaster.InitVars();
            }
            this.tableTestimonialsMaster = (TestimonialsMasterDataTable) base.Tables["TestimonialsMaster"];
            if (initTable && (this.tableTestimonialsMaster != null))
            {
                this.tableTestimonialsMaster.InitVars();
            }
            this.tableInquiryMaster = (InquiryMasterDataTable) base.Tables["InquiryMaster"];
            if (initTable && (this.tableInquiryMaster != null))
            {
                this.tableInquiryMaster.InitVars();
            }
            this.tableFooterContent = (FooterContentDataTable) base.Tables["FooterContent"];
            if (initTable && (this.tableFooterContent != null))
            {
                this.tableFooterContent.InitVars();
            }
            this.tableMasterAdminLoginMaster = (MasterAdminLoginMasterDataTable) base.Tables["MasterAdminLoginMaster"];
            if (initTable && (this.tableMasterAdminLoginMaster != null))
            {
                this.tableMasterAdminLoginMaster.InitVars();
            }
            this.tableaspnet_Users = (aspnet_UsersDataTable) base.Tables["aspnet_Users"];
            if (initTable && (this.tableaspnet_Users != null))
            {
                this.tableaspnet_Users.InitVars();
            }
            this.tableModuleMaster = (ModuleMasterDataTable) base.Tables["ModuleMaster"];
            if (initTable && (this.tableModuleMaster != null))
            {
                this.tableModuleMaster.InitVars();
            }
            this.tablePackageDetails = (PackageDetailsDataTable) base.Tables["PackageDetails"];
            if (initTable && (this.tablePackageDetails != null))
            {
                this.tablePackageDetails.InitVars();
            }
            this.tablePackageMaster = (PackageMasterDataTable) base.Tables["PackageMaster"];
            if (initTable && (this.tablePackageMaster != null))
            {
                this.tablePackageMaster.InitVars();
            }
            this.tableCompanyPackageDetails = (CompanyPackageDetailsDataTable) base.Tables["CompanyPackageDetails"];
            if (initTable && (this.tableCompanyPackageDetails != null))
            {
                this.tableCompanyPackageDetails.InitVars();
            }
            this.tableFormMaster = (FormMasterDataTable) base.Tables["FormMaster"];
            if (initTable && (this.tableFormMaster != null))
            {
                this.tableFormMaster.InitVars();
            }
            this.tableMasterAdminRightsMaster = (MasterAdminRightsMasterDataTable) base.Tables["MasterAdminRightsMaster"];
            if (initTable && (this.tableMasterAdminRightsMaster != null))
            {
                this.tableMasterAdminRightsMaster.InitVars();
            }
            this.tableFormGridMasterAdminMaster = (FormGridMasterAdminMasterDataTable) base.Tables["FormGridMasterAdminMaster"];
            if (initTable && (this.tableFormGridMasterAdminMaster != null))
            {
                this.tableFormGridMasterAdminMaster.InitVars();
            }
            this.tableModuleFormMaster = (ModuleFormMasterDataTable) base.Tables["ModuleFormMaster"];
            if (initTable && (this.tableModuleFormMaster != null))
            {
                this.tableModuleFormMaster.InitVars();
            }
            this.tableFormGridCompanyAdminMaster = (FormGridCompanyAdminMasterDataTable) base.Tables["FormGridCompanyAdminMaster"];
            if (initTable && (this.tableFormGridCompanyAdminMaster != null))
            {
                this.tableFormGridCompanyAdminMaster.InitVars();
            }
            this.tableCompanyLoginMaster = (CompanyLoginMasterDataTable) base.Tables["CompanyLoginMaster"];
            if (initTable && (this.tableCompanyLoginMaster != null))
            {
                this.tableCompanyLoginMaster.InitVars();
            }
            this.tableCompanyAdminRightsMaster = (CompanyAdminRightsMasterDataTable) base.Tables["CompanyAdminRightsMaster"];
            if (initTable && (this.tableCompanyAdminRightsMaster != null))
            {
                this.tableCompanyAdminRightsMaster.InitVars();
            }
            this.tablePackageUpgradeRequestMaster = (PackageUpgradeRequestMasterDataTable) base.Tables["PackageUpgradeRequestMaster"];
            if (initTable && (this.tablePackageUpgradeRequestMaster != null))
            {
                this.tablePackageUpgradeRequestMaster.InitVars();
            }
            this.tableBussinessMaster = (BussinessMasterDataTable) base.Tables["BussinessMaster"];
            if (initTable && (this.tableBussinessMaster != null))
            {
                this.tableBussinessMaster.InitVars();
            }
            this.tableCurrentAccountMaster = (CurrentAccountMasterDataTable) base.Tables["CurrentAccountMaster"];
            if (initTable && (this.tableCurrentAccountMaster != null))
            {
                this.tableCurrentAccountMaster.InitVars();
            }
            this.tableIndustryMaster = (IndustryMasterDataTable) base.Tables["IndustryMaster"];
            if (initTable && (this.tableIndustryMaster != null))
            {
                this.tableIndustryMaster.InitVars();
            }
            this.tableRunningFromMaster = (RunningFromMasterDataTable) base.Tables["RunningFromMaster"];
            if (initTable && (this.tableRunningFromMaster != null))
            {
                this.tableRunningFromMaster.InitVars();
            }
            this.tablePackageModuleMaster = (PackageModuleMasterDataTable) base.Tables["PackageModuleMaster"];
            if (initTable && (this.tablePackageModuleMaster != null))
            {
                this.tablePackageModuleMaster.InitVars();
            }
            this.tableCloudPackageDetails = (CloudPackageDetailsDataTable) base.Tables["CloudPackageDetails"];
            if (initTable && (this.tableCloudPackageDetails != null))
            {
                this.tableCloudPackageDetails.InitVars();
            }
            this.tablePackageFeatureMaster = (PackageFeatureMasterDataTable) base.Tables["PackageFeatureMaster"];
            if (initTable && (this.tablePackageFeatureMaster != null))
            {
                this.tablePackageFeatureMaster.InitVars();
            }
            this.tableStaffMaster = (StaffMasterDataTable) base.Tables["StaffMaster"];
            if (initTable && (this.tableStaffMaster != null))
            {
                this.tableStaffMaster.InitVars();
            }
            this.tableTaskMaster = (TaskMasterDataTable) base.Tables["TaskMaster"];
            if (initTable && (this.tableTaskMaster != null))
            {
                this.tableTaskMaster.InitVars();
            }
            this.tableContractorMaster = (ContractorMasterDataTable) base.Tables["ContractorMaster"];
            if (initTable && (this.tableContractorMaster != null))
            {
                this.tableContractorMaster.InitVars();
            }
            this.tableItemMaster = (ItemMasterDataTable) base.Tables["ItemMaster"];
            if (initTable && (this.tableItemMaster != null))
            {
                this.tableItemMaster.InitVars();
            }
            this.tableTaxMaster = (TaxMasterDataTable) base.Tables["TaxMaster"];
            if (initTable && (this.tableTaxMaster != null))
            {
                this.tableTaxMaster.InitVars();
            }
            this.tableContractorProjectDetail = (ContractorProjectDetailDataTable) base.Tables["ContractorProjectDetail"];
            if (initTable && (this.tableContractorProjectDetail != null))
            {
                this.tableContractorProjectDetail.InitVars();
            }
            this.tableStaffProjectDetail = (StaffProjectDetailDataTable) base.Tables["StaffProjectDetail"];
            if (initTable && (this.tableStaffProjectDetail != null))
            {
                this.tableStaffProjectDetail.InitVars();
            }
            this.tableProjectTaskDetail = (ProjectTaskDetailDataTable) base.Tables["ProjectTaskDetail"];
            if (initTable && (this.tableProjectTaskDetail != null))
            {
                this.tableProjectTaskDetail.InitVars();
            }
            this.tableProjectMaster = (ProjectMasterDataTable) base.Tables["ProjectMaster"];
            if (initTable && (this.tableProjectMaster != null))
            {
                this.tableProjectMaster.InitVars();
            }
            this.tableStaffClientAssignDetail = (StaffClientAssignDetailDataTable) base.Tables["StaffClientAssignDetail"];
            if (initTable && (this.tableStaffClientAssignDetail != null))
            {
                this.tableStaffClientAssignDetail.InitVars();
            }
            this.tableSecurityQuestionMaster = (SecurityQuestionMasterDataTable) base.Tables["SecurityQuestionMaster"];
            if (initTable && (this.tableSecurityQuestionMaster != null))
            {
                this.tableSecurityQuestionMaster.InitVars();
            }
            this.tableaspnet_Membership = (aspnet_MembershipDataTable) base.Tables["aspnet_Membership"];
            if (initTable && (this.tableaspnet_Membership != null))
            {
                this.tableaspnet_Membership.InitVars();
            }
            this.tableInvoiceItemDetail = (InvoiceItemDetailDataTable) base.Tables["InvoiceItemDetail"];
            if (initTable && (this.tableInvoiceItemDetail != null))
            {
                this.tableInvoiceItemDetail.InitVars();
            }
            this.tableInvoiceTaskDetail = (InvoiceTaskDetailDataTable) base.Tables["InvoiceTaskDetail"];
            if (initTable && (this.tableInvoiceTaskDetail != null))
            {
                this.tableInvoiceTaskDetail.InitVars();
            }
            this.tableCompanyMaster = (CompanyMasterDataTable) base.Tables["CompanyMaster"];
            if (initTable && (this.tableCompanyMaster != null))
            {
                this.tableCompanyMaster.InitVars();
            }
            this.tablePaymentMaster = (PaymentMasterDataTable) base.Tables["PaymentMaster"];
            if (initTable && (this.tablePaymentMaster != null))
            {
                this.tablePaymentMaster.InitVars();
            }
            this.tableEstimateTaskDetail = (EstimateTaskDetailDataTable) base.Tables["EstimateTaskDetail"];
            if (initTable && (this.tableEstimateTaskDetail != null))
            {
                this.tableEstimateTaskDetail.InitVars();
            }
            this.tableEstimateItemDetail = (EstimateItemDetailDataTable) base.Tables["EstimateItemDetail"];
            if (initTable && (this.tableEstimateItemDetail != null))
            {
                this.tableEstimateItemDetail.InitVars();
            }
            this.tableCreditTaskDetail = (CreditTaskDetailDataTable) base.Tables["CreditTaskDetail"];
            if (initTable && (this.tableCreditTaskDetail != null))
            {
                this.tableCreditTaskDetail.InitVars();
            }
            this.tableCreditItemDetail = (CreditItemDetailDataTable) base.Tables["CreditItemDetail"];
            if (initTable && (this.tableCreditItemDetail != null))
            {
                this.tableCreditItemDetail.InitVars();
            }
            this.tableCompanyClientContactDetail = (CompanyClientContactDetailDataTable) base.Tables["CompanyClientContactDetail"];
            if (initTable && (this.tableCompanyClientContactDetail != null))
            {
                this.tableCompanyClientContactDetail.InitVars();
            }
            this.tableCompanyClientMaster = (CompanyClientMasterDataTable) base.Tables["CompanyClientMaster"];
            if (initTable && (this.tableCompanyClientMaster != null))
            {
                this.tableCompanyClientMaster.InitVars();
            }
            this.tableCreditDefaultTermsMaster = (CreditDefaultTermsMasterDataTable) base.Tables["CreditDefaultTermsMaster"];
            if (initTable && (this.tableCreditDefaultTermsMaster != null))
            {
                this.tableCreditDefaultTermsMaster.InitVars();
            }
            this.tableEstimateDefaultTermsMaster = (EstimateDefaultTermsMasterDataTable) base.Tables["EstimateDefaultTermsMaster"];
            if (initTable && (this.tableEstimateDefaultTermsMaster != null))
            {
                this.tableEstimateDefaultTermsMaster.InitVars();
            }
            this.tableInvoiceDefaultTermsMaster = (InvoiceDefaultTermsMasterDataTable) base.Tables["InvoiceDefaultTermsMaster"];
            if (initTable && (this.tableInvoiceDefaultTermsMaster != null))
            {
                this.tableInvoiceDefaultTermsMaster.InitVars();
            }
            this.tableRecurringTaskDetail = (RecurringTaskDetailDataTable) base.Tables["RecurringTaskDetail"];
            if (initTable && (this.tableRecurringTaskDetail != null))
            {
                this.tableRecurringTaskDetail.InitVars();
            }
            this.tableRecurringItemDetail = (RecurringItemDetailDataTable) base.Tables["RecurringItemDetail"];
            if (initTable && (this.tableRecurringItemDetail != null))
            {
                this.tableRecurringItemDetail.InitVars();
            }
            this.tableCategoryMaster = (CategoryMasterDataTable) base.Tables["CategoryMaster"];
            if (initTable && (this.tableCategoryMaster != null))
            {
                this.tableCategoryMaster.InitVars();
            }
            this.tableSubCategoryMaster = (SubCategoryMasterDataTable) base.Tables["SubCategoryMaster"];
            if (initTable && (this.tableSubCategoryMaster != null))
            {
                this.tableSubCategoryMaster.InitVars();
            }
            this.tableExpenseMaster = (ExpenseMasterDataTable) base.Tables["ExpenseMaster"];
            if (initTable && (this.tableExpenseMaster != null))
            {
                this.tableExpenseMaster.InitVars();
            }
            this.tableTimesheetMaster = (TimesheetMasterDataTable) base.Tables["TimesheetMaster"];
            if (initTable && (this.tableTimesheetMaster != null))
            {
                this.tableTimesheetMaster.InitVars();
            }
            this.tableTimesheetGridMaster = (TimesheetGridMasterDataTable) base.Tables["TimesheetGridMaster"];
            if (initTable && (this.tableTimesheetGridMaster != null))
            {
                this.tableTimesheetGridMaster.InitVars();
            }
            this.tableTeamSummary = (TeamSummaryDataTable) base.Tables["TeamSummary"];
            if (initTable && (this.tableTeamSummary != null))
            {
                this.tableTeamSummary.InitVars();
            }
            this.tableCreditMaster = (CreditMasterDataTable) base.Tables["CreditMaster"];
            if (initTable && (this.tableCreditMaster != null))
            {
                this.tableCreditMaster.InitVars();
            }
            this.tableCreditHistoryDetail = (CreditHistoryDetailDataTable) base.Tables["CreditHistoryDetail"];
            if (initTable && (this.tableCreditHistoryDetail != null))
            {
                this.tableCreditHistoryDetail.InitVars();
            }
            this.tableChangeUsername = (ChangeUsernameDataTable) base.Tables["ChangeUsername"];
            if (initTable && (this.tableChangeUsername != null))
            {
                this.tableChangeUsername.InitVars();
            }
            this.tableAccountantMaster = (AccountantMasterDataTable) base.Tables["AccountantMaster"];
            if (initTable && (this.tableAccountantMaster != null))
            {
                this.tableAccountantMaster.InitVars();
            }
            this.tableAccountantClientDetail = (AccountantClientDetailDataTable) base.Tables["AccountantClientDetail"];
            if (initTable && (this.tableAccountantClientDetail != null))
            {
                this.tableAccountantClientDetail.InitVars();
            }
            this.tableFrequencyMaster = (FrequencyMasterDataTable) base.Tables["FrequencyMaster"];
            if (initTable && (this.tableFrequencyMaster != null))
            {
                this.tableFrequencyMaster.InitVars();
            }
            this.tableRecurringMaster = (RecurringMasterDataTable) base.Tables["RecurringMaster"];
            if (initTable && (this.tableRecurringMaster != null))
            {
                this.tableRecurringMaster.InitVars();
            }
            this.tableInvoiceMaster = (InvoiceMasterDataTable) base.Tables["InvoiceMaster"];
            if (initTable && (this.tableInvoiceMaster != null))
            {
                this.tableInvoiceMaster.InitVars();
            }
            this.tableEstimateMaster = (EstimateMasterDataTable) base.Tables["EstimateMaster"];
            if (initTable && (this.tableEstimateMaster != null))
            {
                this.tableEstimateMaster.InitVars();
            }
            this.tableAdminPermissionMaster = (AdminPermissionMasterDataTable) base.Tables["AdminPermissionMaster"];
            if (initTable && (this.tableAdminPermissionMaster != null))
            {
                this.tableAdminPermissionMaster.InitVars();
            }
            this.tableStaffPermissionMaster = (StaffPermissionMasterDataTable) base.Tables["StaffPermissionMaster"];
            if (initTable && (this.tableStaffPermissionMaster != null))
            {
                this.tableStaffPermissionMaster.InitVars();
            }
            this.tableClientPermissionMaster = (ClientPermissionMasterDataTable) base.Tables["ClientPermissionMaster"];
            if (initTable && (this.tableClientPermissionMaster != null))
            {
                this.tableClientPermissionMaster.InitVars();
            }
            this.tableTemplateMaster = (TemplateMasterDataTable) base.Tables["TemplateMaster"];
            if (initTable && (this.tableTemplateMaster != null))
            {
                this.tableTemplateMaster.InitVars();
            }
            this.tableTemplateSettings = (TemplateSettingsDataTable) base.Tables["TemplateSettings"];
            if (initTable && (this.tableTemplateSettings != null))
            {
                this.tableTemplateSettings.InitVars();
            }
            this.tableMiscellaneousMaster = (MiscellaneousMasterDataTable) base.Tables["MiscellaneousMaster"];
            if (initTable && (this.tableMiscellaneousMaster != null))
            {
                this.tableMiscellaneousMaster.InitVars();
            }
            this.tableNewInvoiceEmailTemplate = (NewInvoiceEmailTemplateDataTable) base.Tables["NewInvoiceEmailTemplate"];
            if (initTable && (this.tableNewInvoiceEmailTemplate != null))
            {
                this.tableNewInvoiceEmailTemplate.InitVars();
            }
            this.tableNewEstimateEmailTemplate = (NewEstimateEmailTemplateDataTable) base.Tables["NewEstimateEmailTemplate"];
            if (initTable && (this.tableNewEstimateEmailTemplate != null))
            {
                this.tableNewEstimateEmailTemplate.InitVars();
            }
            this.tableNewCreditEmailTemplate = (NewCreditEmailTemplateDataTable) base.Tables["NewCreditEmailTemplate"];
            if (initTable && (this.tableNewCreditEmailTemplate != null))
            {
                this.tableNewCreditEmailTemplate.InitVars();
            }
            this.tableNewStaffEmailTemplate = (NewStaffEmailTemplateDataTable) base.Tables["NewStaffEmailTemplate"];
            if (initTable && (this.tableNewStaffEmailTemplate != null))
            {
                this.tableNewStaffEmailTemplate.InitVars();
            }
            this.tableNewClientEmailTemplate = (NewClientEmailTemplateDataTable) base.Tables["NewClientEmailTemplate"];
            if (initTable && (this.tableNewClientEmailTemplate != null))
            {
                this.tableNewClientEmailTemplate.InitVars();
            }
            this.tableSMTPSettings = (SMTPSettingsDataTable) base.Tables["SMTPSettings"];
            if (initTable && (this.tableSMTPSettings != null))
            {
                this.tableSMTPSettings.InitVars();
            }
            this.tableEmailNotifications = (EmailNotificationsDataTable) base.Tables["EmailNotifications"];
            if (initTable && (this.tableEmailNotifications != null))
            {
                this.tableEmailNotifications.InitVars();
            }
            this.tableNewPaymentEmailTemplate = (NewPaymentEmailTemplateDataTable) base.Tables["NewPaymentEmailTemplate"];
            if (initTable && (this.tableNewPaymentEmailTemplate != null))
            {
                this.tableNewPaymentEmailTemplate.InitVars();
            }
            this.tableLatePaymentReminderTemplate = (LatePaymentReminderTemplateDataTable) base.Tables["LatePaymentReminderTemplate"];
            if (initTable && (this.tableLatePaymentReminderTemplate != null))
            {
                this.tableLatePaymentReminderTemplate.InitVars();
            }
            this.tableAutoBillEmailTemplate = (AutoBillEmailTemplateDataTable) base.Tables["AutoBillEmailTemplate"];
            if (initTable && (this.tableAutoBillEmailTemplate != null))
            {
                this.tableAutoBillEmailTemplate.InitVars();
            }
            this.tableInvoiceDisputeHistory = (InvoiceDisputeHistoryDataTable) base.Tables["InvoiceDisputeHistory"];
            if (initTable && (this.tableInvoiceDisputeHistory != null))
            {
                this.tableInvoiceDisputeHistory.InitVars();
            }
            this.tableEstimateDisputeHistory = (EstimateDisputeHistoryDataTable) base.Tables["EstimateDisputeHistory"];
            if (initTable && (this.tableEstimateDisputeHistory != null))
            {
                this.tableEstimateDisputeHistory.InitVars();
            }
            this.tableCompanyUserMaster = (CompanyUserMasterDataTable) base.Tables["CompanyUserMaster"];
            if (initTable && (this.tableCompanyUserMaster != null))
            {
                this.tableCompanyUserMaster.InitVars();
            }
            this.tableReportRevenueByClient = (ReportRevenueByClientDataTable) base.Tables["ReportRevenueByClient"];
            if (initTable && (this.tableReportRevenueByClient != null))
            {
                this.tableReportRevenueByClient.InitVars();
            }
            this.tableReportPaymentsCollected = (ReportPaymentsCollectedDataTable) base.Tables["ReportPaymentsCollected"];
            if (initTable && (this.tableReportPaymentsCollected != null))
            {
                this.tableReportPaymentsCollected.InitVars();
            }
            this.tableReportTasksInvoiced = (ReportTasksInvoicedDataTable) base.Tables["ReportTasksInvoiced"];
            if (initTable && (this.tableReportTasksInvoiced != null))
            {
                this.tableReportTasksInvoiced.InitVars();
            }
            this.tableReportItemSales = (ReportItemSalesDataTable) base.Tables["ReportItemSales"];
            if (initTable && (this.tableReportItemSales != null))
            {
                this.tableReportItemSales.InitVars();
            }
            this.tableReportRecurringDetailed = (ReportRecurringDetailedDataTable) base.Tables["ReportRecurringDetailed"];
            if (initTable && (this.tableReportRecurringDetailed != null))
            {
                this.tableReportRecurringDetailed.InitVars();
            }
            this.tableReportRecurringAnnual = (ReportRecurringAnnualDataTable) base.Tables["ReportRecurringAnnual"];
            if (initTable && (this.tableReportRecurringAnnual != null))
            {
                this.tableReportRecurringAnnual.InitVars();
            }
            this.tableReportProjectTask = (ReportProjectTaskDataTable) base.Tables["ReportProjectTask"];
            if (initTable && (this.tableReportProjectTask != null))
            {
                this.tableReportProjectTask.InitVars();
            }
            this.tableReportProjectUser = (ReportProjectUserDataTable) base.Tables["ReportProjectUser"];
            if (initTable && (this.tableReportProjectUser != null))
            {
                this.tableReportProjectUser.InitVars();
            }
            this.tableReportTimesheetDetailsTeam = (ReportTimesheetDetailsTeamDataTable) base.Tables["ReportTimesheetDetailsTeam"];
            if (initTable && (this.tableReportTimesheetDetailsTeam != null))
            {
                this.tableReportTimesheetDetailsTeam.InitVars();
            }
            this.tableReportTimesheetDetailsTask = (ReportTimesheetDetailsTaskDataTable) base.Tables["ReportTimesheetDetailsTask"];
            if (initTable && (this.tableReportTimesheetDetailsTask != null))
            {
                this.tableReportTimesheetDetailsTask.InitVars();
            }
            this.tableReportTimesheetDetailsProject = (ReportTimesheetDetailsProjectDataTable) base.Tables["ReportTimesheetDetailsProject"];
            if (initTable && (this.tableReportTimesheetDetailsProject != null))
            {
                this.tableReportTimesheetDetailsProject.InitVars();
            }
            this.tableReportTimesheetDetailsClient = (ReportTimesheetDetailsClientDataTable) base.Tables["ReportTimesheetDetailsClient"];
            if (initTable && (this.tableReportTimesheetDetailsClient != null))
            {
                this.tableReportTimesheetDetailsClient.InitVars();
            }
            this.tableReportEstimatedBillingTeam = (ReportEstimatedBillingTeamDataTable) base.Tables["ReportEstimatedBillingTeam"];
            if (initTable && (this.tableReportEstimatedBillingTeam != null))
            {
                this.tableReportEstimatedBillingTeam.InitVars();
            }
            this.tableReportEstimatedBillingTask = (ReportEstimatedBillingTaskDataTable) base.Tables["ReportEstimatedBillingTask"];
            if (initTable && (this.tableReportEstimatedBillingTask != null))
            {
                this.tableReportEstimatedBillingTask.InitVars();
            }
            this.tableReportEstimatedBillingProject = (ReportEstimatedBillingProjectDataTable) base.Tables["ReportEstimatedBillingProject"];
            if (initTable && (this.tableReportEstimatedBillingProject != null))
            {
                this.tableReportEstimatedBillingProject.InitVars();
            }
            this.tableReportEstimatedBillingClient = (ReportEstimatedBillingClientDataTable) base.Tables["ReportEstimatedBillingClient"];
            if (initTable && (this.tableReportEstimatedBillingClient != null))
            {
                this.tableReportEstimatedBillingClient.InitVars();
            }
            this.tableReportTimesheet = (ReportTimesheetDataTable) base.Tables["ReportTimesheet"];
            if (initTable && (this.tableReportTimesheet != null))
            {
                this.tableReportTimesheet.InitVars();
            }
            this.tableReportInvoiceDetails = (ReportInvoiceDetailsDataTable) base.Tables["ReportInvoiceDetails"];
            if (initTable && (this.tableReportInvoiceDetails != null))
            {
                this.tableReportInvoiceDetails.InitVars();
            }
            this.tableReportExpenses = (ReportExpensesDataTable) base.Tables["ReportExpenses"];
            if (initTable && (this.tableReportExpenses != null))
            {
                this.tableReportExpenses.InitVars();
            }
            this.tableReportTaxSummary = (ReportTaxSummaryDataTable) base.Tables["ReportTaxSummary"];
            if (initTable && (this.tableReportTaxSummary != null))
            {
                this.tableReportTaxSummary.InitVars();
            }
            this.tablePaymentGatewayMaster = (PaymentGatewayMasterDataTable) base.Tables["PaymentGatewayMaster"];
            if (initTable && (this.tablePaymentGatewayMaster != null))
            {
                this.tablePaymentGatewayMaster.InitVars();
            }
            this.tablePaymentGatewayPaypalMaster = (PaymentGatewayPaypalMasterDataTable) base.Tables["PaymentGatewayPaypalMaster"];
            if (initTable && (this.tablePaymentGatewayPaypalMaster != null))
            {
                this.tablePaymentGatewayPaypalMaster.InitVars();
            }
            this.tableCompanyPaypalMaster = (CompanyPaypalMasterDataTable) base.Tables["CompanyPaypalMaster"];
            if (initTable && (this.tableCompanyPaypalMaster != null))
            {
                this.tableCompanyPaypalMaster.InitVars();
            }
            this.tableCompanyPaymentMaster = (CompanyPaymentMasterDataTable) base.Tables["CompanyPaymentMaster"];
            if (initTable && (this.tableCompanyPaymentMaster != null))
            {
                this.tableCompanyPaymentMaster.InitVars();
            }
            this.tableCloudPackageMaster = (CloudPackageMasterDataTable) base.Tables["CloudPackageMaster"];
            if (initTable && (this.tableCloudPackageMaster != null))
            {
                this.tableCloudPackageMaster.InitVars();
            }
            this.tableCompanyPackageMaster = (CompanyPackageMasterDataTable) base.Tables["CompanyPackageMaster"];
            if (initTable && (this.tableCompanyPackageMaster != null))
            {
                this.tableCompanyPackageMaster.InitVars();
            }
            this.tableFreePackageSettings = (FreePackageSettingsDataTable) base.Tables["FreePackageSettings"];
            if (initTable && (this.tableFreePackageSettings != null))
            {
                this.tableFreePackageSettings.InitVars();
            }
            this.tableSupportDepartmentMaster = (SupportDepartmentMasterDataTable) base.Tables["SupportDepartmentMaster"];
            if (initTable && (this.tableSupportDepartmentMaster != null))
            {
                this.tableSupportDepartmentMaster.InitVars();
            }
            this.tableDoyinGoSupportTicket = (DoyinGoSupportTicketDataTable) base.Tables["DoyinGoSupportTicket"];
            if (initTable && (this.tableDoyinGoSupportTicket != null))
            {
                this.tableDoyinGoSupportTicket.InitVars();
            }
            this.tableDoyinGoTicketAttachment = (DoyinGoTicketAttachmentDataTable) base.Tables["DoyinGoTicketAttachment"];
            if (initTable && (this.tableDoyinGoTicketAttachment != null))
            {
                this.tableDoyinGoTicketAttachment.InitVars();
            }
            this.tableDoyinGoSupportDiscussion = (DoyinGoSupportDiscussionDataTable) base.Tables["DoyinGoSupportDiscussion"];
            if (initTable && (this.tableDoyinGoSupportDiscussion != null))
            {
                this.tableDoyinGoSupportDiscussion.InitVars();
            }
            this.tableTermServiceContent = (TermServiceContentDataTable) base.Tables["TermServiceContent"];
            if (initTable && (this.tableTermServiceContent != null))
            {
                this.tableTermServiceContent.InitVars();
            }
            this.tablePrivacyPolicyContent = (PrivacyPolicyContentDataTable) base.Tables["PrivacyPolicyContent"];
            if (initTable && (this.tablePrivacyPolicyContent != null))
            {
                this.tablePrivacyPolicyContent.InitVars();
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected override void ReadXmlSerializable(XmlReader reader)
        {
            if (base.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)
            {
                this.Reset();
                DataSet dataSet = new DataSet();
                dataSet.ReadXml(reader);
                if (dataSet.Tables["AboutContentMaster"] != null)
                {
                    base.Tables.Add(new AboutContentMasterDataTable(dataSet.Tables["AboutContentMaster"]));
                }
                if (dataSet.Tables["AboutCategoryMaster"] != null)
                {
                    base.Tables.Add(new AboutCategoryMasterDataTable(dataSet.Tables["AboutCategoryMaster"]));
                }
                if (dataSet.Tables["FeatureCategoryMaster"] != null)
                {
                    base.Tables.Add(new FeatureCategoryMasterDataTable(dataSet.Tables["FeatureCategoryMaster"]));
                }
                if (dataSet.Tables["FeatureContentMaster"] != null)
                {
                    base.Tables.Add(new FeatureContentMasterDataTable(dataSet.Tables["FeatureContentMaster"]));
                }
                if (dataSet.Tables["HomeMaster"] != null)
                {
                    base.Tables.Add(new HomeMasterDataTable(dataSet.Tables["HomeMaster"]));
                }
                if (dataSet.Tables["FAQCategoryMaster"] != null)
                {
                    base.Tables.Add(new FAQCategoryMasterDataTable(dataSet.Tables["FAQCategoryMaster"]));
                }
                if (dataSet.Tables["FAQMaster"] != null)
                {
                    base.Tables.Add(new FAQMasterDataTable(dataSet.Tables["FAQMaster"]));
                }
                if (dataSet.Tables["HomePageSlider"] != null)
                {
                    base.Tables.Add(new HomePageSliderDataTable(dataSet.Tables["HomePageSlider"]));
                }
                if (dataSet.Tables["ContactMaster"] != null)
                {
                    base.Tables.Add(new ContactMasterDataTable(dataSet.Tables["ContactMaster"]));
                }
                if (dataSet.Tables["FeatureMaster"] != null)
                {
                    base.Tables.Add(new FeatureMasterDataTable(dataSet.Tables["FeatureMaster"]));
                }
                if (dataSet.Tables["CountryMaster"] != null)
                {
                    base.Tables.Add(new CountryMasterDataTable(dataSet.Tables["CountryMaster"]));
                }
                if (dataSet.Tables["StateMaster"] != null)
                {
                    base.Tables.Add(new StateMasterDataTable(dataSet.Tables["StateMaster"]));
                }
                if (dataSet.Tables["CityMaster"] != null)
                {
                    base.Tables.Add(new CityMasterDataTable(dataSet.Tables["CityMaster"]));
                }
                if (dataSet.Tables["CurrencyMaster"] != null)
                {
                    base.Tables.Add(new CurrencyMasterDataTable(dataSet.Tables["CurrencyMaster"]));
                }
                if (dataSet.Tables["ClientMaster"] != null)
                {
                    base.Tables.Add(new ClientMasterDataTable(dataSet.Tables["ClientMaster"]));
                }
                if (dataSet.Tables["TestimonialsMaster"] != null)
                {
                    base.Tables.Add(new TestimonialsMasterDataTable(dataSet.Tables["TestimonialsMaster"]));
                }
                if (dataSet.Tables["InquiryMaster"] != null)
                {
                    base.Tables.Add(new InquiryMasterDataTable(dataSet.Tables["InquiryMaster"]));
                }
                if (dataSet.Tables["FooterContent"] != null)
                {
                    base.Tables.Add(new FooterContentDataTable(dataSet.Tables["FooterContent"]));
                }
                if (dataSet.Tables["MasterAdminLoginMaster"] != null)
                {
                    base.Tables.Add(new MasterAdminLoginMasterDataTable(dataSet.Tables["MasterAdminLoginMaster"]));
                }
                if (dataSet.Tables["aspnet_Users"] != null)
                {
                    base.Tables.Add(new aspnet_UsersDataTable(dataSet.Tables["aspnet_Users"]));
                }
                if (dataSet.Tables["ModuleMaster"] != null)
                {
                    base.Tables.Add(new ModuleMasterDataTable(dataSet.Tables["ModuleMaster"]));
                }
                if (dataSet.Tables["PackageDetails"] != null)
                {
                    base.Tables.Add(new PackageDetailsDataTable(dataSet.Tables["PackageDetails"]));
                }
                if (dataSet.Tables["PackageMaster"] != null)
                {
                    base.Tables.Add(new PackageMasterDataTable(dataSet.Tables["PackageMaster"]));
                }
                if (dataSet.Tables["CompanyPackageDetails"] != null)
                {
                    base.Tables.Add(new CompanyPackageDetailsDataTable(dataSet.Tables["CompanyPackageDetails"]));
                }
                if (dataSet.Tables["FormMaster"] != null)
                {
                    base.Tables.Add(new FormMasterDataTable(dataSet.Tables["FormMaster"]));
                }
                if (dataSet.Tables["MasterAdminRightsMaster"] != null)
                {
                    base.Tables.Add(new MasterAdminRightsMasterDataTable(dataSet.Tables["MasterAdminRightsMaster"]));
                }
                if (dataSet.Tables["FormGridMasterAdminMaster"] != null)
                {
                    base.Tables.Add(new FormGridMasterAdminMasterDataTable(dataSet.Tables["FormGridMasterAdminMaster"]));
                }
                if (dataSet.Tables["ModuleFormMaster"] != null)
                {
                    base.Tables.Add(new ModuleFormMasterDataTable(dataSet.Tables["ModuleFormMaster"]));
                }
                if (dataSet.Tables["FormGridCompanyAdminMaster"] != null)
                {
                    base.Tables.Add(new FormGridCompanyAdminMasterDataTable(dataSet.Tables["FormGridCompanyAdminMaster"]));
                }
                if (dataSet.Tables["CompanyLoginMaster"] != null)
                {
                    base.Tables.Add(new CompanyLoginMasterDataTable(dataSet.Tables["CompanyLoginMaster"]));
                }
                if (dataSet.Tables["CompanyAdminRightsMaster"] != null)
                {
                    base.Tables.Add(new CompanyAdminRightsMasterDataTable(dataSet.Tables["CompanyAdminRightsMaster"]));
                }
                if (dataSet.Tables["PackageUpgradeRequestMaster"] != null)
                {
                    base.Tables.Add(new PackageUpgradeRequestMasterDataTable(dataSet.Tables["PackageUpgradeRequestMaster"]));
                }
                if (dataSet.Tables["BussinessMaster"] != null)
                {
                    base.Tables.Add(new BussinessMasterDataTable(dataSet.Tables["BussinessMaster"]));
                }
                if (dataSet.Tables["CurrentAccountMaster"] != null)
                {
                    base.Tables.Add(new CurrentAccountMasterDataTable(dataSet.Tables["CurrentAccountMaster"]));
                }
                if (dataSet.Tables["IndustryMaster"] != null)
                {
                    base.Tables.Add(new IndustryMasterDataTable(dataSet.Tables["IndustryMaster"]));
                }
                if (dataSet.Tables["RunningFromMaster"] != null)
                {
                    base.Tables.Add(new RunningFromMasterDataTable(dataSet.Tables["RunningFromMaster"]));
                }
                if (dataSet.Tables["PackageModuleMaster"] != null)
                {
                    base.Tables.Add(new PackageModuleMasterDataTable(dataSet.Tables["PackageModuleMaster"]));
                }
                if (dataSet.Tables["CloudPackageDetails"] != null)
                {
                    base.Tables.Add(new CloudPackageDetailsDataTable(dataSet.Tables["CloudPackageDetails"]));
                }
                if (dataSet.Tables["PackageFeatureMaster"] != null)
                {
                    base.Tables.Add(new PackageFeatureMasterDataTable(dataSet.Tables["PackageFeatureMaster"]));
                }
                if (dataSet.Tables["StaffMaster"] != null)
                {
                    base.Tables.Add(new StaffMasterDataTable(dataSet.Tables["StaffMaster"]));
                }
                if (dataSet.Tables["TaskMaster"] != null)
                {
                    base.Tables.Add(new TaskMasterDataTable(dataSet.Tables["TaskMaster"]));
                }
                if (dataSet.Tables["ContractorMaster"] != null)
                {
                    base.Tables.Add(new ContractorMasterDataTable(dataSet.Tables["ContractorMaster"]));
                }
                if (dataSet.Tables["ItemMaster"] != null)
                {
                    base.Tables.Add(new ItemMasterDataTable(dataSet.Tables["ItemMaster"]));
                }
                if (dataSet.Tables["TaxMaster"] != null)
                {
                    base.Tables.Add(new TaxMasterDataTable(dataSet.Tables["TaxMaster"]));
                }
                if (dataSet.Tables["ContractorProjectDetail"] != null)
                {
                    base.Tables.Add(new ContractorProjectDetailDataTable(dataSet.Tables["ContractorProjectDetail"]));
                }
                if (dataSet.Tables["StaffProjectDetail"] != null)
                {
                    base.Tables.Add(new StaffProjectDetailDataTable(dataSet.Tables["StaffProjectDetail"]));
                }
                if (dataSet.Tables["ProjectTaskDetail"] != null)
                {
                    base.Tables.Add(new ProjectTaskDetailDataTable(dataSet.Tables["ProjectTaskDetail"]));
                }
                if (dataSet.Tables["ProjectMaster"] != null)
                {
                    base.Tables.Add(new ProjectMasterDataTable(dataSet.Tables["ProjectMaster"]));
                }
                if (dataSet.Tables["StaffClientAssignDetail"] != null)
                {
                    base.Tables.Add(new StaffClientAssignDetailDataTable(dataSet.Tables["StaffClientAssignDetail"]));
                }
                if (dataSet.Tables["SecurityQuestionMaster"] != null)
                {
                    base.Tables.Add(new SecurityQuestionMasterDataTable(dataSet.Tables["SecurityQuestionMaster"]));
                }
                if (dataSet.Tables["aspnet_Membership"] != null)
                {
                    base.Tables.Add(new aspnet_MembershipDataTable(dataSet.Tables["aspnet_Membership"]));
                }
                if (dataSet.Tables["InvoiceItemDetail"] != null)
                {
                    base.Tables.Add(new InvoiceItemDetailDataTable(dataSet.Tables["InvoiceItemDetail"]));
                }
                if (dataSet.Tables["InvoiceTaskDetail"] != null)
                {
                    base.Tables.Add(new InvoiceTaskDetailDataTable(dataSet.Tables["InvoiceTaskDetail"]));
                }
                if (dataSet.Tables["CompanyMaster"] != null)
                {
                    base.Tables.Add(new CompanyMasterDataTable(dataSet.Tables["CompanyMaster"]));
                }
                if (dataSet.Tables["PaymentMaster"] != null)
                {
                    base.Tables.Add(new PaymentMasterDataTable(dataSet.Tables["PaymentMaster"]));
                }
                if (dataSet.Tables["EstimateTaskDetail"] != null)
                {
                    base.Tables.Add(new EstimateTaskDetailDataTable(dataSet.Tables["EstimateTaskDetail"]));
                }
                if (dataSet.Tables["EstimateItemDetail"] != null)
                {
                    base.Tables.Add(new EstimateItemDetailDataTable(dataSet.Tables["EstimateItemDetail"]));
                }
                if (dataSet.Tables["CreditTaskDetail"] != null)
                {
                    base.Tables.Add(new CreditTaskDetailDataTable(dataSet.Tables["CreditTaskDetail"]));
                }
                if (dataSet.Tables["CreditItemDetail"] != null)
                {
                    base.Tables.Add(new CreditItemDetailDataTable(dataSet.Tables["CreditItemDetail"]));
                }
                if (dataSet.Tables["CompanyClientContactDetail"] != null)
                {
                    base.Tables.Add(new CompanyClientContactDetailDataTable(dataSet.Tables["CompanyClientContactDetail"]));
                }
                if (dataSet.Tables["CompanyClientMaster"] != null)
                {
                    base.Tables.Add(new CompanyClientMasterDataTable(dataSet.Tables["CompanyClientMaster"]));
                }
                if (dataSet.Tables["CreditDefaultTermsMaster"] != null)
                {
                    base.Tables.Add(new CreditDefaultTermsMasterDataTable(dataSet.Tables["CreditDefaultTermsMaster"]));
                }
                if (dataSet.Tables["EstimateDefaultTermsMaster"] != null)
                {
                    base.Tables.Add(new EstimateDefaultTermsMasterDataTable(dataSet.Tables["EstimateDefaultTermsMaster"]));
                }
                if (dataSet.Tables["InvoiceDefaultTermsMaster"] != null)
                {
                    base.Tables.Add(new InvoiceDefaultTermsMasterDataTable(dataSet.Tables["InvoiceDefaultTermsMaster"]));
                }
                if (dataSet.Tables["RecurringTaskDetail"] != null)
                {
                    base.Tables.Add(new RecurringTaskDetailDataTable(dataSet.Tables["RecurringTaskDetail"]));
                }
                if (dataSet.Tables["RecurringItemDetail"] != null)
                {
                    base.Tables.Add(new RecurringItemDetailDataTable(dataSet.Tables["RecurringItemDetail"]));
                }
                if (dataSet.Tables["CategoryMaster"] != null)
                {
                    base.Tables.Add(new CategoryMasterDataTable(dataSet.Tables["CategoryMaster"]));
                }
                if (dataSet.Tables["SubCategoryMaster"] != null)
                {
                    base.Tables.Add(new SubCategoryMasterDataTable(dataSet.Tables["SubCategoryMaster"]));
                }
                if (dataSet.Tables["ExpenseMaster"] != null)
                {
                    base.Tables.Add(new ExpenseMasterDataTable(dataSet.Tables["ExpenseMaster"]));
                }
                if (dataSet.Tables["TimesheetMaster"] != null)
                {
                    base.Tables.Add(new TimesheetMasterDataTable(dataSet.Tables["TimesheetMaster"]));
                }
                if (dataSet.Tables["TimesheetGridMaster"] != null)
                {
                    base.Tables.Add(new TimesheetGridMasterDataTable(dataSet.Tables["TimesheetGridMaster"]));
                }
                if (dataSet.Tables["TeamSummary"] != null)
                {
                    base.Tables.Add(new TeamSummaryDataTable(dataSet.Tables["TeamSummary"]));
                }
                if (dataSet.Tables["CreditMaster"] != null)
                {
                    base.Tables.Add(new CreditMasterDataTable(dataSet.Tables["CreditMaster"]));
                }
                if (dataSet.Tables["CreditHistoryDetail"] != null)
                {
                    base.Tables.Add(new CreditHistoryDetailDataTable(dataSet.Tables["CreditHistoryDetail"]));
                }
                if (dataSet.Tables["ChangeUsername"] != null)
                {
                    base.Tables.Add(new ChangeUsernameDataTable(dataSet.Tables["ChangeUsername"]));
                }
                if (dataSet.Tables["AccountantMaster"] != null)
                {
                    base.Tables.Add(new AccountantMasterDataTable(dataSet.Tables["AccountantMaster"]));
                }
                if (dataSet.Tables["AccountantClientDetail"] != null)
                {
                    base.Tables.Add(new AccountantClientDetailDataTable(dataSet.Tables["AccountantClientDetail"]));
                }
                if (dataSet.Tables["FrequencyMaster"] != null)
                {
                    base.Tables.Add(new FrequencyMasterDataTable(dataSet.Tables["FrequencyMaster"]));
                }
                if (dataSet.Tables["RecurringMaster"] != null)
                {
                    base.Tables.Add(new RecurringMasterDataTable(dataSet.Tables["RecurringMaster"]));
                }
                if (dataSet.Tables["InvoiceMaster"] != null)
                {
                    base.Tables.Add(new InvoiceMasterDataTable(dataSet.Tables["InvoiceMaster"]));
                }
                if (dataSet.Tables["EstimateMaster"] != null)
                {
                    base.Tables.Add(new EstimateMasterDataTable(dataSet.Tables["EstimateMaster"]));
                }
                if (dataSet.Tables["AdminPermissionMaster"] != null)
                {
                    base.Tables.Add(new AdminPermissionMasterDataTable(dataSet.Tables["AdminPermissionMaster"]));
                }
                if (dataSet.Tables["StaffPermissionMaster"] != null)
                {
                    base.Tables.Add(new StaffPermissionMasterDataTable(dataSet.Tables["StaffPermissionMaster"]));
                }
                if (dataSet.Tables["ClientPermissionMaster"] != null)
                {
                    base.Tables.Add(new ClientPermissionMasterDataTable(dataSet.Tables["ClientPermissionMaster"]));
                }
                if (dataSet.Tables["TemplateMaster"] != null)
                {
                    base.Tables.Add(new TemplateMasterDataTable(dataSet.Tables["TemplateMaster"]));
                }
                if (dataSet.Tables["TemplateSettings"] != null)
                {
                    base.Tables.Add(new TemplateSettingsDataTable(dataSet.Tables["TemplateSettings"]));
                }
                if (dataSet.Tables["MiscellaneousMaster"] != null)
                {
                    base.Tables.Add(new MiscellaneousMasterDataTable(dataSet.Tables["MiscellaneousMaster"]));
                }
                if (dataSet.Tables["NewInvoiceEmailTemplate"] != null)
                {
                    base.Tables.Add(new NewInvoiceEmailTemplateDataTable(dataSet.Tables["NewInvoiceEmailTemplate"]));
                }
                if (dataSet.Tables["NewEstimateEmailTemplate"] != null)
                {
                    base.Tables.Add(new NewEstimateEmailTemplateDataTable(dataSet.Tables["NewEstimateEmailTemplate"]));
                }
                if (dataSet.Tables["NewCreditEmailTemplate"] != null)
                {
                    base.Tables.Add(new NewCreditEmailTemplateDataTable(dataSet.Tables["NewCreditEmailTemplate"]));
                }
                if (dataSet.Tables["NewStaffEmailTemplate"] != null)
                {
                    base.Tables.Add(new NewStaffEmailTemplateDataTable(dataSet.Tables["NewStaffEmailTemplate"]));
                }
                if (dataSet.Tables["NewClientEmailTemplate"] != null)
                {
                    base.Tables.Add(new NewClientEmailTemplateDataTable(dataSet.Tables["NewClientEmailTemplate"]));
                }
                if (dataSet.Tables["SMTPSettings"] != null)
                {
                    base.Tables.Add(new SMTPSettingsDataTable(dataSet.Tables["SMTPSettings"]));
                }
                if (dataSet.Tables["EmailNotifications"] != null)
                {
                    base.Tables.Add(new EmailNotificationsDataTable(dataSet.Tables["EmailNotifications"]));
                }
                if (dataSet.Tables["NewPaymentEmailTemplate"] != null)
                {
                    base.Tables.Add(new NewPaymentEmailTemplateDataTable(dataSet.Tables["NewPaymentEmailTemplate"]));
                }
                if (dataSet.Tables["LatePaymentReminderTemplate"] != null)
                {
                    base.Tables.Add(new LatePaymentReminderTemplateDataTable(dataSet.Tables["LatePaymentReminderTemplate"]));
                }
                if (dataSet.Tables["AutoBillEmailTemplate"] != null)
                {
                    base.Tables.Add(new AutoBillEmailTemplateDataTable(dataSet.Tables["AutoBillEmailTemplate"]));
                }
                if (dataSet.Tables["InvoiceDisputeHistory"] != null)
                {
                    base.Tables.Add(new InvoiceDisputeHistoryDataTable(dataSet.Tables["InvoiceDisputeHistory"]));
                }
                if (dataSet.Tables["EstimateDisputeHistory"] != null)
                {
                    base.Tables.Add(new EstimateDisputeHistoryDataTable(dataSet.Tables["EstimateDisputeHistory"]));
                }
                if (dataSet.Tables["CompanyUserMaster"] != null)
                {
                    base.Tables.Add(new CompanyUserMasterDataTable(dataSet.Tables["CompanyUserMaster"]));
                }
                if (dataSet.Tables["ReportRevenueByClient"] != null)
                {
                    base.Tables.Add(new ReportRevenueByClientDataTable(dataSet.Tables["ReportRevenueByClient"]));
                }
                if (dataSet.Tables["ReportPaymentsCollected"] != null)
                {
                    base.Tables.Add(new ReportPaymentsCollectedDataTable(dataSet.Tables["ReportPaymentsCollected"]));
                }
                if (dataSet.Tables["ReportTasksInvoiced"] != null)
                {
                    base.Tables.Add(new ReportTasksInvoicedDataTable(dataSet.Tables["ReportTasksInvoiced"]));
                }
                if (dataSet.Tables["ReportItemSales"] != null)
                {
                    base.Tables.Add(new ReportItemSalesDataTable(dataSet.Tables["ReportItemSales"]));
                }
                if (dataSet.Tables["ReportRecurringDetailed"] != null)
                {
                    base.Tables.Add(new ReportRecurringDetailedDataTable(dataSet.Tables["ReportRecurringDetailed"]));
                }
                if (dataSet.Tables["ReportRecurringAnnual"] != null)
                {
                    base.Tables.Add(new ReportRecurringAnnualDataTable(dataSet.Tables["ReportRecurringAnnual"]));
                }
                if (dataSet.Tables["ReportProjectTask"] != null)
                {
                    base.Tables.Add(new ReportProjectTaskDataTable(dataSet.Tables["ReportProjectTask"]));
                }
                if (dataSet.Tables["ReportProjectUser"] != null)
                {
                    base.Tables.Add(new ReportProjectUserDataTable(dataSet.Tables["ReportProjectUser"]));
                }
                if (dataSet.Tables["ReportTimesheetDetailsTeam"] != null)
                {
                    base.Tables.Add(new ReportTimesheetDetailsTeamDataTable(dataSet.Tables["ReportTimesheetDetailsTeam"]));
                }
                if (dataSet.Tables["ReportTimesheetDetailsTask"] != null)
                {
                    base.Tables.Add(new ReportTimesheetDetailsTaskDataTable(dataSet.Tables["ReportTimesheetDetailsTask"]));
                }
                if (dataSet.Tables["ReportTimesheetDetailsProject"] != null)
                {
                    base.Tables.Add(new ReportTimesheetDetailsProjectDataTable(dataSet.Tables["ReportTimesheetDetailsProject"]));
                }
                if (dataSet.Tables["ReportTimesheetDetailsClient"] != null)
                {
                    base.Tables.Add(new ReportTimesheetDetailsClientDataTable(dataSet.Tables["ReportTimesheetDetailsClient"]));
                }
                if (dataSet.Tables["ReportEstimatedBillingTeam"] != null)
                {
                    base.Tables.Add(new ReportEstimatedBillingTeamDataTable(dataSet.Tables["ReportEstimatedBillingTeam"]));
                }
                if (dataSet.Tables["ReportEstimatedBillingTask"] != null)
                {
                    base.Tables.Add(new ReportEstimatedBillingTaskDataTable(dataSet.Tables["ReportEstimatedBillingTask"]));
                }
                if (dataSet.Tables["ReportEstimatedBillingProject"] != null)
                {
                    base.Tables.Add(new ReportEstimatedBillingProjectDataTable(dataSet.Tables["ReportEstimatedBillingProject"]));
                }
                if (dataSet.Tables["ReportEstimatedBillingClient"] != null)
                {
                    base.Tables.Add(new ReportEstimatedBillingClientDataTable(dataSet.Tables["ReportEstimatedBillingClient"]));
                }
                if (dataSet.Tables["ReportTimesheet"] != null)
                {
                    base.Tables.Add(new ReportTimesheetDataTable(dataSet.Tables["ReportTimesheet"]));
                }
                if (dataSet.Tables["ReportInvoiceDetails"] != null)
                {
                    base.Tables.Add(new ReportInvoiceDetailsDataTable(dataSet.Tables["ReportInvoiceDetails"]));
                }
                if (dataSet.Tables["ReportExpenses"] != null)
                {
                    base.Tables.Add(new ReportExpensesDataTable(dataSet.Tables["ReportExpenses"]));
                }
                if (dataSet.Tables["ReportTaxSummary"] != null)
                {
                    base.Tables.Add(new ReportTaxSummaryDataTable(dataSet.Tables["ReportTaxSummary"]));
                }
                if (dataSet.Tables["PaymentGatewayMaster"] != null)
                {
                    base.Tables.Add(new PaymentGatewayMasterDataTable(dataSet.Tables["PaymentGatewayMaster"]));
                }
                if (dataSet.Tables["PaymentGatewayPaypalMaster"] != null)
                {
                    base.Tables.Add(new PaymentGatewayPaypalMasterDataTable(dataSet.Tables["PaymentGatewayPaypalMaster"]));
                }
                if (dataSet.Tables["CompanyPaypalMaster"] != null)
                {
                    base.Tables.Add(new CompanyPaypalMasterDataTable(dataSet.Tables["CompanyPaypalMaster"]));
                }
                if (dataSet.Tables["CompanyPaymentMaster"] != null)
                {
                    base.Tables.Add(new CompanyPaymentMasterDataTable(dataSet.Tables["CompanyPaymentMaster"]));
                }
                if (dataSet.Tables["CloudPackageMaster"] != null)
                {
                    base.Tables.Add(new CloudPackageMasterDataTable(dataSet.Tables["CloudPackageMaster"]));
                }
                if (dataSet.Tables["CompanyPackageMaster"] != null)
                {
                    base.Tables.Add(new CompanyPackageMasterDataTable(dataSet.Tables["CompanyPackageMaster"]));
                }
                if (dataSet.Tables["FreePackageSettings"] != null)
                {
                    base.Tables.Add(new FreePackageSettingsDataTable(dataSet.Tables["FreePackageSettings"]));
                }
                if (dataSet.Tables["SupportDepartmentMaster"] != null)
                {
                    base.Tables.Add(new SupportDepartmentMasterDataTable(dataSet.Tables["SupportDepartmentMaster"]));
                }
                if (dataSet.Tables["DoyinGoSupportTicket"] != null)
                {
                    base.Tables.Add(new DoyinGoSupportTicketDataTable(dataSet.Tables["DoyinGoSupportTicket"]));
                }
                if (dataSet.Tables["DoyinGoTicketAttachment"] != null)
                {
                    base.Tables.Add(new DoyinGoTicketAttachmentDataTable(dataSet.Tables["DoyinGoTicketAttachment"]));
                }
                if (dataSet.Tables["DoyinGoSupportDiscussion"] != null)
                {
                    base.Tables.Add(new DoyinGoSupportDiscussionDataTable(dataSet.Tables["DoyinGoSupportDiscussion"]));
                }
                if (dataSet.Tables["TermServiceContent"] != null)
                {
                    base.Tables.Add(new TermServiceContentDataTable(dataSet.Tables["TermServiceContent"]));
                }
                if (dataSet.Tables["PrivacyPolicyContent"] != null)
                {
                    base.Tables.Add(new PrivacyPolicyContentDataTable(dataSet.Tables["PrivacyPolicyContent"]));
                }
                base.DataSetName = dataSet.DataSetName;
                base.Prefix = dataSet.Prefix;
                base.Namespace = dataSet.Namespace;
                base.Locale = dataSet.Locale;
                base.CaseSensitive = dataSet.CaseSensitive;
                base.EnforceConstraints = dataSet.EnforceConstraints;
                base.Merge(dataSet, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                base.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e)
        {
            if (e.Action == CollectionChangeAction.Remove)
            {
                this.InitVars();
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeAboutCategoryMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeAboutContentMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeAccountantClientDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeAccountantMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeAdminPermissionMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeaspnet_Membership()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeaspnet_Users()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeAutoBillEmailTemplate()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeBussinessMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCategoryMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeChangeUsername()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCityMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeClientMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeClientPermissionMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCloudPackageDetails()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCloudPackageMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyAdminRightsMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyClientContactDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyClientMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyLoginMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCompanyMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyPackageDetails()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCompanyPackageMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyPaymentMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyPaypalMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCompanyUserMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeContactMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeContractorMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeContractorProjectDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCountryMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCreditDefaultTermsMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCreditHistoryDetail()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCreditItemDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCreditMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCreditTaskDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCurrencyMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeCurrentAccountMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDoyinGoSupportDiscussion()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeDoyinGoSupportTicket()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeDoyinGoTicketAttachment()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeEmailNotifications()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeEstimateDefaultTermsMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeEstimateDisputeHistory()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeEstimateItemDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeEstimateMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeEstimateTaskDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeExpenseMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeFAQCategoryMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFAQMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeFeatureCategoryMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFeatureContentMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeFeatureMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFooterContent()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeFormGridCompanyAdminMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeFormGridMasterAdminMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeFormMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFreePackageSettings()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeFrequencyMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeHomeMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeHomePageSlider()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeIndustryMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeInquiryMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeInvoiceDefaultTermsMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeInvoiceDisputeHistory()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeInvoiceItemDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeInvoiceMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeInvoiceTaskDetail()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeItemMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLatePaymentReminderTemplate()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeMasterAdminLoginMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeMasterAdminRightsMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeMiscellaneousMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeModuleFormMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeModuleMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeNewClientEmailTemplate()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeNewCreditEmailTemplate()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeNewEstimateEmailTemplate()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeNewInvoiceEmailTemplate()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeNewPaymentEmailTemplate()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeNewStaffEmailTemplate()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePackageDetails()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePackageFeatureMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePackageMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePackageModuleMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePackageUpgradeRequestMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePaymentGatewayMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePaymentGatewayPaypalMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePaymentMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializePrivacyPolicyContent()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeProjectMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeProjectTaskDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeRecurringItemDetail()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRecurringMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeRecurringTaskDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportEstimatedBillingClient()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportEstimatedBillingProject()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportEstimatedBillingTask()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportEstimatedBillingTeam()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportExpenses()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportInvoiceDetails()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportItemSales()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportPaymentsCollected()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportProjectTask()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportProjectUser()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportRecurringAnnual()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportRecurringDetailed()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportRevenueByClient()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportTasksInvoiced()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportTaxSummary()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportTimesheet()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportTimesheetDetailsClient()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeReportTimesheetDetailsProject()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportTimesheetDetailsTask()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeReportTimesheetDetailsTeam()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRunningFromMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSecurityQuestionMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSMTPSettings()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeStaffClientAssignDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeStaffMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeStaffPermissionMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeStaffProjectDetail()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeStateMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeSubCategoryMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeSupportDepartmentMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTaskMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeTaxMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeTeamSummary()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeTemplateMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeTemplateSettings()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeTermServiceContent()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeTestimonialsMaster()
        {
            return false;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTimesheetGridMaster()
        {
            return false;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private bool ShouldSerializeTimesheetMaster()
        {
            return false;
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode]
        public AboutCategoryMasterDataTable AboutCategoryMaster
        {
            get
            {
                return this.tableAboutCategoryMaster;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public AboutContentMasterDataTable AboutContentMaster
        {
            get
            {
                return this.tableAboutContentMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public AccountantClientDetailDataTable AccountantClientDetail
        {
            get
            {
                return this.tableAccountantClientDetail;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public AccountantMasterDataTable AccountantMaster
        {
            get
            {
                return this.tableAccountantMaster;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode]
        public AdminPermissionMasterDataTable AdminPermissionMaster
        {
            get
            {
                return this.tableAdminPermissionMaster;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false)]
        public aspnet_MembershipDataTable aspnet_Membership
        {
            get
            {
                return this.tableaspnet_Membership;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public aspnet_UsersDataTable aspnet_Users
        {
            get
            {
                return this.tableaspnet_Users;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public AutoBillEmailTemplateDataTable AutoBillEmailTemplate
        {
            get
            {
                return this.tableAutoBillEmailTemplate;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public BussinessMasterDataTable BussinessMaster
        {
            get
            {
                return this.tableBussinessMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public CategoryMasterDataTable CategoryMaster
        {
            get
            {
                return this.tableCategoryMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ChangeUsernameDataTable ChangeUsername
        {
            get
            {
                return this.tableChangeUsername;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public CityMasterDataTable CityMaster
        {
            get
            {
                return this.tableCityMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ClientMasterDataTable ClientMaster
        {
            get
            {
                return this.tableClientMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public ClientPermissionMasterDataTable ClientPermissionMaster
        {
            get
            {
                return this.tableClientPermissionMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CloudPackageDetailsDataTable CloudPackageDetails
        {
            get
            {
                return this.tableCloudPackageDetails;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CloudPackageMasterDataTable CloudPackageMaster
        {
            get
            {
                return this.tableCloudPackageMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
        public CompanyAdminRightsMasterDataTable CompanyAdminRightsMaster
        {
            get
            {
                return this.tableCompanyAdminRightsMaster;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public CompanyClientContactDetailDataTable CompanyClientContactDetail
        {
            get
            {
                return this.tableCompanyClientContactDetail;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public CompanyClientMasterDataTable CompanyClientMaster
        {
            get
            {
                return this.tableCompanyClientMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CompanyLoginMasterDataTable CompanyLoginMaster
        {
            get
            {
                return this.tableCompanyLoginMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public CompanyMasterDataTable CompanyMaster
        {
            get
            {
                return this.tableCompanyMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CompanyPackageDetailsDataTable CompanyPackageDetails
        {
            get
            {
                return this.tableCompanyPackageDetails;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CompanyPackageMasterDataTable CompanyPackageMaster
        {
            get
            {
                return this.tableCompanyPackageMaster;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CompanyPaymentMasterDataTable CompanyPaymentMaster
        {
            get
            {
                return this.tableCompanyPaymentMaster;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CompanyPaypalMasterDataTable CompanyPaypalMaster
        {
            get
            {
                return this.tableCompanyPaypalMaster;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public CompanyUserMasterDataTable CompanyUserMaster
        {
            get
            {
                return this.tableCompanyUserMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ContactMasterDataTable ContactMaster
        {
            get
            {
                return this.tableContactMaster;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ContractorMasterDataTable ContractorMaster
        {
            get
            {
                return this.tableContractorMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
        public ContractorProjectDetailDataTable ContractorProjectDetail
        {
            get
            {
                return this.tableContractorProjectDetail;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CountryMasterDataTable CountryMaster
        {
            get
            {
                return this.tableCountryMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CreditDefaultTermsMasterDataTable CreditDefaultTermsMaster
        {
            get
            {
                return this.tableCreditDefaultTermsMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CreditHistoryDetailDataTable CreditHistoryDetail
        {
            get
            {
                return this.tableCreditHistoryDetail;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public CreditItemDetailDataTable CreditItemDetail
        {
            get
            {
                return this.tableCreditItemDetail;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CreditMasterDataTable CreditMaster
        {
            get
            {
                return this.tableCreditMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public CreditTaskDetailDataTable CreditTaskDetail
        {
            get
            {
                return this.tableCreditTaskDetail;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public CurrencyMasterDataTable CurrencyMaster
        {
            get
            {
                return this.tableCurrencyMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public CurrentAccountMasterDataTable CurrentAccountMaster
        {
            get
            {
                return this.tableCurrentAccountMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public DoyinGoSupportDiscussionDataTable DoyinGoSupportDiscussion
        {
            get
            {
                return this.tableDoyinGoSupportDiscussion;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false)]
        public DoyinGoSupportTicketDataTable DoyinGoSupportTicket
        {
            get
            {
                return this.tableDoyinGoSupportTicket;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public DoyinGoTicketAttachmentDataTable DoyinGoTicketAttachment
        {
            get
            {
                return this.tableDoyinGoTicketAttachment;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public EmailNotificationsDataTable EmailNotifications
        {
            get
            {
                return this.tableEmailNotifications;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public EstimateDefaultTermsMasterDataTable EstimateDefaultTermsMaster
        {
            get
            {
                return this.tableEstimateDefaultTermsMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public EstimateDisputeHistoryDataTable EstimateDisputeHistory
        {
            get
            {
                return this.tableEstimateDisputeHistory;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public EstimateItemDetailDataTable EstimateItemDetail
        {
            get
            {
                return this.tableEstimateItemDetail;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public EstimateMasterDataTable EstimateMaster
        {
            get
            {
                return this.tableEstimateMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EstimateTaskDetailDataTable EstimateTaskDetail
        {
            get
            {
                return this.tableEstimateTaskDetail;
            }
        }
        
        [DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public ExpenseMasterDataTable ExpenseMaster
        {
            get
            {
                return this.tableExpenseMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public FAQCategoryMasterDataTable FAQCategoryMaster
        {
            get
            {
                return this.tableFAQCategoryMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public FAQMasterDataTable FAQMaster
        {
            get
            {
                return this.tableFAQMaster;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public FeatureCategoryMasterDataTable FeatureCategoryMaster
        {
            get
            {
                return this.tableFeatureCategoryMaster;
            }
        }
        
        [DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public FeatureContentMasterDataTable FeatureContentMaster
        {
            get
            {
                return this.tableFeatureContentMaster;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FeatureMasterDataTable FeatureMaster
        {
            get
            {
                return this.tableFeatureMaster;
            }
        }
        
        [DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public FooterContentDataTable FooterContent
        {
            get
            {
                return this.tableFooterContent;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public FormGridCompanyAdminMasterDataTable FormGridCompanyAdminMaster
        {
            get
            {
                return this.tableFormGridCompanyAdminMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FormGridMasterAdminMasterDataTable FormGridMasterAdminMaster
        {
            get
            {
                return this.tableFormGridMasterAdminMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FormMasterDataTable FormMaster
        {
            get
            {
                return this.tableFormMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public FreePackageSettingsDataTable FreePackageSettings
        {
            get
            {
                return this.tableFreePackageSettings;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FrequencyMasterDataTable FrequencyMaster
        {
            get
            {
                return this.tableFrequencyMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public HomeMasterDataTable HomeMaster
        {
            get
            {
                return this.tableHomeMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public HomePageSliderDataTable HomePageSlider
        {
            get
            {
                return this.tableHomePageSlider;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode]
        public IndustryMasterDataTable IndustryMaster
        {
            get
            {
                return this.tableIndustryMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public InquiryMasterDataTable InquiryMaster
        {
            get
            {
                return this.tableInquiryMaster;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false)]
        public InvoiceDefaultTermsMasterDataTable InvoiceDefaultTermsMaster
        {
            get
            {
                return this.tableInvoiceDefaultTermsMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public InvoiceDisputeHistoryDataTable InvoiceDisputeHistory
        {
            get
            {
                return this.tableInvoiceDisputeHistory;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public InvoiceItemDetailDataTable InvoiceItemDetail
        {
            get
            {
                return this.tableInvoiceItemDetail;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public InvoiceMasterDataTable InvoiceMaster
        {
            get
            {
                return this.tableInvoiceMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode]
        public InvoiceTaskDetailDataTable InvoiceTaskDetail
        {
            get
            {
                return this.tableInvoiceTaskDetail;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false)]
        public ItemMasterDataTable ItemMaster
        {
            get
            {
                return this.tableItemMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public LatePaymentReminderTemplateDataTable LatePaymentReminderTemplate
        {
            get
            {
                return this.tableLatePaymentReminderTemplate;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public MasterAdminLoginMasterDataTable MasterAdminLoginMaster
        {
            get
            {
                return this.tableMasterAdminLoginMaster;
            }
        }
        
        [DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MasterAdminRightsMasterDataTable MasterAdminRightsMaster
        {
            get
            {
                return this.tableMasterAdminRightsMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MiscellaneousMasterDataTable MiscellaneousMaster
        {
            get
            {
                return this.tableMiscellaneousMaster;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ModuleFormMasterDataTable ModuleFormMaster
        {
            get
            {
                return this.tableModuleFormMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
        public ModuleMasterDataTable ModuleMaster
        {
            get
            {
                return this.tableModuleMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode]
        public NewClientEmailTemplateDataTable NewClientEmailTemplate
        {
            get
            {
                return this.tableNewClientEmailTemplate;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public NewCreditEmailTemplateDataTable NewCreditEmailTemplate
        {
            get
            {
                return this.tableNewCreditEmailTemplate;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public NewEstimateEmailTemplateDataTable NewEstimateEmailTemplate
        {
            get
            {
                return this.tableNewEstimateEmailTemplate;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false)]
        public NewInvoiceEmailTemplateDataTable NewInvoiceEmailTemplate
        {
            get
            {
                return this.tableNewInvoiceEmailTemplate;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public NewPaymentEmailTemplateDataTable NewPaymentEmailTemplate
        {
            get
            {
                return this.tableNewPaymentEmailTemplate;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public NewStaffEmailTemplateDataTable NewStaffEmailTemplate
        {
            get
            {
                return this.tableNewStaffEmailTemplate;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
        public PackageDetailsDataTable PackageDetails
        {
            get
            {
                return this.tablePackageDetails;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public PackageFeatureMasterDataTable PackageFeatureMaster
        {
            get
            {
                return this.tablePackageFeatureMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PackageMasterDataTable PackageMaster
        {
            get
            {
                return this.tablePackageMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public PackageModuleMasterDataTable PackageModuleMaster
        {
            get
            {
                return this.tablePackageModuleMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PackageUpgradeRequestMasterDataTable PackageUpgradeRequestMaster
        {
            get
            {
                return this.tablePackageUpgradeRequestMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public PaymentGatewayMasterDataTable PaymentGatewayMaster
        {
            get
            {
                return this.tablePaymentGatewayMaster;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public PaymentGatewayPaypalMasterDataTable PaymentGatewayPaypalMaster
        {
            get
            {
                return this.tablePaymentGatewayPaypalMaster;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false)]
        public PaymentMasterDataTable PaymentMaster
        {
            get
            {
                return this.tablePaymentMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public PrivacyPolicyContentDataTable PrivacyPolicyContent
        {
            get
            {
                return this.tablePrivacyPolicyContent;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode]
        public ProjectMasterDataTable ProjectMaster
        {
            get
            {
                return this.tableProjectMaster;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ProjectTaskDetailDataTable ProjectTaskDetail
        {
            get
            {
                return this.tableProjectTaskDetail;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RecurringItemDetailDataTable RecurringItemDetail
        {
            get
            {
                return this.tableRecurringItemDetail;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RecurringMasterDataTable RecurringMaster
        {
            get
            {
                return this.tableRecurringMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RecurringTaskDetailDataTable RecurringTaskDetail
        {
            get
            {
                return this.tableRecurringTaskDetail;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ReportEstimatedBillingClientDataTable ReportEstimatedBillingClient
        {
            get
            {
                return this.tableReportEstimatedBillingClient;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ReportEstimatedBillingProjectDataTable ReportEstimatedBillingProject
        {
            get
            {
                return this.tableReportEstimatedBillingProject;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public ReportEstimatedBillingTaskDataTable ReportEstimatedBillingTask
        {
            get
            {
                return this.tableReportEstimatedBillingTask;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public ReportEstimatedBillingTeamDataTable ReportEstimatedBillingTeam
        {
            get
            {
                return this.tableReportEstimatedBillingTeam;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ReportExpensesDataTable ReportExpenses
        {
            get
            {
                return this.tableReportExpenses;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public ReportInvoiceDetailsDataTable ReportInvoiceDetails
        {
            get
            {
                return this.tableReportInvoiceDetails;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false)]
        public ReportItemSalesDataTable ReportItemSales
        {
            get
            {
                return this.tableReportItemSales;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode]
        public ReportPaymentsCollectedDataTable ReportPaymentsCollected
        {
            get
            {
                return this.tableReportPaymentsCollected;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ReportProjectTaskDataTable ReportProjectTask
        {
            get
            {
                return this.tableReportProjectTask;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ReportProjectUserDataTable ReportProjectUser
        {
            get
            {
                return this.tableReportProjectUser;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public ReportRecurringAnnualDataTable ReportRecurringAnnual
        {
            get
            {
                return this.tableReportRecurringAnnual;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ReportRecurringDetailedDataTable ReportRecurringDetailed
        {
            get
            {
                return this.tableReportRecurringDetailed;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public ReportRevenueByClientDataTable ReportRevenueByClient
        {
            get
            {
                return this.tableReportRevenueByClient;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ReportTasksInvoicedDataTable ReportTasksInvoiced
        {
            get
            {
                return this.tableReportTasksInvoiced;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ReportTaxSummaryDataTable ReportTaxSummary
        {
            get
            {
                return this.tableReportTaxSummary;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ReportTimesheetDataTable ReportTimesheet
        {
            get
            {
                return this.tableReportTimesheet;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ReportTimesheetDetailsClientDataTable ReportTimesheetDetailsClient
        {
            get
            {
                return this.tableReportTimesheetDetailsClient;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode]
        public ReportTimesheetDetailsProjectDataTable ReportTimesheetDetailsProject
        {
            get
            {
                return this.tableReportTimesheetDetailsProject;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public ReportTimesheetDetailsTaskDataTable ReportTimesheetDetailsTask
        {
            get
            {
                return this.tableReportTimesheetDetailsTask;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public ReportTimesheetDetailsTeamDataTable ReportTimesheetDetailsTeam
        {
            get
            {
                return this.tableReportTimesheetDetailsTeam;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public RunningFromMasterDataTable RunningFromMaster
        {
            get
            {
                return this.tableRunningFromMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(true), DesignerSerializationVisibility(DesignerSerializationVisibility.Visible), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }
        
        [DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SecurityQuestionMasterDataTable SecurityQuestionMaster
        {
            get
            {
                return this.tableSecurityQuestionMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public SMTPSettingsDataTable SMTPSettings
        {
            get
            {
                return this.tableSMTPSettings;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public StaffClientAssignDetailDataTable StaffClientAssignDetail
        {
            get
            {
                return this.tableStaffClientAssignDetail;
            }
        }
        
        [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public StaffMasterDataTable StaffMaster
        {
            get
            {
                return this.tableStaffMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public StaffPermissionMasterDataTable StaffPermissionMaster
        {
            get
            {
                return this.tableStaffPermissionMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), DebuggerNonUserCode]
        public StaffProjectDetailDataTable StaffProjectDetail
        {
            get
            {
                return this.tableStaffProjectDetail;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public StateMasterDataTable StateMaster
        {
            get
            {
                return this.tableStateMaster;
            }
        }
        
        [Browsable(false), DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SubCategoryMasterDataTable SubCategoryMaster
        {
            get
            {
                return this.tableSubCategoryMaster;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public SupportDepartmentMasterDataTable SupportDepartmentMaster
        {
            get
            {
                return this.tableSupportDepartmentMaster;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), DebuggerNonUserCode]
        public DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public TaskMasterDataTable TaskMaster
        {
            get
            {
                return this.tableTaskMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TaxMasterDataTable TaxMaster
        {
            get
            {
                return this.tableTaxMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
        public TeamSummaryDataTable TeamSummary
        {
            get
            {
                return this.tableTeamSummary;
            }
        }
        
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public TemplateMasterDataTable TemplateMaster
        {
            get
            {
                return this.tableTemplateMaster;
            }
        }
        
        [DebuggerNonUserCode, Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TemplateSettingsDataTable TemplateSettings
        {
            get
            {
                return this.tableTemplateSettings;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), DebuggerNonUserCode, Browsable(false)]
        public TermServiceContentDataTable TermServiceContent
        {
            get
            {
                return this.tableTermServiceContent;
            }
        }
        
        [DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TestimonialsMasterDataTable TestimonialsMaster
        {
            get
            {
                return this.tableTestimonialsMaster;
            }
        }
        
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public TimesheetGridMasterDataTable TimesheetGridMaster
        {
            get
            {
                return this.tableTimesheetGridMaster;
            }
        }
        
        [DebuggerNonUserCode, DesignerSerializationVisibility(DesignerSerializationVisibility.Content), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
        public TimesheetMasterDataTable TimesheetMaster
        {
            get
            {
                return this.tableTimesheetMaster;
            }
        }
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class AboutCategoryMasterDataTable : TypedTableBase<CloudAccountDA.AboutCategoryMasterRow>
        {
            private DataColumn columnAboutCategoryDesc;
            private DataColumn columnAboutCategoryID;
            private DataColumn columnAboutCategoryName;
            private DataColumn columnAboutCategoryStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutCategoryMasterRowChangeEventHandler AboutCategoryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutCategoryMasterRowChangeEventHandler AboutCategoryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutCategoryMasterRowChangeEventHandler AboutCategoryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutCategoryMasterRowChangeEventHandler AboutCategoryMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AboutCategoryMasterDataTable()
            {
                base.TableName = "AboutCategoryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AboutCategoryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected AboutCategoryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddAboutCategoryMasterRow(CloudAccountDA.AboutCategoryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutCategoryMasterRow AddAboutCategoryMasterRow(string AboutCategoryName, string AboutCategoryDesc, bool AboutCategoryStatus)
            {
                CloudAccountDA.AboutCategoryMasterRow row = (CloudAccountDA.AboutCategoryMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = AboutCategoryName;
                objArray2[2] = AboutCategoryDesc;
                objArray2[3] = AboutCategoryStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.AboutCategoryMasterDataTable table = (CloudAccountDA.AboutCategoryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.AboutCategoryMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutCategoryMasterRow FindByAboutCategoryID(int AboutCategoryID)
            {
                return (CloudAccountDA.AboutCategoryMasterRow) base.Rows.Find(new object[] { AboutCategoryID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.AboutCategoryMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "AboutCategoryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnAboutCategoryID = new DataColumn("AboutCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAboutCategoryID);
                this.columnAboutCategoryName = new DataColumn("AboutCategoryName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAboutCategoryName);
                this.columnAboutCategoryDesc = new DataColumn("AboutCategoryDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAboutCategoryDesc);
                this.columnAboutCategoryStatus = new DataColumn("AboutCategoryStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAboutCategoryStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnAboutCategoryID }, true));
                this.columnAboutCategoryID.AutoIncrement = true;
                this.columnAboutCategoryID.AutoIncrementSeed = -1L;
                this.columnAboutCategoryID.AutoIncrementStep = -1L;
                this.columnAboutCategoryID.AllowDBNull = false;
                this.columnAboutCategoryID.ReadOnly = true;
                this.columnAboutCategoryID.Unique = true;
                this.columnAboutCategoryName.MaxLength = 50;
                this.columnAboutCategoryDesc.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnAboutCategoryID = base.Columns["AboutCategoryID"];
                this.columnAboutCategoryName = base.Columns["AboutCategoryName"];
                this.columnAboutCategoryDesc = base.Columns["AboutCategoryDesc"];
                this.columnAboutCategoryStatus = base.Columns["AboutCategoryStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AboutCategoryMasterRow NewAboutCategoryMasterRow()
            {
                return (CloudAccountDA.AboutCategoryMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.AboutCategoryMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.AboutCategoryMasterRowChanged != null)
                {
                    this.AboutCategoryMasterRowChanged(this, new CloudAccountDA.AboutCategoryMasterRowChangeEvent((CloudAccountDA.AboutCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.AboutCategoryMasterRowChanging != null)
                {
                    this.AboutCategoryMasterRowChanging(this, new CloudAccountDA.AboutCategoryMasterRowChangeEvent((CloudAccountDA.AboutCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.AboutCategoryMasterRowDeleted != null)
                {
                    this.AboutCategoryMasterRowDeleted(this, new CloudAccountDA.AboutCategoryMasterRowChangeEvent((CloudAccountDA.AboutCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.AboutCategoryMasterRowDeleting != null)
                {
                    this.AboutCategoryMasterRowDeleting(this, new CloudAccountDA.AboutCategoryMasterRowChangeEvent((CloudAccountDA.AboutCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveAboutCategoryMasterRow(CloudAccountDA.AboutCategoryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AboutCategoryDescColumn
            {
                get
                {
                    return this.columnAboutCategoryDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutCategoryIDColumn
            {
                get
                {
                    return this.columnAboutCategoryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutCategoryNameColumn
            {
                get
                {
                    return this.columnAboutCategoryName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutCategoryStatusColumn
            {
                get
                {
                    return this.columnAboutCategoryStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AboutCategoryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.AboutCategoryMasterRow) base.Rows[index];
                }
            }
        }
        
        public class AboutCategoryMasterRow : DataRow
        {
            private CloudAccountDA.AboutCategoryMasterDataTable tableAboutCategoryMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AboutCategoryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableAboutCategoryMaster = (CloudAccountDA.AboutCategoryMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAboutCategoryDescNull()
            {
                return base.IsNull(this.tableAboutCategoryMaster.AboutCategoryDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAboutCategoryNameNull()
            {
                return base.IsNull(this.tableAboutCategoryMaster.AboutCategoryNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAboutCategoryStatusNull()
            {
                return base.IsNull(this.tableAboutCategoryMaster.AboutCategoryStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAboutCategoryDescNull()
            {
                base[this.tableAboutCategoryMaster.AboutCategoryDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAboutCategoryNameNull()
            {
                base[this.tableAboutCategoryMaster.AboutCategoryNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAboutCategoryStatusNull()
            {
                base[this.tableAboutCategoryMaster.AboutCategoryStatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AboutCategoryDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAboutCategoryMaster.AboutCategoryDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AboutCategoryDesc' in table 'AboutCategoryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAboutCategoryMaster.AboutCategoryDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int AboutCategoryID
            {
                get
                {
                    return (int) base[this.tableAboutCategoryMaster.AboutCategoryIDColumn];
                }
                set
                {
                    base[this.tableAboutCategoryMaster.AboutCategoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AboutCategoryName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAboutCategoryMaster.AboutCategoryNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AboutCategoryName' in table 'AboutCategoryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAboutCategoryMaster.AboutCategoryNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool AboutCategoryStatus
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableAboutCategoryMaster.AboutCategoryStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AboutCategoryStatus' in table 'AboutCategoryMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableAboutCategoryMaster.AboutCategoryStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class AboutCategoryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.AboutCategoryMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AboutCategoryMasterRowChangeEvent(CloudAccountDA.AboutCategoryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutCategoryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void AboutCategoryMasterRowChangeEventHandler(object sender, CloudAccountDA.AboutCategoryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class AboutContentMasterDataTable : TypedTableBase<CloudAccountDA.AboutContentMasterRow>
        {
            private DataColumn columnAboutCategoryID;
            private DataColumn columnAboutContent;
            private DataColumn columnAboutContentID;
            private DataColumn columnAboutContentImage;
            private DataColumn columnAboutContentStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutContentMasterRowChangeEventHandler AboutContentMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutContentMasterRowChangeEventHandler AboutContentMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutContentMasterRowChangeEventHandler AboutContentMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AboutContentMasterRowChangeEventHandler AboutContentMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AboutContentMasterDataTable()
            {
                base.TableName = "AboutContentMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal AboutContentMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected AboutContentMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddAboutContentMasterRow(CloudAccountDA.AboutContentMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutContentMasterRow AddAboutContentMasterRow(int AboutCategoryID, string AboutContent, byte[] AboutContentImage, bool AboutContentStatus)
            {
                CloudAccountDA.AboutContentMasterRow row = (CloudAccountDA.AboutContentMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = AboutCategoryID;
                objArray2[2] = AboutContent;
                objArray2[3] = AboutContentImage;
                objArray2[4] = AboutContentStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.AboutContentMasterDataTable table = (CloudAccountDA.AboutContentMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.AboutContentMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutContentMasterRow FindByAboutContentID(int AboutContentID)
            {
                return (CloudAccountDA.AboutContentMasterRow) base.Rows.Find(new object[] { AboutContentID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.AboutContentMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "AboutContentMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnAboutContentID = new DataColumn("AboutContentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAboutContentID);
                this.columnAboutCategoryID = new DataColumn("AboutCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAboutCategoryID);
                this.columnAboutContent = new DataColumn("AboutContent", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAboutContent);
                this.columnAboutContentImage = new DataColumn("AboutContentImage", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnAboutContentImage);
                this.columnAboutContentStatus = new DataColumn("AboutContentStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAboutContentStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnAboutContentID }, true));
                this.columnAboutContentID.AutoIncrement = true;
                this.columnAboutContentID.AutoIncrementSeed = -1L;
                this.columnAboutContentID.AutoIncrementStep = -1L;
                this.columnAboutContentID.AllowDBNull = false;
                this.columnAboutContentID.ReadOnly = true;
                this.columnAboutContentID.Unique = true;
                this.columnAboutCategoryID.AllowDBNull = false;
                this.columnAboutContent.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnAboutContentID = base.Columns["AboutContentID"];
                this.columnAboutCategoryID = base.Columns["AboutCategoryID"];
                this.columnAboutContent = base.Columns["AboutContent"];
                this.columnAboutContentImage = base.Columns["AboutContentImage"];
                this.columnAboutContentStatus = base.Columns["AboutContentStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutContentMasterRow NewAboutContentMasterRow()
            {
                return (CloudAccountDA.AboutContentMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.AboutContentMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.AboutContentMasterRowChanged != null)
                {
                    this.AboutContentMasterRowChanged(this, new CloudAccountDA.AboutContentMasterRowChangeEvent((CloudAccountDA.AboutContentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.AboutContentMasterRowChanging != null)
                {
                    this.AboutContentMasterRowChanging(this, new CloudAccountDA.AboutContentMasterRowChangeEvent((CloudAccountDA.AboutContentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.AboutContentMasterRowDeleted != null)
                {
                    this.AboutContentMasterRowDeleted(this, new CloudAccountDA.AboutContentMasterRowChangeEvent((CloudAccountDA.AboutContentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.AboutContentMasterRowDeleting != null)
                {
                    this.AboutContentMasterRowDeleting(this, new CloudAccountDA.AboutContentMasterRowChangeEvent((CloudAccountDA.AboutContentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveAboutContentMasterRow(CloudAccountDA.AboutContentMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutCategoryIDColumn
            {
                get
                {
                    return this.columnAboutCategoryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutContentColumn
            {
                get
                {
                    return this.columnAboutContent;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutContentIDColumn
            {
                get
                {
                    return this.columnAboutContentID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutContentImageColumn
            {
                get
                {
                    return this.columnAboutContentImage;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AboutContentStatusColumn
            {
                get
                {
                    return this.columnAboutContentStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutContentMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.AboutContentMasterRow) base.Rows[index];
                }
            }
        }
        
        public class AboutContentMasterRow : DataRow
        {
            private CloudAccountDA.AboutContentMasterDataTable tableAboutContentMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AboutContentMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableAboutContentMaster = (CloudAccountDA.AboutContentMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAboutContentImageNull()
            {
                return base.IsNull(this.tableAboutContentMaster.AboutContentImageColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAboutContentNull()
            {
                return base.IsNull(this.tableAboutContentMaster.AboutContentColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAboutContentStatusNull()
            {
                return base.IsNull(this.tableAboutContentMaster.AboutContentStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAboutContentImageNull()
            {
                base[this.tableAboutContentMaster.AboutContentImageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAboutContentNull()
            {
                base[this.tableAboutContentMaster.AboutContentColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAboutContentStatusNull()
            {
                base[this.tableAboutContentMaster.AboutContentStatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int AboutCategoryID
            {
                get
                {
                    return (int) base[this.tableAboutContentMaster.AboutCategoryIDColumn];
                }
                set
                {
                    base[this.tableAboutContentMaster.AboutCategoryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AboutContent
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAboutContentMaster.AboutContentColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AboutContent' in table 'AboutContentMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAboutContentMaster.AboutContentColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int AboutContentID
            {
                get
                {
                    return (int) base[this.tableAboutContentMaster.AboutContentIDColumn];
                }
                set
                {
                    base[this.tableAboutContentMaster.AboutContentIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public byte[] AboutContentImage
            {
                get
                {
                    byte[] buffer;
                    try
                    {
                        buffer = (byte[]) base[this.tableAboutContentMaster.AboutContentImageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AboutContentImage' in table 'AboutContentMaster' is DBNull.", exception);
                    }
                    return buffer;
                }
                set
                {
                    base[this.tableAboutContentMaster.AboutContentImageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool AboutContentStatus
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableAboutContentMaster.AboutContentStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AboutContentStatus' in table 'AboutContentMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableAboutContentMaster.AboutContentStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class AboutContentMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.AboutContentMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AboutContentMasterRowChangeEvent(CloudAccountDA.AboutContentMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AboutContentMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void AboutContentMasterRowChangeEventHandler(object sender, CloudAccountDA.AboutContentMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class AccountantClientDetailDataTable : TypedTableBase<CloudAccountDA.AccountantClientDetailRow>
        {
            private DataColumn columnAcceptedDate;
            private DataColumn columnAccountantClientDetailID;
            private DataColumn columnAccountantID;
            private DataColumn columnCompanyID;
            private DataColumn columnRequestedDate;
            private DataColumn columnRequestFromClient;
            private DataColumn columnRequestToClient;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantClientDetailRowChangeEventHandler AccountantClientDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantClientDetailRowChangeEventHandler AccountantClientDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantClientDetailRowChangeEventHandler AccountantClientDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantClientDetailRowChangeEventHandler AccountantClientDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AccountantClientDetailDataTable()
            {
                base.TableName = "AccountantClientDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AccountantClientDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected AccountantClientDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddAccountantClientDetailRow(CloudAccountDA.AccountantClientDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AccountantClientDetailRow AddAccountantClientDetailRow(int AccountantID, int CompanyID, bool RequestFromClient, bool RequestToClient, DateTime RequestedDate, DateTime AcceptedDate)
            {
                CloudAccountDA.AccountantClientDetailRow row = (CloudAccountDA.AccountantClientDetailRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = AccountantID;
                objArray2[2] = CompanyID;
                objArray2[3] = RequestFromClient;
                objArray2[4] = RequestToClient;
                objArray2[5] = RequestedDate;
                objArray2[6] = AcceptedDate;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.AccountantClientDetailDataTable table = (CloudAccountDA.AccountantClientDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.AccountantClientDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AccountantClientDetailRow FindByAccountantClientDetailID(int AccountantClientDetailID)
            {
                return (CloudAccountDA.AccountantClientDetailRow) base.Rows.Find(new object[] { AccountantClientDetailID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.AccountantClientDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "AccountantClientDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnAccountantClientDetailID = new DataColumn("AccountantClientDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantClientDetailID);
                this.columnAccountantID = new DataColumn("AccountantID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnRequestFromClient = new DataColumn("RequestFromClient", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnRequestFromClient);
                this.columnRequestToClient = new DataColumn("RequestToClient", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnRequestToClient);
                this.columnRequestedDate = new DataColumn("RequestedDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnRequestedDate);
                this.columnAcceptedDate = new DataColumn("AcceptedDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnAcceptedDate);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnAccountantClientDetailID }, true));
                this.columnAccountantClientDetailID.AutoIncrement = true;
                this.columnAccountantClientDetailID.AutoIncrementSeed = -1L;
                this.columnAccountantClientDetailID.AutoIncrementStep = -1L;
                this.columnAccountantClientDetailID.AllowDBNull = false;
                this.columnAccountantClientDetailID.ReadOnly = true;
                this.columnAccountantClientDetailID.Unique = true;
                this.columnAccountantID.AllowDBNull = false;
                this.columnCompanyID.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnAccountantClientDetailID = base.Columns["AccountantClientDetailID"];
                this.columnAccountantID = base.Columns["AccountantID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnRequestFromClient = base.Columns["RequestFromClient"];
                this.columnRequestToClient = base.Columns["RequestToClient"];
                this.columnRequestedDate = base.Columns["RequestedDate"];
                this.columnAcceptedDate = base.Columns["AcceptedDate"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AccountantClientDetailRow NewAccountantClientDetailRow()
            {
                return (CloudAccountDA.AccountantClientDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.AccountantClientDetailRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.AccountantClientDetailRowChanged != null)
                {
                    this.AccountantClientDetailRowChanged(this, new CloudAccountDA.AccountantClientDetailRowChangeEvent((CloudAccountDA.AccountantClientDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.AccountantClientDetailRowChanging != null)
                {
                    this.AccountantClientDetailRowChanging(this, new CloudAccountDA.AccountantClientDetailRowChangeEvent((CloudAccountDA.AccountantClientDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.AccountantClientDetailRowDeleted != null)
                {
                    this.AccountantClientDetailRowDeleted(this, new CloudAccountDA.AccountantClientDetailRowChangeEvent((CloudAccountDA.AccountantClientDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.AccountantClientDetailRowDeleting != null)
                {
                    this.AccountantClientDetailRowDeleting(this, new CloudAccountDA.AccountantClientDetailRowChangeEvent((CloudAccountDA.AccountantClientDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveAccountantClientDetailRow(CloudAccountDA.AccountantClientDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AcceptedDateColumn
            {
                get
                {
                    return this.columnAcceptedDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AccountantClientDetailIDColumn
            {
                get
                {
                    return this.columnAccountantClientDetailID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AccountantIDColumn
            {
                get
                {
                    return this.columnAccountantID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AccountantClientDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.AccountantClientDetailRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RequestedDateColumn
            {
                get
                {
                    return this.columnRequestedDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RequestFromClientColumn
            {
                get
                {
                    return this.columnRequestFromClient;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RequestToClientColumn
            {
                get
                {
                    return this.columnRequestToClient;
                }
            }
        }
        
        public class AccountantClientDetailRow : DataRow
        {
            private CloudAccountDA.AccountantClientDetailDataTable tableAccountantClientDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AccountantClientDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableAccountantClientDetail = (CloudAccountDA.AccountantClientDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAcceptedDateNull()
            {
                return base.IsNull(this.tableAccountantClientDetail.AcceptedDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequestedDateNull()
            {
                return base.IsNull(this.tableAccountantClientDetail.RequestedDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequestFromClientNull()
            {
                return base.IsNull(this.tableAccountantClientDetail.RequestFromClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequestToClientNull()
            {
                return base.IsNull(this.tableAccountantClientDetail.RequestToClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAcceptedDateNull()
            {
                base[this.tableAccountantClientDetail.AcceptedDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRequestedDateNull()
            {
                base[this.tableAccountantClientDetail.RequestedDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRequestFromClientNull()
            {
                base[this.tableAccountantClientDetail.RequestFromClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRequestToClientNull()
            {
                base[this.tableAccountantClientDetail.RequestToClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime AcceptedDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableAccountantClientDetail.AcceptedDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AcceptedDate' in table 'AccountantClientDetail' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableAccountantClientDetail.AcceptedDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int AccountantClientDetailID
            {
                get
                {
                    return (int) base[this.tableAccountantClientDetail.AccountantClientDetailIDColumn];
                }
                set
                {
                    base[this.tableAccountantClientDetail.AccountantClientDetailIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int AccountantID
            {
                get
                {
                    return (int) base[this.tableAccountantClientDetail.AccountantIDColumn];
                }
                set
                {
                    base[this.tableAccountantClientDetail.AccountantIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableAccountantClientDetail.CompanyIDColumn];
                }
                set
                {
                    base[this.tableAccountantClientDetail.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime RequestedDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableAccountantClientDetail.RequestedDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RequestedDate' in table 'AccountantClientDetail' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableAccountantClientDetail.RequestedDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool RequestFromClient
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableAccountantClientDetail.RequestFromClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RequestFromClient' in table 'AccountantClientDetail' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableAccountantClientDetail.RequestFromClientColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool RequestToClient
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableAccountantClientDetail.RequestToClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RequestToClient' in table 'AccountantClientDetail' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableAccountantClientDetail.RequestToClientColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class AccountantClientDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.AccountantClientDetailRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AccountantClientDetailRowChangeEvent(CloudAccountDA.AccountantClientDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AccountantClientDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void AccountantClientDetailRowChangeEventHandler(object sender, CloudAccountDA.AccountantClientDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class AccountantMasterDataTable : TypedTableBase<CloudAccountDA.AccountantMasterRow>
        {
            private DataColumn columnAccountantDesignation;
            private DataColumn columnAccountantEmail;
            private DataColumn columnAccountantFirstName;
            private DataColumn columnAccountantID;
            private DataColumn columnAccountantLastName;
            private DataColumn columnAccountantPhone;
            private DataColumn columnAccountantProfession;
            private DataColumn columnAddress1;
            private DataColumn columnAddress2;
            private DataColumn columnCityID;
            private DataColumn columnCompanyName;
            private DataColumn columnCountryID;
            private DataColumn columnStateID;
            private DataColumn columnZipCode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantMasterRowChangeEventHandler AccountantMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantMasterRowChangeEventHandler AccountantMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantMasterRowChangeEventHandler AccountantMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AccountantMasterRowChangeEventHandler AccountantMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AccountantMasterDataTable()
            {
                base.TableName = "AccountantMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AccountantMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected AccountantMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddAccountantMasterRow(CloudAccountDA.AccountantMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AccountantMasterRow AddAccountantMasterRow(string AccountantFirstName, string AccountantLastName, string AccountantEmail, string AccountantPhone, string CompanyName, string Address1, string Address2, int CountryID, int StateID, int CityID, string ZipCode, string AccountantProfession, string AccountantDesignation)
            {
                CloudAccountDA.AccountantMasterRow row = (CloudAccountDA.AccountantMasterRow) base.NewRow();
                object[] objArray2 = new object[14];
                objArray2[1] = AccountantFirstName;
                objArray2[2] = AccountantLastName;
                objArray2[3] = AccountantEmail;
                objArray2[4] = AccountantPhone;
                objArray2[5] = CompanyName;
                objArray2[6] = Address1;
                objArray2[7] = Address2;
                objArray2[8] = CountryID;
                objArray2[9] = StateID;
                objArray2[10] = CityID;
                objArray2[11] = ZipCode;
                objArray2[12] = AccountantProfession;
                objArray2[13] = AccountantDesignation;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.AccountantMasterDataTable table = (CloudAccountDA.AccountantMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.AccountantMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AccountantMasterRow FindByAccountantID(int AccountantID)
            {
                return (CloudAccountDA.AccountantMasterRow) base.Rows.Find(new object[] { AccountantID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.AccountantMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "AccountantMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnAccountantID = new DataColumn("AccountantID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantID);
                this.columnAccountantFirstName = new DataColumn("AccountantFirstName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantFirstName);
                this.columnAccountantLastName = new DataColumn("AccountantLastName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantLastName);
                this.columnAccountantEmail = new DataColumn("AccountantEmail", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantEmail);
                this.columnAccountantPhone = new DataColumn("AccountantPhone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantPhone);
                this.columnCompanyName = new DataColumn("CompanyName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnAddress1 = new DataColumn("Address1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new DataColumn("Address2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnStateID = new DataColumn("StateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStateID);
                this.columnCityID = new DataColumn("CityID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCityID);
                this.columnZipCode = new DataColumn("ZipCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnAccountantProfession = new DataColumn("AccountantProfession", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantProfession);
                this.columnAccountantDesignation = new DataColumn("AccountantDesignation", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAccountantDesignation);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnAccountantID }, true));
                this.columnAccountantID.AutoIncrement = true;
                this.columnAccountantID.AutoIncrementSeed = -1L;
                this.columnAccountantID.AutoIncrementStep = -1L;
                this.columnAccountantID.AllowDBNull = false;
                this.columnAccountantID.ReadOnly = true;
                this.columnAccountantID.Unique = true;
                this.columnAccountantFirstName.AllowDBNull = false;
                this.columnAccountantFirstName.MaxLength = 50;
                this.columnAccountantLastName.AllowDBNull = false;
                this.columnAccountantLastName.MaxLength = 50;
                this.columnAccountantEmail.AllowDBNull = false;
                this.columnAccountantEmail.MaxLength = 50;
                this.columnAccountantPhone.AllowDBNull = false;
                this.columnAccountantPhone.MaxLength = 20;
                this.columnCompanyName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnZipCode.MaxLength = 10;
                this.columnAccountantProfession.MaxLength = 50;
                this.columnAccountantDesignation.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnAccountantID = base.Columns["AccountantID"];
                this.columnAccountantFirstName = base.Columns["AccountantFirstName"];
                this.columnAccountantLastName = base.Columns["AccountantLastName"];
                this.columnAccountantEmail = base.Columns["AccountantEmail"];
                this.columnAccountantPhone = base.Columns["AccountantPhone"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnStateID = base.Columns["StateID"];
                this.columnCityID = base.Columns["CityID"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnAccountantProfession = base.Columns["AccountantProfession"];
                this.columnAccountantDesignation = base.Columns["AccountantDesignation"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AccountantMasterRow NewAccountantMasterRow()
            {
                return (CloudAccountDA.AccountantMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.AccountantMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.AccountantMasterRowChanged != null)
                {
                    this.AccountantMasterRowChanged(this, new CloudAccountDA.AccountantMasterRowChangeEvent((CloudAccountDA.AccountantMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.AccountantMasterRowChanging != null)
                {
                    this.AccountantMasterRowChanging(this, new CloudAccountDA.AccountantMasterRowChangeEvent((CloudAccountDA.AccountantMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.AccountantMasterRowDeleted != null)
                {
                    this.AccountantMasterRowDeleted(this, new CloudAccountDA.AccountantMasterRowChangeEvent((CloudAccountDA.AccountantMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.AccountantMasterRowDeleting != null)
                {
                    this.AccountantMasterRowDeleting(this, new CloudAccountDA.AccountantMasterRowChangeEvent((CloudAccountDA.AccountantMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveAccountantMasterRow(CloudAccountDA.AccountantMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AccountantDesignationColumn
            {
                get
                {
                    return this.columnAccountantDesignation;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AccountantEmailColumn
            {
                get
                {
                    return this.columnAccountantEmail;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AccountantFirstNameColumn
            {
                get
                {
                    return this.columnAccountantFirstName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AccountantIDColumn
            {
                get
                {
                    return this.columnAccountantID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AccountantLastNameColumn
            {
                get
                {
                    return this.columnAccountantLastName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AccountantPhoneColumn
            {
                get
                {
                    return this.columnAccountantPhone;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AccountantProfessionColumn
            {
                get
                {
                    return this.columnAccountantProfession;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CityIDColumn
            {
                get
                {
                    return this.columnCityID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyNameColumn
            {
                get
                {
                    return this.columnCompanyName;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CountryIDColumn
            {
                get
                {
                    return this.columnCountryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AccountantMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.AccountantMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StateIDColumn
            {
                get
                {
                    return this.columnStateID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ZipCodeColumn
            {
                get
                {
                    return this.columnZipCode;
                }
            }
        }
        
        public class AccountantMasterRow : DataRow
        {
            private CloudAccountDA.AccountantMasterDataTable tableAccountantMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal AccountantMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableAccountantMaster = (CloudAccountDA.AccountantMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAccountantDesignationNull()
            {
                return base.IsNull(this.tableAccountantMaster.AccountantDesignationColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAccountantProfessionNull()
            {
                return base.IsNull(this.tableAccountantMaster.AccountantProfessionColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddress1Null()
            {
                return base.IsNull(this.tableAccountantMaster.Address1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAddress2Null()
            {
                return base.IsNull(this.tableAccountantMaster.Address2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCityIDNull()
            {
                return base.IsNull(this.tableAccountantMaster.CityIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyNameNull()
            {
                return base.IsNull(this.tableAccountantMaster.CompanyNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCountryIDNull()
            {
                return base.IsNull(this.tableAccountantMaster.CountryIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStateIDNull()
            {
                return base.IsNull(this.tableAccountantMaster.StateIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsZipCodeNull()
            {
                return base.IsNull(this.tableAccountantMaster.ZipCodeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAccountantDesignationNull()
            {
                base[this.tableAccountantMaster.AccountantDesignationColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAccountantProfessionNull()
            {
                base[this.tableAccountantMaster.AccountantProfessionColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddress1Null()
            {
                base[this.tableAccountantMaster.Address1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddress2Null()
            {
                base[this.tableAccountantMaster.Address2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCityIDNull()
            {
                base[this.tableAccountantMaster.CityIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyNameNull()
            {
                base[this.tableAccountantMaster.CompanyNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCountryIDNull()
            {
                base[this.tableAccountantMaster.CountryIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStateIDNull()
            {
                base[this.tableAccountantMaster.StateIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetZipCodeNull()
            {
                base[this.tableAccountantMaster.ZipCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AccountantDesignation
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAccountantMaster.AccountantDesignationColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AccountantDesignation' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAccountantMaster.AccountantDesignationColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AccountantEmail
            {
                get
                {
                    return (string) base[this.tableAccountantMaster.AccountantEmailColumn];
                }
                set
                {
                    base[this.tableAccountantMaster.AccountantEmailColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AccountantFirstName
            {
                get
                {
                    return (string) base[this.tableAccountantMaster.AccountantFirstNameColumn];
                }
                set
                {
                    base[this.tableAccountantMaster.AccountantFirstNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int AccountantID
            {
                get
                {
                    return (int) base[this.tableAccountantMaster.AccountantIDColumn];
                }
                set
                {
                    base[this.tableAccountantMaster.AccountantIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AccountantLastName
            {
                get
                {
                    return (string) base[this.tableAccountantMaster.AccountantLastNameColumn];
                }
                set
                {
                    base[this.tableAccountantMaster.AccountantLastNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AccountantPhone
            {
                get
                {
                    return (string) base[this.tableAccountantMaster.AccountantPhoneColumn];
                }
                set
                {
                    base[this.tableAccountantMaster.AccountantPhoneColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AccountantProfession
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAccountantMaster.AccountantProfessionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AccountantProfession' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAccountantMaster.AccountantProfessionColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Address1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAccountantMaster.Address1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address1' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAccountantMaster.Address1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Address2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAccountantMaster.Address2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address2' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAccountantMaster.Address2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CityID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableAccountantMaster.CityIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CityID' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableAccountantMaster.CityIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAccountantMaster.CompanyNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyName' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAccountantMaster.CompanyNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CountryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableAccountantMaster.CountryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CountryID' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableAccountantMaster.CountryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int StateID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableAccountantMaster.StateIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'StateID' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableAccountantMaster.StateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ZipCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableAccountantMaster.ZipCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ZipCode' in table 'AccountantMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableAccountantMaster.ZipCodeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class AccountantMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.AccountantMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AccountantMasterRowChangeEvent(CloudAccountDA.AccountantMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AccountantMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void AccountantMasterRowChangeEventHandler(object sender, CloudAccountDA.AccountantMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class AdminPermissionMasterDataTable : TypedTableBase<CloudAccountDA.AdminPermissionMasterRow>
        {
            private DataColumn columnAdminPermissionID;
            private DataColumn columnCompanyID;
            private DataColumn columnDocuments;
            private DataColumn columnEstimate;
            private DataColumn columnExpenses;
            private DataColumn columnSupport;
            private DataColumn columnTimeTracking;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AdminPermissionMasterRowChangeEventHandler AdminPermissionMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AdminPermissionMasterRowChangeEventHandler AdminPermissionMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AdminPermissionMasterRowChangeEventHandler AdminPermissionMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AdminPermissionMasterRowChangeEventHandler AdminPermissionMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AdminPermissionMasterDataTable()
            {
                base.TableName = "AdminPermissionMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AdminPermissionMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected AdminPermissionMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddAdminPermissionMasterRow(CloudAccountDA.AdminPermissionMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AdminPermissionMasterRow AddAdminPermissionMasterRow(int CompanyID, bool Estimate, bool Expenses, bool TimeTracking, bool Support, bool Documents)
            {
                CloudAccountDA.AdminPermissionMasterRow row = (CloudAccountDA.AdminPermissionMasterRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CompanyID;
                objArray2[2] = Estimate;
                objArray2[3] = Expenses;
                objArray2[4] = TimeTracking;
                objArray2[5] = Support;
                objArray2[6] = Documents;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.AdminPermissionMasterDataTable table = (CloudAccountDA.AdminPermissionMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.AdminPermissionMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AdminPermissionMasterRow FindByAdminPermissionID(int AdminPermissionID)
            {
                return (CloudAccountDA.AdminPermissionMasterRow) base.Rows.Find(new object[] { AdminPermissionID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.AdminPermissionMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "AdminPermissionMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnAdminPermissionID = new DataColumn("AdminPermissionID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAdminPermissionID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnEstimate = new DataColumn("Estimate", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEstimate);
                this.columnExpenses = new DataColumn("Expenses", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnExpenses);
                this.columnTimeTracking = new DataColumn("TimeTracking", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnTimeTracking);
                this.columnSupport = new DataColumn("Support", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnSupport);
                this.columnDocuments = new DataColumn("Documents", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDocuments);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnAdminPermissionID }, true));
                this.columnAdminPermissionID.AutoIncrement = true;
                this.columnAdminPermissionID.AutoIncrementSeed = -1L;
                this.columnAdminPermissionID.AutoIncrementStep = -1L;
                this.columnAdminPermissionID.AllowDBNull = false;
                this.columnAdminPermissionID.ReadOnly = true;
                this.columnAdminPermissionID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnEstimate.AllowDBNull = false;
                this.columnExpenses.AllowDBNull = false;
                this.columnTimeTracking.AllowDBNull = false;
                this.columnSupport.AllowDBNull = false;
                this.columnDocuments.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnAdminPermissionID = base.Columns["AdminPermissionID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnEstimate = base.Columns["Estimate"];
                this.columnExpenses = base.Columns["Expenses"];
                this.columnTimeTracking = base.Columns["TimeTracking"];
                this.columnSupport = base.Columns["Support"];
                this.columnDocuments = base.Columns["Documents"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AdminPermissionMasterRow NewAdminPermissionMasterRow()
            {
                return (CloudAccountDA.AdminPermissionMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.AdminPermissionMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.AdminPermissionMasterRowChanged != null)
                {
                    this.AdminPermissionMasterRowChanged(this, new CloudAccountDA.AdminPermissionMasterRowChangeEvent((CloudAccountDA.AdminPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.AdminPermissionMasterRowChanging != null)
                {
                    this.AdminPermissionMasterRowChanging(this, new CloudAccountDA.AdminPermissionMasterRowChangeEvent((CloudAccountDA.AdminPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.AdminPermissionMasterRowDeleted != null)
                {
                    this.AdminPermissionMasterRowDeleted(this, new CloudAccountDA.AdminPermissionMasterRowChangeEvent((CloudAccountDA.AdminPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.AdminPermissionMasterRowDeleting != null)
                {
                    this.AdminPermissionMasterRowDeleting(this, new CloudAccountDA.AdminPermissionMasterRowChangeEvent((CloudAccountDA.AdminPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveAdminPermissionMasterRow(CloudAccountDA.AdminPermissionMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AdminPermissionIDColumn
            {
                get
                {
                    return this.columnAdminPermissionID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DocumentsColumn
            {
                get
                {
                    return this.columnDocuments;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateColumn
            {
                get
                {
                    return this.columnEstimate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ExpensesColumn
            {
                get
                {
                    return this.columnExpenses;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AdminPermissionMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.AdminPermissionMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportColumn
            {
                get
                {
                    return this.columnSupport;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TimeTrackingColumn
            {
                get
                {
                    return this.columnTimeTracking;
                }
            }
        }
        
        public class AdminPermissionMasterRow : DataRow
        {
            private CloudAccountDA.AdminPermissionMasterDataTable tableAdminPermissionMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal AdminPermissionMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableAdminPermissionMaster = (CloudAccountDA.AdminPermissionMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int AdminPermissionID
            {
                get
                {
                    return (int) base[this.tableAdminPermissionMaster.AdminPermissionIDColumn];
                }
                set
                {
                    base[this.tableAdminPermissionMaster.AdminPermissionIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableAdminPermissionMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableAdminPermissionMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Documents
            {
                get
                {
                    return (bool) base[this.tableAdminPermissionMaster.DocumentsColumn];
                }
                set
                {
                    base[this.tableAdminPermissionMaster.DocumentsColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Estimate
            {
                get
                {
                    return (bool) base[this.tableAdminPermissionMaster.EstimateColumn];
                }
                set
                {
                    base[this.tableAdminPermissionMaster.EstimateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Expenses
            {
                get
                {
                    return (bool) base[this.tableAdminPermissionMaster.ExpensesColumn];
                }
                set
                {
                    base[this.tableAdminPermissionMaster.ExpensesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Support
            {
                get
                {
                    return (bool) base[this.tableAdminPermissionMaster.SupportColumn];
                }
                set
                {
                    base[this.tableAdminPermissionMaster.SupportColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool TimeTracking
            {
                get
                {
                    return (bool) base[this.tableAdminPermissionMaster.TimeTrackingColumn];
                }
                set
                {
                    base[this.tableAdminPermissionMaster.TimeTrackingColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class AdminPermissionMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.AdminPermissionMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AdminPermissionMasterRowChangeEvent(CloudAccountDA.AdminPermissionMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AdminPermissionMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void AdminPermissionMasterRowChangeEventHandler(object sender, CloudAccountDA.AdminPermissionMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class aspnet_MembershipDataTable : TypedTableBase<CloudAccountDA.aspnet_MembershipRow>
        {
            private DataColumn columnPasswordQuestion;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public aspnet_MembershipDataTable()
            {
                base.TableName = "aspnet_Membership";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal aspnet_MembershipDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected aspnet_MembershipDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Addaspnet_MembershipRow(CloudAccountDA.aspnet_MembershipRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.aspnet_MembershipRow Addaspnet_MembershipRow(string PasswordQuestion)
            {
                CloudAccountDA.aspnet_MembershipRow row = (CloudAccountDA.aspnet_MembershipRow) base.NewRow();
                row.ItemArray = new object[] { PasswordQuestion };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.aspnet_MembershipDataTable table = (CloudAccountDA.aspnet_MembershipDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.aspnet_MembershipDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.aspnet_MembershipRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "aspnet_MembershipDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPasswordQuestion = new DataColumn("PasswordQuestion", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPasswordQuestion);
                this.columnPasswordQuestion.MaxLength = 0x100;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPasswordQuestion = base.Columns["PasswordQuestion"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.aspnet_MembershipRow Newaspnet_MembershipRow()
            {
                return (CloudAccountDA.aspnet_MembershipRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.aspnet_MembershipRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.aspnet_MembershipRowChanged != null)
                {
                    this.aspnet_MembershipRowChanged(this, new CloudAccountDA.aspnet_MembershipRowChangeEvent((CloudAccountDA.aspnet_MembershipRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.aspnet_MembershipRowChanging != null)
                {
                    this.aspnet_MembershipRowChanging(this, new CloudAccountDA.aspnet_MembershipRowChangeEvent((CloudAccountDA.aspnet_MembershipRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.aspnet_MembershipRowDeleted != null)
                {
                    this.aspnet_MembershipRowDeleted(this, new CloudAccountDA.aspnet_MembershipRowChangeEvent((CloudAccountDA.aspnet_MembershipRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.aspnet_MembershipRowDeleting != null)
                {
                    this.aspnet_MembershipRowDeleting(this, new CloudAccountDA.aspnet_MembershipRowChangeEvent((CloudAccountDA.aspnet_MembershipRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Removeaspnet_MembershipRow(CloudAccountDA.aspnet_MembershipRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.aspnet_MembershipRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.aspnet_MembershipRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PasswordQuestionColumn
            {
                get
                {
                    return this.columnPasswordQuestion;
                }
            }
        }
        
        public class aspnet_MembershipRow : DataRow
        {
            private CloudAccountDA.aspnet_MembershipDataTable tableaspnet_Membership;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal aspnet_MembershipRow(DataRowBuilder rb) : base(rb)
            {
                this.tableaspnet_Membership = (CloudAccountDA.aspnet_MembershipDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPasswordQuestionNull()
            {
                return base.IsNull(this.tableaspnet_Membership.PasswordQuestionColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPasswordQuestionNull()
            {
                base[this.tableaspnet_Membership.PasswordQuestionColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PasswordQuestion
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableaspnet_Membership.PasswordQuestionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PasswordQuestion' in table 'aspnet_Membership' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableaspnet_Membership.PasswordQuestionColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class aspnet_MembershipRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.aspnet_MembershipRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public aspnet_MembershipRowChangeEvent(CloudAccountDA.aspnet_MembershipRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.aspnet_MembershipRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void aspnet_MembershipRowChangeEventHandler(object sender, CloudAccountDA.aspnet_MembershipRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class aspnet_UsersDataTable : TypedTableBase<CloudAccountDA.aspnet_UsersRow>
        {
            private DataColumn columnUserName;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_UsersRowChangeEventHandler aspnet_UsersRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_UsersRowChangeEventHandler aspnet_UsersRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_UsersRowChangeEventHandler aspnet_UsersRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.aspnet_UsersRowChangeEventHandler aspnet_UsersRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public aspnet_UsersDataTable()
            {
                base.TableName = "aspnet_Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal aspnet_UsersDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected aspnet_UsersDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void Addaspnet_UsersRow(CloudAccountDA.aspnet_UsersRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.aspnet_UsersRow Addaspnet_UsersRow(string UserName)
            {
                CloudAccountDA.aspnet_UsersRow row = (CloudAccountDA.aspnet_UsersRow) base.NewRow();
                row.ItemArray = new object[] { UserName };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.aspnet_UsersDataTable table = (CloudAccountDA.aspnet_UsersDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.aspnet_UsersDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.aspnet_UsersRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "aspnet_UsersDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnUserName = new DataColumn("UserName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 0x100;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnUserName = base.Columns["UserName"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.aspnet_UsersRow Newaspnet_UsersRow()
            {
                return (CloudAccountDA.aspnet_UsersRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.aspnet_UsersRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.aspnet_UsersRowChanged != null)
                {
                    this.aspnet_UsersRowChanged(this, new CloudAccountDA.aspnet_UsersRowChangeEvent((CloudAccountDA.aspnet_UsersRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.aspnet_UsersRowChanging != null)
                {
                    this.aspnet_UsersRowChanging(this, new CloudAccountDA.aspnet_UsersRowChangeEvent((CloudAccountDA.aspnet_UsersRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.aspnet_UsersRowDeleted != null)
                {
                    this.aspnet_UsersRowDeleted(this, new CloudAccountDA.aspnet_UsersRowChangeEvent((CloudAccountDA.aspnet_UsersRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.aspnet_UsersRowDeleting != null)
                {
                    this.aspnet_UsersRowDeleting(this, new CloudAccountDA.aspnet_UsersRowChangeEvent((CloudAccountDA.aspnet_UsersRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void Removeaspnet_UsersRow(CloudAccountDA.aspnet_UsersRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.aspnet_UsersRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.aspnet_UsersRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UserNameColumn
            {
                get
                {
                    return this.columnUserName;
                }
            }
        }
        
        public class aspnet_UsersRow : DataRow
        {
            private CloudAccountDA.aspnet_UsersDataTable tableaspnet_Users;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal aspnet_UsersRow(DataRowBuilder rb) : base(rb)
            {
                this.tableaspnet_Users = (CloudAccountDA.aspnet_UsersDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string UserName
            {
                get
                {
                    return (string) base[this.tableaspnet_Users.UserNameColumn];
                }
                set
                {
                    base[this.tableaspnet_Users.UserNameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class aspnet_UsersRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.aspnet_UsersRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public aspnet_UsersRowChangeEvent(CloudAccountDA.aspnet_UsersRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.aspnet_UsersRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void aspnet_UsersRowChangeEventHandler(object sender, CloudAccountDA.aspnet_UsersRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class AutoBillEmailTemplateDataTable : TypedTableBase<CloudAccountDA.AutoBillEmailTemplateRow>
        {
            private DataColumn columnAutoBillEmailTemplateID;
            private DataColumn columnCompanyID;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnEnable;
            private DataColumn columnTemplateFor;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AutoBillEmailTemplateRowChangeEventHandler AutoBillEmailTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AutoBillEmailTemplateRowChangeEventHandler AutoBillEmailTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AutoBillEmailTemplateRowChangeEventHandler AutoBillEmailTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.AutoBillEmailTemplateRowChangeEventHandler AutoBillEmailTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AutoBillEmailTemplateDataTable()
            {
                base.TableName = "AutoBillEmailTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AutoBillEmailTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected AutoBillEmailTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddAutoBillEmailTemplateRow(CloudAccountDA.AutoBillEmailTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AutoBillEmailTemplateRow AddAutoBillEmailTemplateRow(int CompanyID, string TemplateFor, bool Enable, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.AutoBillEmailTemplateRow row = (CloudAccountDA.AutoBillEmailTemplateRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = CompanyID;
                objArray2[2] = TemplateFor;
                objArray2[3] = Enable;
                objArray2[4] = EmailSubject;
                objArray2[5] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.AutoBillEmailTemplateDataTable table = (CloudAccountDA.AutoBillEmailTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.AutoBillEmailTemplateDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AutoBillEmailTemplateRow FindByAutoBillEmailTemplateID(int AutoBillEmailTemplateID)
            {
                return (CloudAccountDA.AutoBillEmailTemplateRow) base.Rows.Find(new object[] { AutoBillEmailTemplateID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.AutoBillEmailTemplateRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "AutoBillEmailTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnAutoBillEmailTemplateID = new DataColumn("AutoBillEmailTemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAutoBillEmailTemplateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnTemplateFor = new DataColumn("TemplateFor", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateFor);
                this.columnEnable = new DataColumn("Enable", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEnable);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnAutoBillEmailTemplateID }, true));
                this.columnAutoBillEmailTemplateID.AutoIncrement = true;
                this.columnAutoBillEmailTemplateID.AutoIncrementSeed = -1L;
                this.columnAutoBillEmailTemplateID.AutoIncrementStep = -1L;
                this.columnAutoBillEmailTemplateID.AllowDBNull = false;
                this.columnAutoBillEmailTemplateID.ReadOnly = true;
                this.columnAutoBillEmailTemplateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnTemplateFor.AllowDBNull = false;
                this.columnTemplateFor.MaxLength = 50;
                this.columnEnable.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnAutoBillEmailTemplateID = base.Columns["AutoBillEmailTemplateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnTemplateFor = base.Columns["TemplateFor"];
                this.columnEnable = base.Columns["Enable"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AutoBillEmailTemplateRow NewAutoBillEmailTemplateRow()
            {
                return (CloudAccountDA.AutoBillEmailTemplateRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.AutoBillEmailTemplateRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.AutoBillEmailTemplateRowChanged != null)
                {
                    this.AutoBillEmailTemplateRowChanged(this, new CloudAccountDA.AutoBillEmailTemplateRowChangeEvent((CloudAccountDA.AutoBillEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.AutoBillEmailTemplateRowChanging != null)
                {
                    this.AutoBillEmailTemplateRowChanging(this, new CloudAccountDA.AutoBillEmailTemplateRowChangeEvent((CloudAccountDA.AutoBillEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.AutoBillEmailTemplateRowDeleted != null)
                {
                    this.AutoBillEmailTemplateRowDeleted(this, new CloudAccountDA.AutoBillEmailTemplateRowChangeEvent((CloudAccountDA.AutoBillEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.AutoBillEmailTemplateRowDeleting != null)
                {
                    this.AutoBillEmailTemplateRowDeleting(this, new CloudAccountDA.AutoBillEmailTemplateRowChangeEvent((CloudAccountDA.AutoBillEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveAutoBillEmailTemplateRow(CloudAccountDA.AutoBillEmailTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AutoBillEmailTemplateIDColumn
            {
                get
                {
                    return this.columnAutoBillEmailTemplateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EnableColumn
            {
                get
                {
                    return this.columnEnable;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.AutoBillEmailTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.AutoBillEmailTemplateRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TemplateForColumn
            {
                get
                {
                    return this.columnTemplateFor;
                }
            }
        }
        
        public class AutoBillEmailTemplateRow : DataRow
        {
            private CloudAccountDA.AutoBillEmailTemplateDataTable tableAutoBillEmailTemplate;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AutoBillEmailTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableAutoBillEmailTemplate = (CloudAccountDA.AutoBillEmailTemplateDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int AutoBillEmailTemplateID
            {
                get
                {
                    return (int) base[this.tableAutoBillEmailTemplate.AutoBillEmailTemplateIDColumn];
                }
                set
                {
                    base[this.tableAutoBillEmailTemplate.AutoBillEmailTemplateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableAutoBillEmailTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableAutoBillEmailTemplate.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableAutoBillEmailTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableAutoBillEmailTemplate.EmailBodyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableAutoBillEmailTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableAutoBillEmailTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Enable
            {
                get
                {
                    return (bool) base[this.tableAutoBillEmailTemplate.EnableColumn];
                }
                set
                {
                    base[this.tableAutoBillEmailTemplate.EnableColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TemplateFor
            {
                get
                {
                    return (string) base[this.tableAutoBillEmailTemplate.TemplateForColumn];
                }
                set
                {
                    base[this.tableAutoBillEmailTemplate.TemplateForColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class AutoBillEmailTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.AutoBillEmailTemplateRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public AutoBillEmailTemplateRowChangeEvent(CloudAccountDA.AutoBillEmailTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.AutoBillEmailTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void AutoBillEmailTemplateRowChangeEventHandler(object sender, CloudAccountDA.AutoBillEmailTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class BussinessMasterDataTable : TypedTableBase<CloudAccountDA.BussinessMasterRow>
        {
            private DataColumn columnBussinessDesc;
            private DataColumn columnBussinessID;
            private DataColumn columnBussinessName;
            private DataColumn columnBussinessStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.BussinessMasterRowChangeEventHandler BussinessMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.BussinessMasterRowChangeEventHandler BussinessMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.BussinessMasterRowChangeEventHandler BussinessMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.BussinessMasterRowChangeEventHandler BussinessMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public BussinessMasterDataTable()
            {
                base.TableName = "BussinessMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal BussinessMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected BussinessMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddBussinessMasterRow(CloudAccountDA.BussinessMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.BussinessMasterRow AddBussinessMasterRow(string BussinessName, string BussinessDesc, bool BussinessStatus)
            {
                CloudAccountDA.BussinessMasterRow row = (CloudAccountDA.BussinessMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = BussinessName;
                objArray2[2] = BussinessDesc;
                objArray2[3] = BussinessStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.BussinessMasterDataTable table = (CloudAccountDA.BussinessMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.BussinessMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.BussinessMasterRow FindByBussinessID(int BussinessID)
            {
                return (CloudAccountDA.BussinessMasterRow) base.Rows.Find(new object[] { BussinessID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.BussinessMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "BussinessMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnBussinessID = new DataColumn("BussinessID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnBussinessID);
                this.columnBussinessName = new DataColumn("BussinessName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBussinessName);
                this.columnBussinessDesc = new DataColumn("BussinessDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBussinessDesc);
                this.columnBussinessStatus = new DataColumn("BussinessStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnBussinessStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnBussinessID }, true));
                this.columnBussinessID.AutoIncrement = true;
                this.columnBussinessID.AutoIncrementSeed = -1L;
                this.columnBussinessID.AutoIncrementStep = -1L;
                this.columnBussinessID.AllowDBNull = false;
                this.columnBussinessID.ReadOnly = true;
                this.columnBussinessID.Unique = true;
                this.columnBussinessName.AllowDBNull = false;
                this.columnBussinessName.MaxLength = 100;
                this.columnBussinessDesc.MaxLength = 500;
                this.columnBussinessStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnBussinessID = base.Columns["BussinessID"];
                this.columnBussinessName = base.Columns["BussinessName"];
                this.columnBussinessDesc = base.Columns["BussinessDesc"];
                this.columnBussinessStatus = base.Columns["BussinessStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.BussinessMasterRow NewBussinessMasterRow()
            {
                return (CloudAccountDA.BussinessMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.BussinessMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.BussinessMasterRowChanged != null)
                {
                    this.BussinessMasterRowChanged(this, new CloudAccountDA.BussinessMasterRowChangeEvent((CloudAccountDA.BussinessMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.BussinessMasterRowChanging != null)
                {
                    this.BussinessMasterRowChanging(this, new CloudAccountDA.BussinessMasterRowChangeEvent((CloudAccountDA.BussinessMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.BussinessMasterRowDeleted != null)
                {
                    this.BussinessMasterRowDeleted(this, new CloudAccountDA.BussinessMasterRowChangeEvent((CloudAccountDA.BussinessMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.BussinessMasterRowDeleting != null)
                {
                    this.BussinessMasterRowDeleting(this, new CloudAccountDA.BussinessMasterRowChangeEvent((CloudAccountDA.BussinessMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveBussinessMasterRow(CloudAccountDA.BussinessMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BussinessDescColumn
            {
                get
                {
                    return this.columnBussinessDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BussinessIDColumn
            {
                get
                {
                    return this.columnBussinessID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BussinessNameColumn
            {
                get
                {
                    return this.columnBussinessName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BussinessStatusColumn
            {
                get
                {
                    return this.columnBussinessStatus;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.BussinessMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.BussinessMasterRow) base.Rows[index];
                }
            }
        }
        
        public class BussinessMasterRow : DataRow
        {
            private CloudAccountDA.BussinessMasterDataTable tableBussinessMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal BussinessMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableBussinessMaster = (CloudAccountDA.BussinessMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBussinessDescNull()
            {
                return base.IsNull(this.tableBussinessMaster.BussinessDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBussinessDescNull()
            {
                base[this.tableBussinessMaster.BussinessDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string BussinessDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableBussinessMaster.BussinessDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BussinessDesc' in table 'BussinessMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableBussinessMaster.BussinessDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int BussinessID
            {
                get
                {
                    return (int) base[this.tableBussinessMaster.BussinessIDColumn];
                }
                set
                {
                    base[this.tableBussinessMaster.BussinessIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BussinessName
            {
                get
                {
                    return (string) base[this.tableBussinessMaster.BussinessNameColumn];
                }
                set
                {
                    base[this.tableBussinessMaster.BussinessNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool BussinessStatus
            {
                get
                {
                    return (bool) base[this.tableBussinessMaster.BussinessStatusColumn];
                }
                set
                {
                    base[this.tableBussinessMaster.BussinessStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class BussinessMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.BussinessMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public BussinessMasterRowChangeEvent(CloudAccountDA.BussinessMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.BussinessMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void BussinessMasterRowChangeEventHandler(object sender, CloudAccountDA.BussinessMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CategoryMasterDataTable : TypedTableBase<CloudAccountDA.CategoryMasterRow>
        {
            private DataColumn columnCategoryCode;
            private DataColumn columnCategoryDesc;
            private DataColumn columnCategoryID;
            private DataColumn columnCategoryName;
            private DataColumn columnCategoryStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CategoryMasterRowChangeEventHandler CategoryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CategoryMasterRowChangeEventHandler CategoryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CategoryMasterRowChangeEventHandler CategoryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CategoryMasterRowChangeEventHandler CategoryMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CategoryMasterDataTable()
            {
                base.TableName = "CategoryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CategoryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CategoryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCategoryMasterRow(CloudAccountDA.CategoryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CategoryMasterRow AddCategoryMasterRow(string CategoryCode, string CategoryName, string CategoryDesc, bool CategoryStatus)
            {
                CloudAccountDA.CategoryMasterRow row = (CloudAccountDA.CategoryMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = CategoryCode;
                objArray2[2] = CategoryName;
                objArray2[3] = CategoryDesc;
                objArray2[4] = CategoryStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CategoryMasterDataTable table = (CloudAccountDA.CategoryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CategoryMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CategoryMasterRow FindByCategoryID(int CategoryID)
            {
                return (CloudAccountDA.CategoryMasterRow) base.Rows.Find(new object[] { CategoryID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CategoryMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CategoryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCategoryID = new DataColumn("CategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnCategoryCode = new DataColumn("CategoryCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCategoryCode);
                this.columnCategoryName = new DataColumn("CategoryName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.columnCategoryDesc = new DataColumn("CategoryDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCategoryDesc);
                this.columnCategoryStatus = new DataColumn("CategoryStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCategoryStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCategoryID }, true));
                this.columnCategoryID.AutoIncrement = true;
                this.columnCategoryID.AutoIncrementSeed = -1L;
                this.columnCategoryID.AutoIncrementStep = -1L;
                this.columnCategoryID.AllowDBNull = false;
                this.columnCategoryID.ReadOnly = true;
                this.columnCategoryID.Unique = true;
                this.columnCategoryCode.AllowDBNull = false;
                this.columnCategoryCode.MaxLength = 50;
                this.columnCategoryName.AllowDBNull = false;
                this.columnCategoryName.MaxLength = 250;
                this.columnCategoryDesc.MaxLength = 500;
                this.columnCategoryStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnCategoryCode = base.Columns["CategoryCode"];
                this.columnCategoryName = base.Columns["CategoryName"];
                this.columnCategoryDesc = base.Columns["CategoryDesc"];
                this.columnCategoryStatus = base.Columns["CategoryStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CategoryMasterRow NewCategoryMasterRow()
            {
                return (CloudAccountDA.CategoryMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CategoryMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CategoryMasterRowChanged != null)
                {
                    this.CategoryMasterRowChanged(this, new CloudAccountDA.CategoryMasterRowChangeEvent((CloudAccountDA.CategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CategoryMasterRowChanging != null)
                {
                    this.CategoryMasterRowChanging(this, new CloudAccountDA.CategoryMasterRowChangeEvent((CloudAccountDA.CategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CategoryMasterRowDeleted != null)
                {
                    this.CategoryMasterRowDeleted(this, new CloudAccountDA.CategoryMasterRowChangeEvent((CloudAccountDA.CategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CategoryMasterRowDeleting != null)
                {
                    this.CategoryMasterRowDeleting(this, new CloudAccountDA.CategoryMasterRowChangeEvent((CloudAccountDA.CategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCategoryMasterRow(CloudAccountDA.CategoryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CategoryCodeColumn
            {
                get
                {
                    return this.columnCategoryCode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CategoryDescColumn
            {
                get
                {
                    return this.columnCategoryDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CategoryIDColumn
            {
                get
                {
                    return this.columnCategoryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CategoryNameColumn
            {
                get
                {
                    return this.columnCategoryName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CategoryStatusColumn
            {
                get
                {
                    return this.columnCategoryStatus;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CategoryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CategoryMasterRow) base.Rows[index];
                }
            }
        }
        
        public class CategoryMasterRow : DataRow
        {
            private CloudAccountDA.CategoryMasterDataTable tableCategoryMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CategoryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCategoryMaster = (CloudAccountDA.CategoryMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCategoryDescNull()
            {
                return base.IsNull(this.tableCategoryMaster.CategoryDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCategoryDescNull()
            {
                base[this.tableCategoryMaster.CategoryDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CategoryCode
            {
                get
                {
                    return (string) base[this.tableCategoryMaster.CategoryCodeColumn];
                }
                set
                {
                    base[this.tableCategoryMaster.CategoryCodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CategoryDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCategoryMaster.CategoryDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CategoryDesc' in table 'CategoryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCategoryMaster.CategoryDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CategoryID
            {
                get
                {
                    return (int) base[this.tableCategoryMaster.CategoryIDColumn];
                }
                set
                {
                    base[this.tableCategoryMaster.CategoryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CategoryName
            {
                get
                {
                    return (string) base[this.tableCategoryMaster.CategoryNameColumn];
                }
                set
                {
                    base[this.tableCategoryMaster.CategoryNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool CategoryStatus
            {
                get
                {
                    return (bool) base[this.tableCategoryMaster.CategoryStatusColumn];
                }
                set
                {
                    base[this.tableCategoryMaster.CategoryStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CategoryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CategoryMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CategoryMasterRowChangeEvent(CloudAccountDA.CategoryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CategoryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CategoryMasterRowChangeEventHandler(object sender, CloudAccountDA.CategoryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ChangeUsernameDataTable : TypedTableBase<CloudAccountDA.ChangeUsernameRow>
        {
            private DataColumn columnOperationCode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ChangeUsernameRowChangeEventHandler ChangeUsernameRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ChangeUsernameRowChangeEventHandler ChangeUsernameRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ChangeUsernameRowChangeEventHandler ChangeUsernameRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ChangeUsernameRowChangeEventHandler ChangeUsernameRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ChangeUsernameDataTable()
            {
                base.TableName = "ChangeUsername";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ChangeUsernameDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ChangeUsernameDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddChangeUsernameRow(CloudAccountDA.ChangeUsernameRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ChangeUsernameRow AddChangeUsernameRow(int OperationCode)
            {
                CloudAccountDA.ChangeUsernameRow row = (CloudAccountDA.ChangeUsernameRow) base.NewRow();
                row.ItemArray = new object[] { OperationCode };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ChangeUsernameDataTable table = (CloudAccountDA.ChangeUsernameDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ChangeUsernameDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ChangeUsernameRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ChangeUsernameDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnOperationCode = new DataColumn("OperationCode", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnOperationCode);
                this.columnOperationCode.ReadOnly = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnOperationCode = base.Columns["OperationCode"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ChangeUsernameRow NewChangeUsernameRow()
            {
                return (CloudAccountDA.ChangeUsernameRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ChangeUsernameRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ChangeUsernameRowChanged != null)
                {
                    this.ChangeUsernameRowChanged(this, new CloudAccountDA.ChangeUsernameRowChangeEvent((CloudAccountDA.ChangeUsernameRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ChangeUsernameRowChanging != null)
                {
                    this.ChangeUsernameRowChanging(this, new CloudAccountDA.ChangeUsernameRowChangeEvent((CloudAccountDA.ChangeUsernameRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ChangeUsernameRowDeleted != null)
                {
                    this.ChangeUsernameRowDeleted(this, new CloudAccountDA.ChangeUsernameRowChangeEvent((CloudAccountDA.ChangeUsernameRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ChangeUsernameRowDeleting != null)
                {
                    this.ChangeUsernameRowDeleting(this, new CloudAccountDA.ChangeUsernameRowChangeEvent((CloudAccountDA.ChangeUsernameRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveChangeUsernameRow(CloudAccountDA.ChangeUsernameRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ChangeUsernameRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ChangeUsernameRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn OperationCodeColumn
            {
                get
                {
                    return this.columnOperationCode;
                }
            }
        }
        
        public class ChangeUsernameRow : DataRow
        {
            private CloudAccountDA.ChangeUsernameDataTable tableChangeUsername;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ChangeUsernameRow(DataRowBuilder rb) : base(rb)
            {
                this.tableChangeUsername = (CloudAccountDA.ChangeUsernameDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsOperationCodeNull()
            {
                return base.IsNull(this.tableChangeUsername.OperationCodeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOperationCodeNull()
            {
                base[this.tableChangeUsername.OperationCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int OperationCode
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableChangeUsername.OperationCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'OperationCode' in table 'ChangeUsername' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableChangeUsername.OperationCodeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ChangeUsernameRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ChangeUsernameRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ChangeUsernameRowChangeEvent(CloudAccountDA.ChangeUsernameRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ChangeUsernameRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ChangeUsernameRowChangeEventHandler(object sender, CloudAccountDA.ChangeUsernameRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CityMasterDataTable : TypedTableBase<CloudAccountDA.CityMasterRow>
        {
            private DataColumn columnCityCode;
            private DataColumn columnCityDesc;
            private DataColumn columnCityID;
            private DataColumn columnCityName;
            private DataColumn columnCityStatus;
            private DataColumn columnCountryID;
            private DataColumn columnStateID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CityMasterRowChangeEventHandler CityMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CityMasterRowChangeEventHandler CityMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CityMasterRowChangeEventHandler CityMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CityMasterRowChangeEventHandler CityMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityMasterDataTable()
            {
                base.TableName = "CityMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CityMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CityMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCityMasterRow(CloudAccountDA.CityMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CityMasterRow AddCityMasterRow(int CountryID, int StateID, string CityCode, string CityName, string CityDesc, bool CityStatus)
            {
                CloudAccountDA.CityMasterRow row = (CloudAccountDA.CityMasterRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CountryID;
                objArray2[2] = StateID;
                objArray2[3] = CityCode;
                objArray2[4] = CityName;
                objArray2[5] = CityDesc;
                objArray2[6] = CityStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CityMasterDataTable table = (CloudAccountDA.CityMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CityMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CityMasterRow FindByCityID(int CityID)
            {
                return (CloudAccountDA.CityMasterRow) base.Rows.Find(new object[] { CityID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CityMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CityMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCityID = new DataColumn("CityID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCityID);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnStateID = new DataColumn("StateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStateID);
                this.columnCityCode = new DataColumn("CityCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCityCode);
                this.columnCityName = new DataColumn("CityName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCityName);
                this.columnCityDesc = new DataColumn("CityDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCityDesc);
                this.columnCityStatus = new DataColumn("CityStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCityStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCityID }, true));
                this.columnCityID.AutoIncrement = true;
                this.columnCityID.AutoIncrementSeed = -1L;
                this.columnCityID.AutoIncrementStep = -1L;
                this.columnCityID.AllowDBNull = false;
                this.columnCityID.ReadOnly = true;
                this.columnCityID.Unique = true;
                this.columnCountryID.AllowDBNull = false;
                this.columnStateID.AllowDBNull = false;
                this.columnCityCode.AllowDBNull = false;
                this.columnCityCode.MaxLength = 30;
                this.columnCityName.AllowDBNull = false;
                this.columnCityName.MaxLength = 100;
                this.columnCityDesc.MaxLength = 500;
                this.columnCityStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCityID = base.Columns["CityID"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnStateID = base.Columns["StateID"];
                this.columnCityCode = base.Columns["CityCode"];
                this.columnCityName = base.Columns["CityName"];
                this.columnCityDesc = base.Columns["CityDesc"];
                this.columnCityStatus = base.Columns["CityStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CityMasterRow NewCityMasterRow()
            {
                return (CloudAccountDA.CityMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CityMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CityMasterRowChanged != null)
                {
                    this.CityMasterRowChanged(this, new CloudAccountDA.CityMasterRowChangeEvent((CloudAccountDA.CityMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CityMasterRowChanging != null)
                {
                    this.CityMasterRowChanging(this, new CloudAccountDA.CityMasterRowChangeEvent((CloudAccountDA.CityMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CityMasterRowDeleted != null)
                {
                    this.CityMasterRowDeleted(this, new CloudAccountDA.CityMasterRowChangeEvent((CloudAccountDA.CityMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CityMasterRowDeleting != null)
                {
                    this.CityMasterRowDeleting(this, new CloudAccountDA.CityMasterRowChangeEvent((CloudAccountDA.CityMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCityMasterRow(CloudAccountDA.CityMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CityCodeColumn
            {
                get
                {
                    return this.columnCityCode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CityDescColumn
            {
                get
                {
                    return this.columnCityDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CityIDColumn
            {
                get
                {
                    return this.columnCityID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CityNameColumn
            {
                get
                {
                    return this.columnCityName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CityStatusColumn
            {
                get
                {
                    return this.columnCityStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryIDColumn
            {
                get
                {
                    return this.columnCountryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CityMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CityMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StateIDColumn
            {
                get
                {
                    return this.columnStateID;
                }
            }
        }
        
        public class CityMasterRow : DataRow
        {
            private CloudAccountDA.CityMasterDataTable tableCityMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CityMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCityMaster = (CloudAccountDA.CityMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCityDescNull()
            {
                return base.IsNull(this.tableCityMaster.CityDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCityDescNull()
            {
                base[this.tableCityMaster.CityDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CityCode
            {
                get
                {
                    return (string) base[this.tableCityMaster.CityCodeColumn];
                }
                set
                {
                    base[this.tableCityMaster.CityCodeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CityDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCityMaster.CityDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CityDesc' in table 'CityMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCityMaster.CityDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CityID
            {
                get
                {
                    return (int) base[this.tableCityMaster.CityIDColumn];
                }
                set
                {
                    base[this.tableCityMaster.CityIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CityName
            {
                get
                {
                    return (string) base[this.tableCityMaster.CityNameColumn];
                }
                set
                {
                    base[this.tableCityMaster.CityNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CityStatus
            {
                get
                {
                    return (bool) base[this.tableCityMaster.CityStatusColumn];
                }
                set
                {
                    base[this.tableCityMaster.CityStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CountryID
            {
                get
                {
                    return (int) base[this.tableCityMaster.CountryIDColumn];
                }
                set
                {
                    base[this.tableCityMaster.CountryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int StateID
            {
                get
                {
                    return (int) base[this.tableCityMaster.StateIDColumn];
                }
                set
                {
                    base[this.tableCityMaster.StateIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CityMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CityMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CityMasterRowChangeEvent(CloudAccountDA.CityMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CityMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CityMasterRowChangeEventHandler(object sender, CloudAccountDA.CityMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ClientMasterDataTable : TypedTableBase<CloudAccountDA.ClientMasterRow>
        {
            private DataColumn columnClientID;
            private DataColumn columnClientLogo;
            private DataColumn columnClientName;
            private DataColumn columnClientStatus;
            private DataColumn columnClientURL;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientMasterRowChangeEventHandler ClientMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientMasterRowChangeEventHandler ClientMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientMasterRowChangeEventHandler ClientMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientMasterRowChangeEventHandler ClientMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ClientMasterDataTable()
            {
                base.TableName = "ClientMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ClientMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ClientMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddClientMasterRow(CloudAccountDA.ClientMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientMasterRow AddClientMasterRow(string ClientName, string ClientURL, bool ClientStatus, byte[] ClientLogo)
            {
                CloudAccountDA.ClientMasterRow row = (CloudAccountDA.ClientMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = ClientName;
                objArray2[2] = ClientURL;
                objArray2[3] = ClientStatus;
                objArray2[4] = ClientLogo;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ClientMasterDataTable table = (CloudAccountDA.ClientMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ClientMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientMasterRow FindByClientID(int ClientID)
            {
                return (CloudAccountDA.ClientMasterRow) base.Rows.Find(new object[] { ClientID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ClientMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ClientMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnClientURL = new DataColumn("ClientURL", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClientURL);
                this.columnClientStatus = new DataColumn("ClientStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnClientStatus);
                this.columnClientLogo = new DataColumn("ClientLogo", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnClientLogo);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnClientID }, true));
                this.columnClientID.AutoIncrement = true;
                this.columnClientID.AutoIncrementSeed = -1L;
                this.columnClientID.AutoIncrementStep = -1L;
                this.columnClientID.AllowDBNull = false;
                this.columnClientID.ReadOnly = true;
                this.columnClientID.Unique = true;
                this.columnClientName.AllowDBNull = false;
                this.columnClientName.MaxLength = 150;
                this.columnClientURL.AllowDBNull = false;
                this.columnClientURL.MaxLength = 150;
                this.columnClientStatus.AllowDBNull = false;
                this.columnClientLogo.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnClientID = base.Columns["ClientID"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnClientURL = base.Columns["ClientURL"];
                this.columnClientStatus = base.Columns["ClientStatus"];
                this.columnClientLogo = base.Columns["ClientLogo"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientMasterRow NewClientMasterRow()
            {
                return (CloudAccountDA.ClientMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ClientMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ClientMasterRowChanged != null)
                {
                    this.ClientMasterRowChanged(this, new CloudAccountDA.ClientMasterRowChangeEvent((CloudAccountDA.ClientMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ClientMasterRowChanging != null)
                {
                    this.ClientMasterRowChanging(this, new CloudAccountDA.ClientMasterRowChangeEvent((CloudAccountDA.ClientMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ClientMasterRowDeleted != null)
                {
                    this.ClientMasterRowDeleted(this, new CloudAccountDA.ClientMasterRowChangeEvent((CloudAccountDA.ClientMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ClientMasterRowDeleting != null)
                {
                    this.ClientMasterRowDeleting(this, new CloudAccountDA.ClientMasterRowChangeEvent((CloudAccountDA.ClientMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveClientMasterRow(CloudAccountDA.ClientMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientLogoColumn
            {
                get
                {
                    return this.columnClientLogo;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientNameColumn
            {
                get
                {
                    return this.columnClientName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientStatusColumn
            {
                get
                {
                    return this.columnClientStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientURLColumn
            {
                get
                {
                    return this.columnClientURL;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ClientMasterRow) base.Rows[index];
                }
            }
        }
        
        public class ClientMasterRow : DataRow
        {
            private CloudAccountDA.ClientMasterDataTable tableClientMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ClientMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableClientMaster = (CloudAccountDA.ClientMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ClientID
            {
                get
                {
                    return (int) base[this.tableClientMaster.ClientIDColumn];
                }
                set
                {
                    base[this.tableClientMaster.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public byte[] ClientLogo
            {
                get
                {
                    return (byte[]) base[this.tableClientMaster.ClientLogoColumn];
                }
                set
                {
                    base[this.tableClientMaster.ClientLogoColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ClientName
            {
                get
                {
                    return (string) base[this.tableClientMaster.ClientNameColumn];
                }
                set
                {
                    base[this.tableClientMaster.ClientNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClientStatus
            {
                get
                {
                    return (bool) base[this.tableClientMaster.ClientStatusColumn];
                }
                set
                {
                    base[this.tableClientMaster.ClientStatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ClientURL
            {
                get
                {
                    return (string) base[this.tableClientMaster.ClientURLColumn];
                }
                set
                {
                    base[this.tableClientMaster.ClientURLColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ClientMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ClientMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClientMasterRowChangeEvent(CloudAccountDA.ClientMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ClientMasterRowChangeEventHandler(object sender, CloudAccountDA.ClientMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ClientPermissionMasterDataTable : TypedTableBase<CloudAccountDA.ClientPermissionMasterRow>
        {
            private DataColumn columnClientPermissionID;
            private DataColumn columnCompanyID;
            private DataColumn columnDisputeInvoices;
            private DataColumn columnDocumentAdministration;
            private DataColumn columnDocuments;
            private DataColumn columnEstimate;
            private DataColumn columnInvoice;
            private DataColumn columnProjects;
            private DataColumn columnSupport;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientPermissionMasterRowChangeEventHandler ClientPermissionMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientPermissionMasterRowChangeEventHandler ClientPermissionMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientPermissionMasterRowChangeEventHandler ClientPermissionMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ClientPermissionMasterRowChangeEventHandler ClientPermissionMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClientPermissionMasterDataTable()
            {
                base.TableName = "ClientPermissionMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ClientPermissionMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ClientPermissionMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddClientPermissionMasterRow(CloudAccountDA.ClientPermissionMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientPermissionMasterRow AddClientPermissionMasterRow(int CompanyID, bool Invoice, bool Estimate, bool Projects, bool Support, bool Documents, bool DisputeInvoices, bool DocumentAdministration)
            {
                CloudAccountDA.ClientPermissionMasterRow row = (CloudAccountDA.ClientPermissionMasterRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = CompanyID;
                objArray2[2] = Invoice;
                objArray2[3] = Estimate;
                objArray2[4] = Projects;
                objArray2[5] = Support;
                objArray2[6] = Documents;
                objArray2[7] = DisputeInvoices;
                objArray2[8] = DocumentAdministration;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ClientPermissionMasterDataTable table = (CloudAccountDA.ClientPermissionMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ClientPermissionMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientPermissionMasterRow FindByClientPermissionID(int ClientPermissionID)
            {
                return (CloudAccountDA.ClientPermissionMasterRow) base.Rows.Find(new object[] { ClientPermissionID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ClientPermissionMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ClientPermissionMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnClientPermissionID = new DataColumn("ClientPermissionID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientPermissionID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnInvoice = new DataColumn("Invoice", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnInvoice);
                this.columnEstimate = new DataColumn("Estimate", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEstimate);
                this.columnProjects = new DataColumn("Projects", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnProjects);
                this.columnSupport = new DataColumn("Support", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnSupport);
                this.columnDocuments = new DataColumn("Documents", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDocuments);
                this.columnDisputeInvoices = new DataColumn("DisputeInvoices", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDisputeInvoices);
                this.columnDocumentAdministration = new DataColumn("DocumentAdministration", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDocumentAdministration);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnClientPermissionID }, true));
                this.columnClientPermissionID.AutoIncrement = true;
                this.columnClientPermissionID.AutoIncrementSeed = -1L;
                this.columnClientPermissionID.AutoIncrementStep = -1L;
                this.columnClientPermissionID.AllowDBNull = false;
                this.columnClientPermissionID.ReadOnly = true;
                this.columnClientPermissionID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnInvoice.AllowDBNull = false;
                this.columnEstimate.AllowDBNull = false;
                this.columnProjects.AllowDBNull = false;
                this.columnSupport.AllowDBNull = false;
                this.columnDocuments.AllowDBNull = false;
                this.columnDisputeInvoices.AllowDBNull = false;
                this.columnDocumentAdministration.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnClientPermissionID = base.Columns["ClientPermissionID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnInvoice = base.Columns["Invoice"];
                this.columnEstimate = base.Columns["Estimate"];
                this.columnProjects = base.Columns["Projects"];
                this.columnSupport = base.Columns["Support"];
                this.columnDocuments = base.Columns["Documents"];
                this.columnDisputeInvoices = base.Columns["DisputeInvoices"];
                this.columnDocumentAdministration = base.Columns["DocumentAdministration"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientPermissionMasterRow NewClientPermissionMasterRow()
            {
                return (CloudAccountDA.ClientPermissionMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ClientPermissionMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ClientPermissionMasterRowChanged != null)
                {
                    this.ClientPermissionMasterRowChanged(this, new CloudAccountDA.ClientPermissionMasterRowChangeEvent((CloudAccountDA.ClientPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ClientPermissionMasterRowChanging != null)
                {
                    this.ClientPermissionMasterRowChanging(this, new CloudAccountDA.ClientPermissionMasterRowChangeEvent((CloudAccountDA.ClientPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ClientPermissionMasterRowDeleted != null)
                {
                    this.ClientPermissionMasterRowDeleted(this, new CloudAccountDA.ClientPermissionMasterRowChangeEvent((CloudAccountDA.ClientPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ClientPermissionMasterRowDeleting != null)
                {
                    this.ClientPermissionMasterRowDeleting(this, new CloudAccountDA.ClientPermissionMasterRowChangeEvent((CloudAccountDA.ClientPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveClientPermissionMasterRow(CloudAccountDA.ClientPermissionMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientPermissionIDColumn
            {
                get
                {
                    return this.columnClientPermissionID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DisputeInvoicesColumn
            {
                get
                {
                    return this.columnDisputeInvoices;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DocumentAdministrationColumn
            {
                get
                {
                    return this.columnDocumentAdministration;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DocumentsColumn
            {
                get
                {
                    return this.columnDocuments;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateColumn
            {
                get
                {
                    return this.columnEstimate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceColumn
            {
                get
                {
                    return this.columnInvoice;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientPermissionMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ClientPermissionMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectsColumn
            {
                get
                {
                    return this.columnProjects;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportColumn
            {
                get
                {
                    return this.columnSupport;
                }
            }
        }
        
        public class ClientPermissionMasterRow : DataRow
        {
            private CloudAccountDA.ClientPermissionMasterDataTable tableClientPermissionMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ClientPermissionMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableClientPermissionMaster = (CloudAccountDA.ClientPermissionMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ClientPermissionID
            {
                get
                {
                    return (int) base[this.tableClientPermissionMaster.ClientPermissionIDColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.ClientPermissionIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableClientPermissionMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool DisputeInvoices
            {
                get
                {
                    return (bool) base[this.tableClientPermissionMaster.DisputeInvoicesColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.DisputeInvoicesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool DocumentAdministration
            {
                get
                {
                    return (bool) base[this.tableClientPermissionMaster.DocumentAdministrationColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.DocumentAdministrationColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Documents
            {
                get
                {
                    return (bool) base[this.tableClientPermissionMaster.DocumentsColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.DocumentsColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Estimate
            {
                get
                {
                    return (bool) base[this.tableClientPermissionMaster.EstimateColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.EstimateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Invoice
            {
                get
                {
                    return (bool) base[this.tableClientPermissionMaster.InvoiceColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.InvoiceColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Projects
            {
                get
                {
                    return (bool) base[this.tableClientPermissionMaster.ProjectsColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.ProjectsColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Support
            {
                get
                {
                    return (bool) base[this.tableClientPermissionMaster.SupportColumn];
                }
                set
                {
                    base[this.tableClientPermissionMaster.SupportColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ClientPermissionMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ClientPermissionMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ClientPermissionMasterRowChangeEvent(CloudAccountDA.ClientPermissionMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ClientPermissionMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ClientPermissionMasterRowChangeEventHandler(object sender, CloudAccountDA.ClientPermissionMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CloudPackageDetailsDataTable : TypedTableBase<CloudAccountDA.CloudPackageDetailsRow>
        {
            private DataColumn columnCloudPackageDetailID;
            private DataColumn columnCloudPackageDetailValue;
            private DataColumn columnCloudPackageID;
            private DataColumn columnPackageFeatureID;
            private DataColumn columnPackageModuleID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageDetailsRowChangeEventHandler CloudPackageDetailsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageDetailsRowChangeEventHandler CloudPackageDetailsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageDetailsRowChangeEventHandler CloudPackageDetailsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageDetailsRowChangeEventHandler CloudPackageDetailsRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudPackageDetailsDataTable()
            {
                base.TableName = "CloudPackageDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CloudPackageDetailsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CloudPackageDetailsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCloudPackageDetailsRow(CloudAccountDA.CloudPackageDetailsRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CloudPackageDetailsRow AddCloudPackageDetailsRow(int CloudPackageID, int PackageModuleID, int PackageFeatureID, string CloudPackageDetailValue)
            {
                CloudAccountDA.CloudPackageDetailsRow row = (CloudAccountDA.CloudPackageDetailsRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = CloudPackageID;
                objArray2[2] = PackageModuleID;
                objArray2[3] = PackageFeatureID;
                objArray2[4] = CloudPackageDetailValue;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CloudPackageDetailsDataTable table = (CloudAccountDA.CloudPackageDetailsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CloudPackageDetailsDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CloudPackageDetailsRow FindByCloudPackageDetailID(int CloudPackageDetailID)
            {
                return (CloudAccountDA.CloudPackageDetailsRow) base.Rows.Find(new object[] { CloudPackageDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CloudPackageDetailsRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CloudPackageDetailsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCloudPackageDetailID = new DataColumn("CloudPackageDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageDetailID);
                this.columnCloudPackageID = new DataColumn("CloudPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageID);
                this.columnPackageModuleID = new DataColumn("PackageModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageModuleID);
                this.columnPackageFeatureID = new DataColumn("PackageFeatureID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageFeatureID);
                this.columnCloudPackageDetailValue = new DataColumn("CloudPackageDetailValue", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageDetailValue);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCloudPackageDetailID }, true));
                this.columnCloudPackageDetailID.AutoIncrement = true;
                this.columnCloudPackageDetailID.AutoIncrementSeed = -1L;
                this.columnCloudPackageDetailID.AutoIncrementStep = -1L;
                this.columnCloudPackageDetailID.AllowDBNull = false;
                this.columnCloudPackageDetailID.ReadOnly = true;
                this.columnCloudPackageDetailID.Unique = true;
                this.columnCloudPackageID.AllowDBNull = false;
                this.columnPackageModuleID.AllowDBNull = false;
                this.columnPackageFeatureID.AllowDBNull = false;
                this.columnCloudPackageDetailValue.AllowDBNull = false;
                this.columnCloudPackageDetailValue.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCloudPackageDetailID = base.Columns["CloudPackageDetailID"];
                this.columnCloudPackageID = base.Columns["CloudPackageID"];
                this.columnPackageModuleID = base.Columns["PackageModuleID"];
                this.columnPackageFeatureID = base.Columns["PackageFeatureID"];
                this.columnCloudPackageDetailValue = base.Columns["CloudPackageDetailValue"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CloudPackageDetailsRow NewCloudPackageDetailsRow()
            {
                return (CloudAccountDA.CloudPackageDetailsRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CloudPackageDetailsRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CloudPackageDetailsRowChanged != null)
                {
                    this.CloudPackageDetailsRowChanged(this, new CloudAccountDA.CloudPackageDetailsRowChangeEvent((CloudAccountDA.CloudPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CloudPackageDetailsRowChanging != null)
                {
                    this.CloudPackageDetailsRowChanging(this, new CloudAccountDA.CloudPackageDetailsRowChangeEvent((CloudAccountDA.CloudPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CloudPackageDetailsRowDeleted != null)
                {
                    this.CloudPackageDetailsRowDeleted(this, new CloudAccountDA.CloudPackageDetailsRowChangeEvent((CloudAccountDA.CloudPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CloudPackageDetailsRowDeleting != null)
                {
                    this.CloudPackageDetailsRowDeleting(this, new CloudAccountDA.CloudPackageDetailsRowChangeEvent((CloudAccountDA.CloudPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCloudPackageDetailsRow(CloudAccountDA.CloudPackageDetailsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageDetailIDColumn
            {
                get
                {
                    return this.columnCloudPackageDetailID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageDetailValueColumn
            {
                get
                {
                    return this.columnCloudPackageDetailValue;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageIDColumn
            {
                get
                {
                    return this.columnCloudPackageID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CloudPackageDetailsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CloudPackageDetailsRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageFeatureIDColumn
            {
                get
                {
                    return this.columnPackageFeatureID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageModuleIDColumn
            {
                get
                {
                    return this.columnPackageModuleID;
                }
            }
        }
        
        public class CloudPackageDetailsRow : DataRow
        {
            private CloudAccountDA.CloudPackageDetailsDataTable tableCloudPackageDetails;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CloudPackageDetailsRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCloudPackageDetails = (CloudAccountDA.CloudPackageDetailsDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CloudPackageDetailID
            {
                get
                {
                    return (int) base[this.tableCloudPackageDetails.CloudPackageDetailIDColumn];
                }
                set
                {
                    base[this.tableCloudPackageDetails.CloudPackageDetailIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CloudPackageDetailValue
            {
                get
                {
                    return (string) base[this.tableCloudPackageDetails.CloudPackageDetailValueColumn];
                }
                set
                {
                    base[this.tableCloudPackageDetails.CloudPackageDetailValueColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CloudPackageID
            {
                get
                {
                    return (int) base[this.tableCloudPackageDetails.CloudPackageIDColumn];
                }
                set
                {
                    base[this.tableCloudPackageDetails.CloudPackageIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackageFeatureID
            {
                get
                {
                    return (int) base[this.tableCloudPackageDetails.PackageFeatureIDColumn];
                }
                set
                {
                    base[this.tableCloudPackageDetails.PackageFeatureIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int PackageModuleID
            {
                get
                {
                    return (int) base[this.tableCloudPackageDetails.PackageModuleIDColumn];
                }
                set
                {
                    base[this.tableCloudPackageDetails.PackageModuleIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CloudPackageDetailsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CloudPackageDetailsRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudPackageDetailsRowChangeEvent(CloudAccountDA.CloudPackageDetailsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CloudPackageDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CloudPackageDetailsRowChangeEventHandler(object sender, CloudAccountDA.CloudPackageDetailsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CloudPackageMasterDataTable : TypedTableBase<CloudAccountDA.CloudPackageMasterRow>
        {
            private DataColumn columnCloudPackageCode;
            private DataColumn columnCloudPackageCurrency;
            private DataColumn columnCloudPackageDescription;
            private DataColumn columnCloudPackageID;
            private DataColumn columnCloudPackageName;
            private DataColumn columnCloudPackagePriceMonthly;
            private DataColumn columnCloudPackagePriceYearly;
            private DataColumn columnCloudPackageStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageMasterRowChangeEventHandler CloudPackageMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageMasterRowChangeEventHandler CloudPackageMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageMasterRowChangeEventHandler CloudPackageMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CloudPackageMasterRowChangeEventHandler CloudPackageMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudPackageMasterDataTable()
            {
                base.TableName = "CloudPackageMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CloudPackageMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CloudPackageMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCloudPackageMasterRow(CloudAccountDA.CloudPackageMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CloudPackageMasterRow AddCloudPackageMasterRow(string CloudPackageCode, string CloudPackageName, decimal CloudPackagePriceMonthly, decimal CloudPackagePriceYearly, int CloudPackageCurrency, string CloudPackageDescription, bool CloudPackageStatus)
            {
                CloudAccountDA.CloudPackageMasterRow row = (CloudAccountDA.CloudPackageMasterRow) base.NewRow();
                object[] objArray2 = new object[8];
                objArray2[1] = CloudPackageCode;
                objArray2[2] = CloudPackageName;
                objArray2[3] = CloudPackagePriceMonthly;
                objArray2[4] = CloudPackagePriceYearly;
                objArray2[5] = CloudPackageCurrency;
                objArray2[6] = CloudPackageDescription;
                objArray2[7] = CloudPackageStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CloudPackageMasterDataTable table = (CloudAccountDA.CloudPackageMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CloudPackageMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CloudPackageMasterRow FindByCloudPackageID(int CloudPackageID)
            {
                return (CloudAccountDA.CloudPackageMasterRow) base.Rows.Find(new object[] { CloudPackageID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CloudPackageMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CloudPackageMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCloudPackageID = new DataColumn("CloudPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageID);
                this.columnCloudPackageCode = new DataColumn("CloudPackageCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageCode);
                this.columnCloudPackageName = new DataColumn("CloudPackageName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageName);
                this.columnCloudPackagePriceMonthly = new DataColumn("CloudPackagePriceMonthly", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackagePriceMonthly);
                this.columnCloudPackagePriceYearly = new DataColumn("CloudPackagePriceYearly", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackagePriceYearly);
                this.columnCloudPackageCurrency = new DataColumn("CloudPackageCurrency", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageCurrency);
                this.columnCloudPackageDescription = new DataColumn("CloudPackageDescription", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageDescription);
                this.columnCloudPackageStatus = new DataColumn("CloudPackageStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCloudPackageID }, true));
                this.columnCloudPackageID.AutoIncrement = true;
                this.columnCloudPackageID.AutoIncrementSeed = -1L;
                this.columnCloudPackageID.AutoIncrementStep = -1L;
                this.columnCloudPackageID.AllowDBNull = false;
                this.columnCloudPackageID.ReadOnly = true;
                this.columnCloudPackageID.Unique = true;
                this.columnCloudPackageCode.AllowDBNull = false;
                this.columnCloudPackageCode.MaxLength = 50;
                this.columnCloudPackageName.AllowDBNull = false;
                this.columnCloudPackageName.MaxLength = 250;
                this.columnCloudPackagePriceMonthly.AllowDBNull = false;
                this.columnCloudPackagePriceYearly.AllowDBNull = false;
                this.columnCloudPackageCurrency.AllowDBNull = false;
                this.columnCloudPackageDescription.MaxLength = 0x3e8;
                this.columnCloudPackageStatus.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCloudPackageID = base.Columns["CloudPackageID"];
                this.columnCloudPackageCode = base.Columns["CloudPackageCode"];
                this.columnCloudPackageName = base.Columns["CloudPackageName"];
                this.columnCloudPackagePriceMonthly = base.Columns["CloudPackagePriceMonthly"];
                this.columnCloudPackagePriceYearly = base.Columns["CloudPackagePriceYearly"];
                this.columnCloudPackageCurrency = base.Columns["CloudPackageCurrency"];
                this.columnCloudPackageDescription = base.Columns["CloudPackageDescription"];
                this.columnCloudPackageStatus = base.Columns["CloudPackageStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CloudPackageMasterRow NewCloudPackageMasterRow()
            {
                return (CloudAccountDA.CloudPackageMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CloudPackageMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CloudPackageMasterRowChanged != null)
                {
                    this.CloudPackageMasterRowChanged(this, new CloudAccountDA.CloudPackageMasterRowChangeEvent((CloudAccountDA.CloudPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CloudPackageMasterRowChanging != null)
                {
                    this.CloudPackageMasterRowChanging(this, new CloudAccountDA.CloudPackageMasterRowChangeEvent((CloudAccountDA.CloudPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CloudPackageMasterRowDeleted != null)
                {
                    this.CloudPackageMasterRowDeleted(this, new CloudAccountDA.CloudPackageMasterRowChangeEvent((CloudAccountDA.CloudPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CloudPackageMasterRowDeleting != null)
                {
                    this.CloudPackageMasterRowDeleting(this, new CloudAccountDA.CloudPackageMasterRowChangeEvent((CloudAccountDA.CloudPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCloudPackageMasterRow(CloudAccountDA.CloudPackageMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageCodeColumn
            {
                get
                {
                    return this.columnCloudPackageCode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CloudPackageCurrencyColumn
            {
                get
                {
                    return this.columnCloudPackageCurrency;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageDescriptionColumn
            {
                get
                {
                    return this.columnCloudPackageDescription;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageIDColumn
            {
                get
                {
                    return this.columnCloudPackageID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageNameColumn
            {
                get
                {
                    return this.columnCloudPackageName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackagePriceMonthlyColumn
            {
                get
                {
                    return this.columnCloudPackagePriceMonthly;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CloudPackagePriceYearlyColumn
            {
                get
                {
                    return this.columnCloudPackagePriceYearly;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CloudPackageStatusColumn
            {
                get
                {
                    return this.columnCloudPackageStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CloudPackageMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CloudPackageMasterRow) base.Rows[index];
                }
            }
        }
        
        public class CloudPackageMasterRow : DataRow
        {
            private CloudAccountDA.CloudPackageMasterDataTable tableCloudPackageMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CloudPackageMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCloudPackageMaster = (CloudAccountDA.CloudPackageMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCloudPackageDescriptionNull()
            {
                return base.IsNull(this.tableCloudPackageMaster.CloudPackageDescriptionColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCloudPackageDescriptionNull()
            {
                base[this.tableCloudPackageMaster.CloudPackageDescriptionColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CloudPackageCode
            {
                get
                {
                    return (string) base[this.tableCloudPackageMaster.CloudPackageCodeColumn];
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackageCodeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CloudPackageCurrency
            {
                get
                {
                    return (int) base[this.tableCloudPackageMaster.CloudPackageCurrencyColumn];
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackageCurrencyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CloudPackageDescription
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCloudPackageMaster.CloudPackageDescriptionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CloudPackageDescription' in table 'CloudPackageMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackageDescriptionColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CloudPackageID
            {
                get
                {
                    return (int) base[this.tableCloudPackageMaster.CloudPackageIDColumn];
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackageIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CloudPackageName
            {
                get
                {
                    return (string) base[this.tableCloudPackageMaster.CloudPackageNameColumn];
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackageNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CloudPackagePriceMonthly
            {
                get
                {
                    return (decimal) base[this.tableCloudPackageMaster.CloudPackagePriceMonthlyColumn];
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackagePriceMonthlyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal CloudPackagePriceYearly
            {
                get
                {
                    return (decimal) base[this.tableCloudPackageMaster.CloudPackagePriceYearlyColumn];
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackagePriceYearlyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool CloudPackageStatus
            {
                get
                {
                    return (bool) base[this.tableCloudPackageMaster.CloudPackageStatusColumn];
                }
                set
                {
                    base[this.tableCloudPackageMaster.CloudPackageStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CloudPackageMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CloudPackageMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudPackageMasterRowChangeEvent(CloudAccountDA.CloudPackageMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CloudPackageMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CloudPackageMasterRowChangeEventHandler(object sender, CloudAccountDA.CloudPackageMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyAdminRightsMasterDataTable : TypedTableBase<CloudAccountDA.CompanyAdminRightsMasterRow>
        {
            private DataColumn columnAddMode;
            private DataColumn columnCompanyAdminID;
            private DataColumn columnCompanyAdminRightsID;
            private DataColumn columnCompanyID;
            private DataColumn columnDeleteMode;
            private DataColumn columnEditMode;
            private DataColumn columnFormID;
            private DataColumn columnModuleFormName;
            private DataColumn columnModuleID;
            private DataColumn columnViewMode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyAdminRightsMasterRowChangeEventHandler CompanyAdminRightsMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyAdminRightsMasterRowChangeEventHandler CompanyAdminRightsMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyAdminRightsMasterRowChangeEventHandler CompanyAdminRightsMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyAdminRightsMasterRowChangeEventHandler CompanyAdminRightsMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyAdminRightsMasterDataTable()
            {
                base.TableName = "CompanyAdminRightsMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CompanyAdminRightsMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CompanyAdminRightsMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyAdminRightsMasterRow(CloudAccountDA.CompanyAdminRightsMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyAdminRightsMasterRow AddCompanyAdminRightsMasterRow(int CompanyID, int CompanyAdminID, int ModuleID, int FormID, string ModuleFormName, bool AddMode, bool EditMode, bool DeleteMode, bool ViewMode)
            {
                CloudAccountDA.CompanyAdminRightsMasterRow row = (CloudAccountDA.CompanyAdminRightsMasterRow) base.NewRow();
                object[] objArray2 = new object[10];
                objArray2[1] = CompanyID;
                objArray2[2] = CompanyAdminID;
                objArray2[3] = ModuleID;
                objArray2[4] = FormID;
                objArray2[5] = ModuleFormName;
                objArray2[6] = AddMode;
                objArray2[7] = EditMode;
                objArray2[8] = DeleteMode;
                objArray2[9] = ViewMode;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyAdminRightsMasterDataTable table = (CloudAccountDA.CompanyAdminRightsMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyAdminRightsMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyAdminRightsMasterRow FindByCompanyAdminRightsID(int CompanyAdminRightsID)
            {
                return (CloudAccountDA.CompanyAdminRightsMasterRow) base.Rows.Find(new object[] { CompanyAdminRightsID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyAdminRightsMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyAdminRightsMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCompanyAdminRightsID = new DataColumn("CompanyAdminRightsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyAdminRightsID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCompanyAdminID = new DataColumn("CompanyAdminID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyAdminID);
                this.columnModuleID = new DataColumn("ModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnFormID = new DataColumn("FormID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnModuleFormName = new DataColumn("ModuleFormName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnModuleFormName);
                this.columnAddMode = new DataColumn("AddMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAddMode);
                this.columnEditMode = new DataColumn("EditMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEditMode);
                this.columnDeleteMode = new DataColumn("DeleteMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleteMode);
                this.columnViewMode = new DataColumn("ViewMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnViewMode);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyAdminRightsID }, true));
                this.columnCompanyAdminRightsID.AutoIncrement = true;
                this.columnCompanyAdminRightsID.AutoIncrementSeed = -1L;
                this.columnCompanyAdminRightsID.AutoIncrementStep = -1L;
                this.columnCompanyAdminRightsID.AllowDBNull = false;
                this.columnCompanyAdminRightsID.ReadOnly = true;
                this.columnCompanyAdminRightsID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnCompanyAdminID.AllowDBNull = false;
                this.columnModuleID.AllowDBNull = false;
                this.columnFormID.AllowDBNull = false;
                this.columnModuleFormName.MaxLength = 100;
                this.columnAddMode.AllowDBNull = false;
                this.columnEditMode.AllowDBNull = false;
                this.columnDeleteMode.AllowDBNull = false;
                this.columnViewMode.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCompanyAdminRightsID = base.Columns["CompanyAdminRightsID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCompanyAdminID = base.Columns["CompanyAdminID"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnFormID = base.Columns["FormID"];
                this.columnModuleFormName = base.Columns["ModuleFormName"];
                this.columnAddMode = base.Columns["AddMode"];
                this.columnEditMode = base.Columns["EditMode"];
                this.columnDeleteMode = base.Columns["DeleteMode"];
                this.columnViewMode = base.Columns["ViewMode"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyAdminRightsMasterRow NewCompanyAdminRightsMasterRow()
            {
                return (CloudAccountDA.CompanyAdminRightsMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyAdminRightsMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyAdminRightsMasterRowChanged != null)
                {
                    this.CompanyAdminRightsMasterRowChanged(this, new CloudAccountDA.CompanyAdminRightsMasterRowChangeEvent((CloudAccountDA.CompanyAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyAdminRightsMasterRowChanging != null)
                {
                    this.CompanyAdminRightsMasterRowChanging(this, new CloudAccountDA.CompanyAdminRightsMasterRowChangeEvent((CloudAccountDA.CompanyAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyAdminRightsMasterRowDeleted != null)
                {
                    this.CompanyAdminRightsMasterRowDeleted(this, new CloudAccountDA.CompanyAdminRightsMasterRowChangeEvent((CloudAccountDA.CompanyAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyAdminRightsMasterRowDeleting != null)
                {
                    this.CompanyAdminRightsMasterRowDeleting(this, new CloudAccountDA.CompanyAdminRightsMasterRowChangeEvent((CloudAccountDA.CompanyAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCompanyAdminRightsMasterRow(CloudAccountDA.CompanyAdminRightsMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AddModeColumn
            {
                get
                {
                    return this.columnAddMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyAdminIDColumn
            {
                get
                {
                    return this.columnCompanyAdminID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyAdminRightsIDColumn
            {
                get
                {
                    return this.columnCompanyAdminRightsID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeleteModeColumn
            {
                get
                {
                    return this.columnDeleteMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EditModeColumn
            {
                get
                {
                    return this.columnEditMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FormIDColumn
            {
                get
                {
                    return this.columnFormID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyAdminRightsMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyAdminRightsMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleFormNameColumn
            {
                get
                {
                    return this.columnModuleFormName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ModuleIDColumn
            {
                get
                {
                    return this.columnModuleID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ViewModeColumn
            {
                get
                {
                    return this.columnViewMode;
                }
            }
        }
        
        public class CompanyAdminRightsMasterRow : DataRow
        {
            private CloudAccountDA.CompanyAdminRightsMasterDataTable tableCompanyAdminRightsMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CompanyAdminRightsMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyAdminRightsMaster = (CloudAccountDA.CompanyAdminRightsMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModuleFormNameNull()
            {
                return base.IsNull(this.tableCompanyAdminRightsMaster.ModuleFormNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModuleFormNameNull()
            {
                base[this.tableCompanyAdminRightsMaster.ModuleFormNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool AddMode
            {
                get
                {
                    return (bool) base[this.tableCompanyAdminRightsMaster.AddModeColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.AddModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyAdminID
            {
                get
                {
                    return (int) base[this.tableCompanyAdminRightsMaster.CompanyAdminIDColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.CompanyAdminIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyAdminRightsID
            {
                get
                {
                    return (int) base[this.tableCompanyAdminRightsMaster.CompanyAdminRightsIDColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.CompanyAdminRightsIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCompanyAdminRightsMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool DeleteMode
            {
                get
                {
                    return (bool) base[this.tableCompanyAdminRightsMaster.DeleteModeColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.DeleteModeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool EditMode
            {
                get
                {
                    return (bool) base[this.tableCompanyAdminRightsMaster.EditModeColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.EditModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FormID
            {
                get
                {
                    return (int) base[this.tableCompanyAdminRightsMaster.FormIDColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.FormIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ModuleFormName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyAdminRightsMaster.ModuleFormNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleFormName' in table 'CompanyAdminRightsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.ModuleFormNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ModuleID
            {
                get
                {
                    return (int) base[this.tableCompanyAdminRightsMaster.ModuleIDColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.ModuleIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ViewMode
            {
                get
                {
                    return (bool) base[this.tableCompanyAdminRightsMaster.ViewModeColumn];
                }
                set
                {
                    base[this.tableCompanyAdminRightsMaster.ViewModeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyAdminRightsMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyAdminRightsMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyAdminRightsMasterRowChangeEvent(CloudAccountDA.CompanyAdminRightsMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyAdminRightsMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyAdminRightsMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyAdminRightsMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyClientContactDetailDataTable : TypedTableBase<CloudAccountDA.CompanyClientContactDetailRow>
        {
            private DataColumn columnCompanyClientContactID;
            private DataColumn columnCompanyClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnEmail;
            private DataColumn columnFirstName;
            private DataColumn columnHomePhone;
            private DataColumn columnLastName;
            private DataColumn columnLoginCredentials;
            private DataColumn columnLoginInfoSent;
            private DataColumn columnMobile;
            private DataColumn columnUserName;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientContactDetailRowChangeEventHandler CompanyClientContactDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientContactDetailRowChangeEventHandler CompanyClientContactDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientContactDetailRowChangeEventHandler CompanyClientContactDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientContactDetailRowChangeEventHandler CompanyClientContactDetailRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CompanyClientContactDetailDataTable()
            {
                base.TableName = "CompanyClientContactDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyClientContactDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CompanyClientContactDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyClientContactDetailRow(CloudAccountDA.CompanyClientContactDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientContactDetailRow AddCompanyClientContactDetailRow(int CompanyID, int CompanyClientID, string Email, string FirstName, string LastName, string HomePhone, string Mobile, bool LoginCredentials, string UserName, bool LoginInfoSent)
            {
                CloudAccountDA.CompanyClientContactDetailRow row = (CloudAccountDA.CompanyClientContactDetailRow) base.NewRow();
                object[] objArray2 = new object[11];
                objArray2[1] = CompanyID;
                objArray2[2] = CompanyClientID;
                objArray2[3] = Email;
                objArray2[4] = FirstName;
                objArray2[5] = LastName;
                objArray2[6] = HomePhone;
                objArray2[7] = Mobile;
                objArray2[8] = LoginCredentials;
                objArray2[9] = UserName;
                objArray2[10] = LoginInfoSent;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyClientContactDetailDataTable table = (CloudAccountDA.CompanyClientContactDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyClientContactDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientContactDetailRow FindByCompanyClientContactID(int CompanyClientContactID)
            {
                return (CloudAccountDA.CompanyClientContactDetailRow) base.Rows.Find(new object[] { CompanyClientContactID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyClientContactDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyClientContactDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCompanyClientContactID = new DataColumn("CompanyClientContactID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyClientContactID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCompanyClientID = new DataColumn("CompanyClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyClientID);
                this.columnEmail = new DataColumn("Email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnHomePhone = new DataColumn("HomePhone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHomePhone);
                this.columnMobile = new DataColumn("Mobile", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMobile);
                this.columnLoginCredentials = new DataColumn("LoginCredentials", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnLoginCredentials);
                this.columnUserName = new DataColumn("UserName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnLoginInfoSent = new DataColumn("LoginInfoSent", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnLoginInfoSent);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyClientContactID }, true));
                this.columnCompanyClientContactID.AutoIncrement = true;
                this.columnCompanyClientContactID.AutoIncrementSeed = -1L;
                this.columnCompanyClientContactID.AutoIncrementStep = -1L;
                this.columnCompanyClientContactID.AllowDBNull = false;
                this.columnCompanyClientContactID.ReadOnly = true;
                this.columnCompanyClientContactID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnCompanyClientID.AllowDBNull = false;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnHomePhone.MaxLength = 15;
                this.columnMobile.MaxLength = 10;
                this.columnUserName.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCompanyClientContactID = base.Columns["CompanyClientContactID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCompanyClientID = base.Columns["CompanyClientID"];
                this.columnEmail = base.Columns["Email"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnHomePhone = base.Columns["HomePhone"];
                this.columnMobile = base.Columns["Mobile"];
                this.columnLoginCredentials = base.Columns["LoginCredentials"];
                this.columnUserName = base.Columns["UserName"];
                this.columnLoginInfoSent = base.Columns["LoginInfoSent"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientContactDetailRow NewCompanyClientContactDetailRow()
            {
                return (CloudAccountDA.CompanyClientContactDetailRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyClientContactDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyClientContactDetailRowChanged != null)
                {
                    this.CompanyClientContactDetailRowChanged(this, new CloudAccountDA.CompanyClientContactDetailRowChangeEvent((CloudAccountDA.CompanyClientContactDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyClientContactDetailRowChanging != null)
                {
                    this.CompanyClientContactDetailRowChanging(this, new CloudAccountDA.CompanyClientContactDetailRowChangeEvent((CloudAccountDA.CompanyClientContactDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyClientContactDetailRowDeleted != null)
                {
                    this.CompanyClientContactDetailRowDeleted(this, new CloudAccountDA.CompanyClientContactDetailRowChangeEvent((CloudAccountDA.CompanyClientContactDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyClientContactDetailRowDeleting != null)
                {
                    this.CompanyClientContactDetailRowDeleting(this, new CloudAccountDA.CompanyClientContactDetailRowChangeEvent((CloudAccountDA.CompanyClientContactDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCompanyClientContactDetailRow(CloudAccountDA.CompanyClientContactDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyClientContactIDColumn
            {
                get
                {
                    return this.columnCompanyClientContactID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyClientIDColumn
            {
                get
                {
                    return this.columnCompanyClientID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailColumn
            {
                get
                {
                    return this.columnEmail;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FirstNameColumn
            {
                get
                {
                    return this.columnFirstName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HomePhoneColumn
            {
                get
                {
                    return this.columnHomePhone;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientContactDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyClientContactDetailRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LastNameColumn
            {
                get
                {
                    return this.columnLastName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn LoginCredentialsColumn
            {
                get
                {
                    return this.columnLoginCredentials;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn LoginInfoSentColumn
            {
                get
                {
                    return this.columnLoginInfoSent;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MobileColumn
            {
                get
                {
                    return this.columnMobile;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn UserNameColumn
            {
                get
                {
                    return this.columnUserName;
                }
            }
        }
        
        public class CompanyClientContactDetailRow : DataRow
        {
            private CloudAccountDA.CompanyClientContactDetailDataTable tableCompanyClientContactDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyClientContactDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyClientContactDetail = (CloudAccountDA.CompanyClientContactDetailDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFirstNameNull()
            {
                return base.IsNull(this.tableCompanyClientContactDetail.FirstNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHomePhoneNull()
            {
                return base.IsNull(this.tableCompanyClientContactDetail.HomePhoneColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsLastNameNull()
            {
                return base.IsNull(this.tableCompanyClientContactDetail.LastNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsLoginCredentialsNull()
            {
                return base.IsNull(this.tableCompanyClientContactDetail.LoginCredentialsColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoginInfoSentNull()
            {
                return base.IsNull(this.tableCompanyClientContactDetail.LoginInfoSentColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMobileNull()
            {
                return base.IsNull(this.tableCompanyClientContactDetail.MobileColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsUserNameNull()
            {
                return base.IsNull(this.tableCompanyClientContactDetail.UserNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFirstNameNull()
            {
                base[this.tableCompanyClientContactDetail.FirstNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHomePhoneNull()
            {
                base[this.tableCompanyClientContactDetail.HomePhoneColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastNameNull()
            {
                base[this.tableCompanyClientContactDetail.LastNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoginCredentialsNull()
            {
                base[this.tableCompanyClientContactDetail.LoginCredentialsColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLoginInfoSentNull()
            {
                base[this.tableCompanyClientContactDetail.LoginInfoSentColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetMobileNull()
            {
                base[this.tableCompanyClientContactDetail.MobileColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUserNameNull()
            {
                base[this.tableCompanyClientContactDetail.UserNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyClientContactID
            {
                get
                {
                    return (int) base[this.tableCompanyClientContactDetail.CompanyClientContactIDColumn];
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.CompanyClientContactIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyClientID
            {
                get
                {
                    return (int) base[this.tableCompanyClientContactDetail.CompanyClientIDColumn];
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.CompanyClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCompanyClientContactDetail.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Email
            {
                get
                {
                    return (string) base[this.tableCompanyClientContactDetail.EmailColumn];
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.EmailColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FirstName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientContactDetail.FirstNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FirstName' in table 'CompanyClientContactDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.FirstNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string HomePhone
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientContactDetail.HomePhoneColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HomePhone' in table 'CompanyClientContactDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.HomePhoneColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string LastName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientContactDetail.LastNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LastName' in table 'CompanyClientContactDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.LastNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool LoginCredentials
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientContactDetail.LoginCredentialsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LoginCredentials' in table 'CompanyClientContactDetail' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.LoginCredentialsColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool LoginInfoSent
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientContactDetail.LoginInfoSentColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LoginInfoSent' in table 'CompanyClientContactDetail' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.LoginInfoSentColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Mobile
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientContactDetail.MobileColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Mobile' in table 'CompanyClientContactDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.MobileColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string UserName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientContactDetail.UserNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UserName' in table 'CompanyClientContactDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientContactDetail.UserNameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyClientContactDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyClientContactDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyClientContactDetailRowChangeEvent(CloudAccountDA.CompanyClientContactDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientContactDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyClientContactDetailRowChangeEventHandler(object sender, CloudAccountDA.CompanyClientContactDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyClientMasterDataTable : TypedTableBase<CloudAccountDA.CompanyClientMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnAddress1;
            private DataColumn columnAddress2;
            private DataColumn columnArchived;
            private DataColumn columnBussinessPhone;
            private DataColumn columnCityID;
            private DataColumn columnCompanyClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnCompanySize;
            private DataColumn columnCountryID;
            private DataColumn columnCurrencyID;
            private DataColumn columnDeleted;
            private DataColumn columnEmail;
            private DataColumn columnFax;
            private DataColumn columnFirstName;
            private DataColumn columnHomePhone;
            private DataColumn columnIndustryID;
            private DataColumn columnInternalNotes;
            private DataColumn columnInvoiceByEmail;
            private DataColumn columnInvoiceBySnailMail;
            private DataColumn columnLastName;
            private DataColumn columnLoginCredentials;
            private DataColumn columnMobile;
            private DataColumn columnOrganizationName;
            private DataColumn columnSecondaryAddress1;
            private DataColumn columnSecondaryAddress2;
            private DataColumn columnSecondaryCityID;
            private DataColumn columnSecondaryCountryID;
            private DataColumn columnSecondaryStateID;
            private DataColumn columnSecondaryZipCode;
            private DataColumn columnStateID;
            private DataColumn columnUserName;
            private DataColumn columnZipCode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientMasterRowChangeEventHandler CompanyClientMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientMasterRowChangeEventHandler CompanyClientMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientMasterRowChangeEventHandler CompanyClientMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyClientMasterRowChangeEventHandler CompanyClientMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyClientMasterDataTable()
            {
                base.TableName = "CompanyClientMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CompanyClientMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CompanyClientMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyClientMasterRow(CloudAccountDA.CompanyClientMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientMasterRow AddCompanyClientMasterRow(string OrganizationName, int CompanyID, int CurrencyID, bool InvoiceByEmail, bool InvoiceBySnailMail, string Email, string FirstName, string LastName, string HomePhone, string Mobile, bool LoginCredentials, string UserName, string Address1, string Address2, int CountryID, int StateID, int CityID, string ZipCode, string SecondaryAddress1, string SecondaryAddress2, int SecondaryCountryID, int SecondaryStateID, int SecondaryCityID, string SecondaryZipCode, int IndustryID, string CompanySize, string BussinessPhone, string Fax, string InternalNotes, bool Active, bool Archived, bool Deleted)
            {
                CloudAccountDA.CompanyClientMasterRow row = (CloudAccountDA.CompanyClientMasterRow) base.NewRow();
                object[] objArray2 = new object[0x21];
                objArray2[1] = OrganizationName;
                objArray2[2] = CompanyID;
                objArray2[3] = CurrencyID;
                objArray2[4] = InvoiceByEmail;
                objArray2[5] = InvoiceBySnailMail;
                objArray2[6] = Email;
                objArray2[7] = FirstName;
                objArray2[8] = LastName;
                objArray2[9] = HomePhone;
                objArray2[10] = Mobile;
                objArray2[11] = LoginCredentials;
                objArray2[12] = UserName;
                objArray2[13] = Address1;
                objArray2[14] = Address2;
                objArray2[15] = CountryID;
                objArray2[0x10] = StateID;
                objArray2[0x11] = CityID;
                objArray2[0x12] = ZipCode;
                objArray2[0x13] = SecondaryAddress1;
                objArray2[20] = SecondaryAddress2;
                objArray2[0x15] = SecondaryCountryID;
                objArray2[0x16] = SecondaryStateID;
                objArray2[0x17] = SecondaryCityID;
                objArray2[0x18] = SecondaryZipCode;
                objArray2[0x19] = IndustryID;
                objArray2[0x1a] = CompanySize;
                objArray2[0x1b] = BussinessPhone;
                objArray2[0x1c] = Fax;
                objArray2[0x1d] = InternalNotes;
                objArray2[30] = Active;
                objArray2[0x1f] = Archived;
                objArray2[0x20] = Deleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyClientMasterDataTable table = (CloudAccountDA.CompanyClientMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyClientMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyClientMasterRow FindByCompanyClientID(int CompanyClientID)
            {
                return (CloudAccountDA.CompanyClientMasterRow) base.Rows.Find(new object[] { CompanyClientID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyClientMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyClientMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCompanyClientID = new DataColumn("CompanyClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyClientID);
                this.columnOrganizationName = new DataColumn("OrganizationName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnOrganizationName);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnInvoiceByEmail = new DataColumn("InvoiceByEmail", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceByEmail);
                this.columnInvoiceBySnailMail = new DataColumn("InvoiceBySnailMail", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceBySnailMail);
                this.columnEmail = new DataColumn("Email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnHomePhone = new DataColumn("HomePhone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHomePhone);
                this.columnMobile = new DataColumn("Mobile", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMobile);
                this.columnLoginCredentials = new DataColumn("LoginCredentials", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnLoginCredentials);
                this.columnUserName = new DataColumn("UserName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnAddress1 = new DataColumn("Address1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new DataColumn("Address2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnStateID = new DataColumn("StateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStateID);
                this.columnCityID = new DataColumn("CityID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCityID);
                this.columnZipCode = new DataColumn("ZipCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnSecondaryAddress1 = new DataColumn("SecondaryAddress1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSecondaryAddress1);
                this.columnSecondaryAddress2 = new DataColumn("SecondaryAddress2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSecondaryAddress2);
                this.columnSecondaryCountryID = new DataColumn("SecondaryCountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSecondaryCountryID);
                this.columnSecondaryStateID = new DataColumn("SecondaryStateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSecondaryStateID);
                this.columnSecondaryCityID = new DataColumn("SecondaryCityID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSecondaryCityID);
                this.columnSecondaryZipCode = new DataColumn("SecondaryZipCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSecondaryZipCode);
                this.columnIndustryID = new DataColumn("IndustryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnIndustryID);
                this.columnCompanySize = new DataColumn("CompanySize", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanySize);
                this.columnBussinessPhone = new DataColumn("BussinessPhone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBussinessPhone);
                this.columnFax = new DataColumn("Fax", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnInternalNotes = new DataColumn("InternalNotes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInternalNotes);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyClientID }, true));
                this.columnCompanyClientID.AutoIncrement = true;
                this.columnCompanyClientID.AutoIncrementSeed = -1L;
                this.columnCompanyClientID.AutoIncrementStep = -1L;
                this.columnCompanyClientID.AllowDBNull = false;
                this.columnCompanyClientID.ReadOnly = true;
                this.columnCompanyClientID.Unique = true;
                this.columnOrganizationName.MaxLength = 200;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnHomePhone.MaxLength = 15;
                this.columnMobile.MaxLength = 10;
                this.columnUserName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnZipCode.MaxLength = 20;
                this.columnSecondaryAddress1.MaxLength = 50;
                this.columnSecondaryAddress2.MaxLength = 50;
                this.columnSecondaryZipCode.MaxLength = 20;
                this.columnCompanySize.MaxLength = 50;
                this.columnBussinessPhone.MaxLength = 20;
                this.columnFax.MaxLength = 20;
                this.columnInternalNotes.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCompanyClientID = base.Columns["CompanyClientID"];
                this.columnOrganizationName = base.Columns["OrganizationName"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnInvoiceByEmail = base.Columns["InvoiceByEmail"];
                this.columnInvoiceBySnailMail = base.Columns["InvoiceBySnailMail"];
                this.columnEmail = base.Columns["Email"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnHomePhone = base.Columns["HomePhone"];
                this.columnMobile = base.Columns["Mobile"];
                this.columnLoginCredentials = base.Columns["LoginCredentials"];
                this.columnUserName = base.Columns["UserName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnStateID = base.Columns["StateID"];
                this.columnCityID = base.Columns["CityID"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnSecondaryAddress1 = base.Columns["SecondaryAddress1"];
                this.columnSecondaryAddress2 = base.Columns["SecondaryAddress2"];
                this.columnSecondaryCountryID = base.Columns["SecondaryCountryID"];
                this.columnSecondaryStateID = base.Columns["SecondaryStateID"];
                this.columnSecondaryCityID = base.Columns["SecondaryCityID"];
                this.columnSecondaryZipCode = base.Columns["SecondaryZipCode"];
                this.columnIndustryID = base.Columns["IndustryID"];
                this.columnCompanySize = base.Columns["CompanySize"];
                this.columnBussinessPhone = base.Columns["BussinessPhone"];
                this.columnFax = base.Columns["Fax"];
                this.columnInternalNotes = base.Columns["InternalNotes"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientMasterRow NewCompanyClientMasterRow()
            {
                return (CloudAccountDA.CompanyClientMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyClientMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyClientMasterRowChanged != null)
                {
                    this.CompanyClientMasterRowChanged(this, new CloudAccountDA.CompanyClientMasterRowChangeEvent((CloudAccountDA.CompanyClientMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyClientMasterRowChanging != null)
                {
                    this.CompanyClientMasterRowChanging(this, new CloudAccountDA.CompanyClientMasterRowChangeEvent((CloudAccountDA.CompanyClientMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyClientMasterRowDeleted != null)
                {
                    this.CompanyClientMasterRowDeleted(this, new CloudAccountDA.CompanyClientMasterRowChangeEvent((CloudAccountDA.CompanyClientMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyClientMasterRowDeleting != null)
                {
                    this.CompanyClientMasterRowDeleting(this, new CloudAccountDA.CompanyClientMasterRowChangeEvent((CloudAccountDA.CompanyClientMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCompanyClientMasterRow(CloudAccountDA.CompanyClientMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BussinessPhoneColumn
            {
                get
                {
                    return this.columnBussinessPhone;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CityIDColumn
            {
                get
                {
                    return this.columnCityID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyClientIDColumn
            {
                get
                {
                    return this.columnCompanyClientID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanySizeColumn
            {
                get
                {
                    return this.columnCompanySize;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryIDColumn
            {
                get
                {
                    return this.columnCountryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CurrencyIDColumn
            {
                get
                {
                    return this.columnCurrencyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailColumn
            {
                get
                {
                    return this.columnEmail;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FaxColumn
            {
                get
                {
                    return this.columnFax;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FirstNameColumn
            {
                get
                {
                    return this.columnFirstName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HomePhoneColumn
            {
                get
                {
                    return this.columnHomePhone;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IndustryIDColumn
            {
                get
                {
                    return this.columnIndustryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InternalNotesColumn
            {
                get
                {
                    return this.columnInternalNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceByEmailColumn
            {
                get
                {
                    return this.columnInvoiceByEmail;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceBySnailMailColumn
            {
                get
                {
                    return this.columnInvoiceBySnailMail;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyClientMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn LastNameColumn
            {
                get
                {
                    return this.columnLastName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn LoginCredentialsColumn
            {
                get
                {
                    return this.columnLoginCredentials;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MobileColumn
            {
                get
                {
                    return this.columnMobile;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn OrganizationNameColumn
            {
                get
                {
                    return this.columnOrganizationName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SecondaryAddress1Column
            {
                get
                {
                    return this.columnSecondaryAddress1;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SecondaryAddress2Column
            {
                get
                {
                    return this.columnSecondaryAddress2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SecondaryCityIDColumn
            {
                get
                {
                    return this.columnSecondaryCityID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SecondaryCountryIDColumn
            {
                get
                {
                    return this.columnSecondaryCountryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SecondaryStateIDColumn
            {
                get
                {
                    return this.columnSecondaryStateID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SecondaryZipCodeColumn
            {
                get
                {
                    return this.columnSecondaryZipCode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StateIDColumn
            {
                get
                {
                    return this.columnStateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UserNameColumn
            {
                get
                {
                    return this.columnUserName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ZipCodeColumn
            {
                get
                {
                    return this.columnZipCode;
                }
            }
        }
        
        public class CompanyClientMasterRow : DataRow
        {
            private CloudAccountDA.CompanyClientMasterDataTable tableCompanyClientMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyClientMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyClientMaster = (CloudAccountDA.CompanyClientMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.ActiveColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAddress1Null()
            {
                return base.IsNull(this.tableCompanyClientMaster.Address1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAddress2Null()
            {
                return base.IsNull(this.tableCompanyClientMaster.Address2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBussinessPhoneNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.BussinessPhoneColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCityIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.CityIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCompanyIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.CompanyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanySizeNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.CompanySizeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCountryIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.CountryIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrencyIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.CurrencyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.DeletedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFaxNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.FaxColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFirstNameNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.FirstNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHomePhoneNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.HomePhoneColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIndustryIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.IndustryIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInternalNotesNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.InternalNotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceByEmailNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.InvoiceByEmailColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceBySnailMailNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.InvoiceBySnailMailColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastNameNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.LastNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLoginCredentialsNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.LoginCredentialsColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMobileNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.MobileColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsOrganizationNameNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.OrganizationNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSecondaryAddress1Null()
            {
                return base.IsNull(this.tableCompanyClientMaster.SecondaryAddress1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSecondaryAddress2Null()
            {
                return base.IsNull(this.tableCompanyClientMaster.SecondaryAddress2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSecondaryCityIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.SecondaryCityIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSecondaryCountryIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.SecondaryCountryIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSecondaryStateIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.SecondaryStateIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSecondaryZipCodeNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.SecondaryZipCodeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStateIDNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.StateIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsUserNameNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.UserNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsZipCodeNull()
            {
                return base.IsNull(this.tableCompanyClientMaster.ZipCodeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableCompanyClientMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddress1Null()
            {
                base[this.tableCompanyClientMaster.Address1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddress2Null()
            {
                base[this.tableCompanyClientMaster.Address2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetArchivedNull()
            {
                base[this.tableCompanyClientMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBussinessPhoneNull()
            {
                base[this.tableCompanyClientMaster.BussinessPhoneColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCityIDNull()
            {
                base[this.tableCompanyClientMaster.CityIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyIDNull()
            {
                base[this.tableCompanyClientMaster.CompanyIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanySizeNull()
            {
                base[this.tableCompanyClientMaster.CompanySizeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCountryIDNull()
            {
                base[this.tableCompanyClientMaster.CountryIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCurrencyIDNull()
            {
                base[this.tableCompanyClientMaster.CurrencyIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeletedNull()
            {
                base[this.tableCompanyClientMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFaxNull()
            {
                base[this.tableCompanyClientMaster.FaxColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFirstNameNull()
            {
                base[this.tableCompanyClientMaster.FirstNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHomePhoneNull()
            {
                base[this.tableCompanyClientMaster.HomePhoneColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIndustryIDNull()
            {
                base[this.tableCompanyClientMaster.IndustryIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInternalNotesNull()
            {
                base[this.tableCompanyClientMaster.InternalNotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoiceByEmailNull()
            {
                base[this.tableCompanyClientMaster.InvoiceByEmailColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceBySnailMailNull()
            {
                base[this.tableCompanyClientMaster.InvoiceBySnailMailColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastNameNull()
            {
                base[this.tableCompanyClientMaster.LastNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetLoginCredentialsNull()
            {
                base[this.tableCompanyClientMaster.LoginCredentialsColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetMobileNull()
            {
                base[this.tableCompanyClientMaster.MobileColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetOrganizationNameNull()
            {
                base[this.tableCompanyClientMaster.OrganizationNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSecondaryAddress1Null()
            {
                base[this.tableCompanyClientMaster.SecondaryAddress1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSecondaryAddress2Null()
            {
                base[this.tableCompanyClientMaster.SecondaryAddress2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSecondaryCityIDNull()
            {
                base[this.tableCompanyClientMaster.SecondaryCityIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSecondaryCountryIDNull()
            {
                base[this.tableCompanyClientMaster.SecondaryCountryIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSecondaryStateIDNull()
            {
                base[this.tableCompanyClientMaster.SecondaryStateIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSecondaryZipCodeNull()
            {
                base[this.tableCompanyClientMaster.SecondaryZipCodeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStateIDNull()
            {
                base[this.tableCompanyClientMaster.StateIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUserNameNull()
            {
                base[this.tableCompanyClientMaster.UserNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetZipCodeNull()
            {
                base[this.tableCompanyClientMaster.ZipCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientMaster.ActiveColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Address1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.Address1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address1' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.Address1Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Address2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.Address2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address2' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.Address2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientMaster.ArchivedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BussinessPhone
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.BussinessPhoneColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BussinessPhone' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.BussinessPhoneColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CityID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.CityIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CityID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.CityIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyClientID
            {
                get
                {
                    return (int) base[this.tableCompanyClientMaster.CompanyClientIDColumn];
                }
                set
                {
                    base[this.tableCompanyClientMaster.CompanyClientIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.CompanyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanySize
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.CompanySizeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanySize' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.CompanySizeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CountryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.CountryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CountryID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.CountryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CurrencyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.CurrencyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.CurrencyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientMaster.DeletedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Email
            {
                get
                {
                    return (string) base[this.tableCompanyClientMaster.EmailColumn];
                }
                set
                {
                    base[this.tableCompanyClientMaster.EmailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Fax
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.FaxColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Fax' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.FaxColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FirstName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.FirstNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FirstName' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.FirstNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string HomePhone
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.HomePhoneColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HomePhone' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.HomePhoneColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IndustryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.IndustryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'IndustryID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.IndustryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string InternalNotes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.InternalNotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InternalNotes' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.InternalNotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool InvoiceByEmail
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientMaster.InvoiceByEmailColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceByEmail' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientMaster.InvoiceByEmailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool InvoiceBySnailMail
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientMaster.InvoiceBySnailMailColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceBySnailMail' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientMaster.InvoiceBySnailMailColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string LastName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.LastNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LastName' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.LastNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool LoginCredentials
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyClientMaster.LoginCredentialsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LoginCredentials' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyClientMaster.LoginCredentialsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Mobile
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.MobileColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Mobile' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.MobileColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string OrganizationName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.OrganizationNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'OrganizationName' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.OrganizationNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SecondaryAddress1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.SecondaryAddress1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SecondaryAddress1' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.SecondaryAddress1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SecondaryAddress2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.SecondaryAddress2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SecondaryAddress2' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.SecondaryAddress2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SecondaryCityID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.SecondaryCityIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SecondaryCityID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.SecondaryCityIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int SecondaryCountryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.SecondaryCountryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SecondaryCountryID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.SecondaryCountryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SecondaryStateID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.SecondaryStateIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SecondaryStateID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.SecondaryStateIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SecondaryZipCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.SecondaryZipCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SecondaryZipCode' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.SecondaryZipCodeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int StateID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyClientMaster.StateIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'StateID' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyClientMaster.StateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string UserName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.UserNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UserName' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.UserNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ZipCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyClientMaster.ZipCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ZipCode' in table 'CompanyClientMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyClientMaster.ZipCodeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyClientMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyClientMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CompanyClientMasterRowChangeEvent(CloudAccountDA.CompanyClientMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyClientMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyClientMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyClientMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyLoginMasterDataTable : TypedTableBase<CloudAccountDA.CompanyLoginMasterRow>
        {
            private DataColumn columnCompanyEmail;
            private DataColumn columnCompanyID;
            private DataColumn columnCompanyLoginID;
            private DataColumn columnCompanyStatus;
            private DataColumn columnCompanyUserName;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyLoginMasterRowChangeEventHandler CompanyLoginMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyLoginMasterRowChangeEventHandler CompanyLoginMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyLoginMasterRowChangeEventHandler CompanyLoginMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyLoginMasterRowChangeEventHandler CompanyLoginMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CompanyLoginMasterDataTable()
            {
                base.TableName = "CompanyLoginMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyLoginMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CompanyLoginMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyLoginMasterRow(CloudAccountDA.CompanyLoginMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyLoginMasterRow AddCompanyLoginMasterRow(int CompanyID, string CompanyUserName, string CompanyEmail, bool CompanyStatus)
            {
                CloudAccountDA.CompanyLoginMasterRow row = (CloudAccountDA.CompanyLoginMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = CompanyID;
                objArray2[2] = CompanyUserName;
                objArray2[3] = CompanyEmail;
                objArray2[4] = CompanyStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyLoginMasterDataTable table = (CloudAccountDA.CompanyLoginMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyLoginMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyLoginMasterRow FindByCompanyLoginID(int CompanyLoginID)
            {
                return (CloudAccountDA.CompanyLoginMasterRow) base.Rows.Find(new object[] { CompanyLoginID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyLoginMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyLoginMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCompanyLoginID = new DataColumn("CompanyLoginID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyLoginID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCompanyUserName = new DataColumn("CompanyUserName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyUserName);
                this.columnCompanyEmail = new DataColumn("CompanyEmail", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyEmail);
                this.columnCompanyStatus = new DataColumn("CompanyStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyLoginID }, true));
                this.columnCompanyLoginID.AutoIncrement = true;
                this.columnCompanyLoginID.AutoIncrementSeed = -1L;
                this.columnCompanyLoginID.AutoIncrementStep = -1L;
                this.columnCompanyLoginID.AllowDBNull = false;
                this.columnCompanyLoginID.ReadOnly = true;
                this.columnCompanyLoginID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnCompanyUserName.AllowDBNull = false;
                this.columnCompanyUserName.MaxLength = 50;
                this.columnCompanyEmail.AllowDBNull = false;
                this.columnCompanyEmail.MaxLength = 50;
                this.columnCompanyStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCompanyLoginID = base.Columns["CompanyLoginID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCompanyUserName = base.Columns["CompanyUserName"];
                this.columnCompanyEmail = base.Columns["CompanyEmail"];
                this.columnCompanyStatus = base.Columns["CompanyStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyLoginMasterRow NewCompanyLoginMasterRow()
            {
                return (CloudAccountDA.CompanyLoginMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyLoginMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyLoginMasterRowChanged != null)
                {
                    this.CompanyLoginMasterRowChanged(this, new CloudAccountDA.CompanyLoginMasterRowChangeEvent((CloudAccountDA.CompanyLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyLoginMasterRowChanging != null)
                {
                    this.CompanyLoginMasterRowChanging(this, new CloudAccountDA.CompanyLoginMasterRowChangeEvent((CloudAccountDA.CompanyLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyLoginMasterRowDeleted != null)
                {
                    this.CompanyLoginMasterRowDeleted(this, new CloudAccountDA.CompanyLoginMasterRowChangeEvent((CloudAccountDA.CompanyLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyLoginMasterRowDeleting != null)
                {
                    this.CompanyLoginMasterRowDeleting(this, new CloudAccountDA.CompanyLoginMasterRowChangeEvent((CloudAccountDA.CompanyLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCompanyLoginMasterRow(CloudAccountDA.CompanyLoginMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyEmailColumn
            {
                get
                {
                    return this.columnCompanyEmail;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyLoginIDColumn
            {
                get
                {
                    return this.columnCompanyLoginID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyStatusColumn
            {
                get
                {
                    return this.columnCompanyStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyUserNameColumn
            {
                get
                {
                    return this.columnCompanyUserName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyLoginMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyLoginMasterRow) base.Rows[index];
                }
            }
        }
        
        public class CompanyLoginMasterRow : DataRow
        {
            private CloudAccountDA.CompanyLoginMasterDataTable tableCompanyLoginMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CompanyLoginMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyLoginMaster = (CloudAccountDA.CompanyLoginMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyEmail
            {
                get
                {
                    return (string) base[this.tableCompanyLoginMaster.CompanyEmailColumn];
                }
                set
                {
                    base[this.tableCompanyLoginMaster.CompanyEmailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCompanyLoginMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCompanyLoginMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyLoginID
            {
                get
                {
                    return (int) base[this.tableCompanyLoginMaster.CompanyLoginIDColumn];
                }
                set
                {
                    base[this.tableCompanyLoginMaster.CompanyLoginIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool CompanyStatus
            {
                get
                {
                    return (bool) base[this.tableCompanyLoginMaster.CompanyStatusColumn];
                }
                set
                {
                    base[this.tableCompanyLoginMaster.CompanyStatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyUserName
            {
                get
                {
                    return (string) base[this.tableCompanyLoginMaster.CompanyUserNameColumn];
                }
                set
                {
                    base[this.tableCompanyLoginMaster.CompanyUserNameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyLoginMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyLoginMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyLoginMasterRowChangeEvent(CloudAccountDA.CompanyLoginMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyLoginMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyLoginMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyLoginMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyMasterDataTable : TypedTableBase<CloudAccountDA.CompanyMasterRow>
        {
            private DataColumn columnAccountURL;
            private DataColumn columnBillingRate;
            private DataColumn columnBussinessID;
            private DataColumn columnCompanyAddressStreet1;
            private DataColumn columnCompanyAddressStreet2;
            private DataColumn columnCompanyCityID;
            private DataColumn columnCompanyContactPerson;
            private DataColumn columnCompanyContactPersonNumber;
            private DataColumn columnCompanyCountryID;
            private DataColumn columnCompanyEmail;
            private DataColumn columnCompanyFax;
            private DataColumn columnCompanyID;
            private DataColumn columnCompanyLogo;
            private DataColumn columnCompanyLogoContentType;
            private DataColumn columnCompanyName;
            private DataColumn columnCompanyNotes;
            private DataColumn columnCompanyPhone;
            private DataColumn columnCompanyStateID;
            private DataColumn columnCompanyUserName;
            private DataColumn columnCompanyZipCode;
            private DataColumn columnCurrencyID;
            private DataColumn columnCurrentAccountID;
            private DataColumn columnIndustryID;
            private DataColumn columnObserveDaylight;
            private DataColumn columnRunningID;
            private DataColumn columnTimeZone;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyMasterRowChangeEventHandler CompanyMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyMasterRowChangeEventHandler CompanyMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyMasterRowChangeEventHandler CompanyMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyMasterRowChangeEventHandler CompanyMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CompanyMasterDataTable()
            {
                base.TableName = "CompanyMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CompanyMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCompanyMasterRow(CloudAccountDA.CompanyMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyMasterRow AddCompanyMasterRow(string CompanyUserName, string CompanyName, string CompanyContactPerson, string CompanyContactPersonNumber, decimal BillingRate, int BussinessID, int IndustryID, int CurrentAccountID, int RunningID, int CurrencyID, string CompanyPhone, string CompanyFax, string CompanyEmail, string CompanyAddressStreet1, string CompanyAddressStreet2, int CompanyCountryID, int CompanyStateID, int CompanyCityID, string CompanyZipCode, string CompanyLogoContentType, byte[] CompanyLogo, string CompanyNotes, string TimeZone, bool ObserveDaylight, string AccountURL)
            {
                CloudAccountDA.CompanyMasterRow row = (CloudAccountDA.CompanyMasterRow) base.NewRow();
                object[] objArray2 = new object[0x1a];
                objArray2[1] = CompanyUserName;
                objArray2[2] = CompanyName;
                objArray2[3] = CompanyContactPerson;
                objArray2[4] = CompanyContactPersonNumber;
                objArray2[5] = BillingRate;
                objArray2[6] = BussinessID;
                objArray2[7] = IndustryID;
                objArray2[8] = CurrentAccountID;
                objArray2[9] = RunningID;
                objArray2[10] = CurrencyID;
                objArray2[11] = CompanyPhone;
                objArray2[12] = CompanyFax;
                objArray2[13] = CompanyEmail;
                objArray2[14] = CompanyAddressStreet1;
                objArray2[15] = CompanyAddressStreet2;
                objArray2[0x10] = CompanyCountryID;
                objArray2[0x11] = CompanyStateID;
                objArray2[0x12] = CompanyCityID;
                objArray2[0x13] = CompanyZipCode;
                objArray2[20] = CompanyLogoContentType;
                objArray2[0x15] = CompanyLogo;
                objArray2[0x16] = CompanyNotes;
                objArray2[0x17] = TimeZone;
                objArray2[0x18] = ObserveDaylight;
                objArray2[0x19] = AccountURL;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyMasterDataTable table = (CloudAccountDA.CompanyMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyMasterRow FindByCompanyID(int CompanyID)
            {
                return (CloudAccountDA.CompanyMasterRow) base.Rows.Find(new object[] { CompanyID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCompanyUserName = new DataColumn("CompanyUserName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyUserName);
                this.columnCompanyName = new DataColumn("CompanyName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnCompanyContactPerson = new DataColumn("CompanyContactPerson", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyContactPerson);
                this.columnCompanyContactPersonNumber = new DataColumn("CompanyContactPersonNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyContactPersonNumber);
                this.columnBillingRate = new DataColumn("BillingRate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnBillingRate);
                this.columnBussinessID = new DataColumn("BussinessID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnBussinessID);
                this.columnIndustryID = new DataColumn("IndustryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnIndustryID);
                this.columnCurrentAccountID = new DataColumn("CurrentAccountID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrentAccountID);
                this.columnRunningID = new DataColumn("RunningID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnRunningID);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnCompanyPhone = new DataColumn("CompanyPhone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyPhone);
                this.columnCompanyFax = new DataColumn("CompanyFax", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyFax);
                this.columnCompanyEmail = new DataColumn("CompanyEmail", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyEmail);
                this.columnCompanyAddressStreet1 = new DataColumn("CompanyAddressStreet1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyAddressStreet1);
                this.columnCompanyAddressStreet2 = new DataColumn("CompanyAddressStreet2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyAddressStreet2);
                this.columnCompanyCountryID = new DataColumn("CompanyCountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyCountryID);
                this.columnCompanyStateID = new DataColumn("CompanyStateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyStateID);
                this.columnCompanyCityID = new DataColumn("CompanyCityID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyCityID);
                this.columnCompanyZipCode = new DataColumn("CompanyZipCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyZipCode);
                this.columnCompanyLogoContentType = new DataColumn("CompanyLogoContentType", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyLogoContentType);
                this.columnCompanyLogo = new DataColumn("CompanyLogo", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyLogo);
                this.columnCompanyNotes = new DataColumn("CompanyNotes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyNotes);
                this.columnTimeZone = new DataColumn("TimeZone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTimeZone);
                this.columnObserveDaylight = new DataColumn("ObserveDaylight", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnObserveDaylight);
                this.columnAccountURL = new DataColumn("AccountURL", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAccountURL);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyID }, true));
                this.columnCompanyID.AutoIncrement = true;
                this.columnCompanyID.AutoIncrementSeed = -1L;
                this.columnCompanyID.AutoIncrementStep = -1L;
                this.columnCompanyID.AllowDBNull = false;
                this.columnCompanyID.ReadOnly = true;
                this.columnCompanyID.Unique = true;
                this.columnCompanyUserName.AllowDBNull = false;
                this.columnCompanyUserName.MaxLength = 50;
                this.columnCompanyName.AllowDBNull = false;
                this.columnCompanyName.MaxLength = 300;
                this.columnCompanyContactPerson.AllowDBNull = false;
                this.columnCompanyContactPerson.MaxLength = 100;
                this.columnCompanyContactPersonNumber.AllowDBNull = false;
                this.columnCompanyContactPersonNumber.MaxLength = 50;
                this.columnCompanyPhone.MaxLength = 50;
                this.columnCompanyFax.MaxLength = 50;
                this.columnCompanyEmail.AllowDBNull = false;
                this.columnCompanyEmail.MaxLength = 50;
                this.columnCompanyAddressStreet1.MaxLength = 50;
                this.columnCompanyAddressStreet2.MaxLength = 50;
                this.columnCompanyZipCode.MaxLength = 50;
                this.columnCompanyLogoContentType.MaxLength = 50;
                this.columnCompanyNotes.MaxLength = 100;
                this.columnTimeZone.MaxLength = 500;
                this.columnAccountURL.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCompanyUserName = base.Columns["CompanyUserName"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnCompanyContactPerson = base.Columns["CompanyContactPerson"];
                this.columnCompanyContactPersonNumber = base.Columns["CompanyContactPersonNumber"];
                this.columnBillingRate = base.Columns["BillingRate"];
                this.columnBussinessID = base.Columns["BussinessID"];
                this.columnIndustryID = base.Columns["IndustryID"];
                this.columnCurrentAccountID = base.Columns["CurrentAccountID"];
                this.columnRunningID = base.Columns["RunningID"];
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnCompanyPhone = base.Columns["CompanyPhone"];
                this.columnCompanyFax = base.Columns["CompanyFax"];
                this.columnCompanyEmail = base.Columns["CompanyEmail"];
                this.columnCompanyAddressStreet1 = base.Columns["CompanyAddressStreet1"];
                this.columnCompanyAddressStreet2 = base.Columns["CompanyAddressStreet2"];
                this.columnCompanyCountryID = base.Columns["CompanyCountryID"];
                this.columnCompanyStateID = base.Columns["CompanyStateID"];
                this.columnCompanyCityID = base.Columns["CompanyCityID"];
                this.columnCompanyZipCode = base.Columns["CompanyZipCode"];
                this.columnCompanyLogoContentType = base.Columns["CompanyLogoContentType"];
                this.columnCompanyLogo = base.Columns["CompanyLogo"];
                this.columnCompanyNotes = base.Columns["CompanyNotes"];
                this.columnTimeZone = base.Columns["TimeZone"];
                this.columnObserveDaylight = base.Columns["ObserveDaylight"];
                this.columnAccountURL = base.Columns["AccountURL"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyMasterRow NewCompanyMasterRow()
            {
                return (CloudAccountDA.CompanyMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyMasterRowChanged != null)
                {
                    this.CompanyMasterRowChanged(this, new CloudAccountDA.CompanyMasterRowChangeEvent((CloudAccountDA.CompanyMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyMasterRowChanging != null)
                {
                    this.CompanyMasterRowChanging(this, new CloudAccountDA.CompanyMasterRowChangeEvent((CloudAccountDA.CompanyMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyMasterRowDeleted != null)
                {
                    this.CompanyMasterRowDeleted(this, new CloudAccountDA.CompanyMasterRowChangeEvent((CloudAccountDA.CompanyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyMasterRowDeleting != null)
                {
                    this.CompanyMasterRowDeleting(this, new CloudAccountDA.CompanyMasterRowChangeEvent((CloudAccountDA.CompanyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCompanyMasterRow(CloudAccountDA.CompanyMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AccountURLColumn
            {
                get
                {
                    return this.columnAccountURL;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BillingRateColumn
            {
                get
                {
                    return this.columnBillingRate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BussinessIDColumn
            {
                get
                {
                    return this.columnBussinessID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyAddressStreet1Column
            {
                get
                {
                    return this.columnCompanyAddressStreet1;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyAddressStreet2Column
            {
                get
                {
                    return this.columnCompanyAddressStreet2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyCityIDColumn
            {
                get
                {
                    return this.columnCompanyCityID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyContactPersonColumn
            {
                get
                {
                    return this.columnCompanyContactPerson;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyContactPersonNumberColumn
            {
                get
                {
                    return this.columnCompanyContactPersonNumber;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyCountryIDColumn
            {
                get
                {
                    return this.columnCompanyCountryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyEmailColumn
            {
                get
                {
                    return this.columnCompanyEmail;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyFaxColumn
            {
                get
                {
                    return this.columnCompanyFax;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyLogoColumn
            {
                get
                {
                    return this.columnCompanyLogo;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyLogoContentTypeColumn
            {
                get
                {
                    return this.columnCompanyLogoContentType;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyNameColumn
            {
                get
                {
                    return this.columnCompanyName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyNotesColumn
            {
                get
                {
                    return this.columnCompanyNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyPhoneColumn
            {
                get
                {
                    return this.columnCompanyPhone;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyStateIDColumn
            {
                get
                {
                    return this.columnCompanyStateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyUserNameColumn
            {
                get
                {
                    return this.columnCompanyUserName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyZipCodeColumn
            {
                get
                {
                    return this.columnCompanyZipCode;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CurrencyIDColumn
            {
                get
                {
                    return this.columnCurrencyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrentAccountIDColumn
            {
                get
                {
                    return this.columnCurrentAccountID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn IndustryIDColumn
            {
                get
                {
                    return this.columnIndustryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ObserveDaylightColumn
            {
                get
                {
                    return this.columnObserveDaylight;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RunningIDColumn
            {
                get
                {
                    return this.columnRunningID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TimeZoneColumn
            {
                get
                {
                    return this.columnTimeZone;
                }
            }
        }
        
        public class CompanyMasterRow : DataRow
        {
            private CloudAccountDA.CompanyMasterDataTable tableCompanyMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyMaster = (CloudAccountDA.CompanyMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAccountURLNull()
            {
                return base.IsNull(this.tableCompanyMaster.AccountURLColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsBillingRateNull()
            {
                return base.IsNull(this.tableCompanyMaster.BillingRateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsBussinessIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.BussinessIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCompanyAddressStreet1Null()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyAddressStreet1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCompanyAddressStreet2Null()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyAddressStreet2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCompanyCityIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyCityIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCompanyCountryIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyCountryIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyFaxNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyFaxColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyLogoContentTypeNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyLogoContentTypeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyLogoNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyLogoColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyNotesNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyNotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyPhoneNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyPhoneColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyStateIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyStateIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCompanyZipCodeNull()
            {
                return base.IsNull(this.tableCompanyMaster.CompanyZipCodeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrencyIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.CurrencyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrentAccountIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.CurrentAccountIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsIndustryIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.IndustryIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsObserveDaylightNull()
            {
                return base.IsNull(this.tableCompanyMaster.ObserveDaylightColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRunningIDNull()
            {
                return base.IsNull(this.tableCompanyMaster.RunningIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTimeZoneNull()
            {
                return base.IsNull(this.tableCompanyMaster.TimeZoneColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAccountURLNull()
            {
                base[this.tableCompanyMaster.AccountURLColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBillingRateNull()
            {
                base[this.tableCompanyMaster.BillingRateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBussinessIDNull()
            {
                base[this.tableCompanyMaster.BussinessIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyAddressStreet1Null()
            {
                base[this.tableCompanyMaster.CompanyAddressStreet1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyAddressStreet2Null()
            {
                base[this.tableCompanyMaster.CompanyAddressStreet2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyCityIDNull()
            {
                base[this.tableCompanyMaster.CompanyCityIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyCountryIDNull()
            {
                base[this.tableCompanyMaster.CompanyCountryIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyFaxNull()
            {
                base[this.tableCompanyMaster.CompanyFaxColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyLogoContentTypeNull()
            {
                base[this.tableCompanyMaster.CompanyLogoContentTypeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyLogoNull()
            {
                base[this.tableCompanyMaster.CompanyLogoColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyNotesNull()
            {
                base[this.tableCompanyMaster.CompanyNotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyPhoneNull()
            {
                base[this.tableCompanyMaster.CompanyPhoneColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyStateIDNull()
            {
                base[this.tableCompanyMaster.CompanyStateIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyZipCodeNull()
            {
                base[this.tableCompanyMaster.CompanyZipCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCurrencyIDNull()
            {
                base[this.tableCompanyMaster.CurrencyIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCurrentAccountIDNull()
            {
                base[this.tableCompanyMaster.CurrentAccountIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIndustryIDNull()
            {
                base[this.tableCompanyMaster.IndustryIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetObserveDaylightNull()
            {
                base[this.tableCompanyMaster.ObserveDaylightColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRunningIDNull()
            {
                base[this.tableCompanyMaster.RunningIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTimeZoneNull()
            {
                base[this.tableCompanyMaster.TimeZoneColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AccountURL
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.AccountURLColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AccountURL' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.AccountURLColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal BillingRate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCompanyMaster.BillingRateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BillingRate' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.BillingRateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int BussinessID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.BussinessIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BussinessID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.BussinessIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyAddressStreet1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.CompanyAddressStreet1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyAddressStreet1' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyAddressStreet1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyAddressStreet2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.CompanyAddressStreet2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyAddressStreet2' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyAddressStreet2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyCityID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.CompanyCityIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyCityID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyCityIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyContactPerson
            {
                get
                {
                    return (string) base[this.tableCompanyMaster.CompanyContactPersonColumn];
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyContactPersonColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyContactPersonNumber
            {
                get
                {
                    return (string) base[this.tableCompanyMaster.CompanyContactPersonNumberColumn];
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyContactPersonNumberColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyCountryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.CompanyCountryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyCountryID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyCountryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyEmail
            {
                get
                {
                    return (string) base[this.tableCompanyMaster.CompanyEmailColumn];
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyEmailColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyFax
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.CompanyFaxColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyFax' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyFaxColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCompanyMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] CompanyLogo
            {
                get
                {
                    byte[] buffer;
                    try
                    {
                        buffer = (byte[]) base[this.tableCompanyMaster.CompanyLogoColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyLogo' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return buffer;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyLogoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyLogoContentType
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.CompanyLogoContentTypeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyLogoContentType' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyLogoContentTypeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyName
            {
                get
                {
                    return (string) base[this.tableCompanyMaster.CompanyNameColumn];
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyNotes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.CompanyNotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyNotes' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyNotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyPhone
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.CompanyPhoneColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyPhone' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyPhoneColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyStateID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.CompanyStateIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyStateID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyStateIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompanyUserName
            {
                get
                {
                    return (string) base[this.tableCompanyMaster.CompanyUserNameColumn];
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyUserNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyZipCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.CompanyZipCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyZipCode' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.CompanyZipCodeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CurrencyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.CurrencyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.CurrencyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CurrentAccountID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.CurrentAccountIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrentAccountID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.CurrentAccountIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int IndustryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.IndustryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'IndustryID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.IndustryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ObserveDaylight
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyMaster.ObserveDaylightColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ObserveDaylight' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyMaster.ObserveDaylightColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int RunningID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyMaster.RunningIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RunningID' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyMaster.RunningIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TimeZone
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyMaster.TimeZoneColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TimeZone' in table 'CompanyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyMaster.TimeZoneColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyMasterRowChangeEvent(CloudAccountDA.CompanyMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyPackageDetailsDataTable : TypedTableBase<CloudAccountDA.CompanyPackageDetailsRow>
        {
            private DataColumn columnActivePackage;
            private DataColumn columnCompanyID;
            private DataColumn columnCompanyPackageID;
            private DataColumn columnPackageAssignDate;
            private DataColumn columnPackageEndDate;
            private DataColumn columnPackageID;
            private DataColumn columnPackageMonthlyAmount;
            private DataColumn columnPackagePaid;
            private DataColumn columnPackagePaidAmount;
            private DataColumn columnPackagePaymentTransDate;
            private DataColumn columnPackagePaymentTransDetail;
            private DataColumn columnPackageStartDate;
            private DataColumn columnPackageYearlyAmount;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageDetailsRowChangeEventHandler CompanyPackageDetailsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageDetailsRowChangeEventHandler CompanyPackageDetailsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageDetailsRowChangeEventHandler CompanyPackageDetailsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageDetailsRowChangeEventHandler CompanyPackageDetailsRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CompanyPackageDetailsDataTable()
            {
                base.TableName = "CompanyPackageDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyPackageDetailsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CompanyPackageDetailsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCompanyPackageDetailsRow(CloudAccountDA.CompanyPackageDetailsRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPackageDetailsRow AddCompanyPackageDetailsRow(int CompanyID, int PackageID, DateTime PackageStartDate, DateTime PackageEndDate, decimal PackageMonthlyAmount, decimal PackageYearlyAmount, bool PackagePaid, decimal PackagePaidAmount, string PackagePaymentTransDetail, DateTime PackagePaymentTransDate, DateTime PackageAssignDate, bool ActivePackage)
            {
                CloudAccountDA.CompanyPackageDetailsRow row = (CloudAccountDA.CompanyPackageDetailsRow) base.NewRow();
                object[] objArray2 = new object[13];
                objArray2[1] = CompanyID;
                objArray2[2] = PackageID;
                objArray2[3] = PackageStartDate;
                objArray2[4] = PackageEndDate;
                objArray2[5] = PackageMonthlyAmount;
                objArray2[6] = PackageYearlyAmount;
                objArray2[7] = PackagePaid;
                objArray2[8] = PackagePaidAmount;
                objArray2[9] = PackagePaymentTransDetail;
                objArray2[10] = PackagePaymentTransDate;
                objArray2[11] = PackageAssignDate;
                objArray2[12] = ActivePackage;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyPackageDetailsDataTable table = (CloudAccountDA.CompanyPackageDetailsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyPackageDetailsDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPackageDetailsRow FindByCompanyPackageID(int CompanyPackageID)
            {
                return (CloudAccountDA.CompanyPackageDetailsRow) base.Rows.Find(new object[] { CompanyPackageID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyPackageDetailsRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyPackageDetailsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCompanyPackageID = new DataColumn("CompanyPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyPackageID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnPackageID = new DataColumn("PackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnPackageStartDate = new DataColumn("PackageStartDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageStartDate);
                this.columnPackageEndDate = new DataColumn("PackageEndDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageEndDate);
                this.columnPackageMonthlyAmount = new DataColumn("PackageMonthlyAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPackageMonthlyAmount);
                this.columnPackageYearlyAmount = new DataColumn("PackageYearlyAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPackageYearlyAmount);
                this.columnPackagePaid = new DataColumn("PackagePaid", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPackagePaid);
                this.columnPackagePaidAmount = new DataColumn("PackagePaidAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPackagePaidAmount);
                this.columnPackagePaymentTransDetail = new DataColumn("PackagePaymentTransDetail", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackagePaymentTransDetail);
                this.columnPackagePaymentTransDate = new DataColumn("PackagePaymentTransDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackagePaymentTransDate);
                this.columnPackageAssignDate = new DataColumn("PackageAssignDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageAssignDate);
                this.columnActivePackage = new DataColumn("ActivePackage", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActivePackage);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyPackageID }, true));
                this.columnCompanyPackageID.AutoIncrement = true;
                this.columnCompanyPackageID.AutoIncrementSeed = -1L;
                this.columnCompanyPackageID.AutoIncrementStep = -1L;
                this.columnCompanyPackageID.AllowDBNull = false;
                this.columnCompanyPackageID.ReadOnly = true;
                this.columnCompanyPackageID.Unique = true;
                this.columnPackagePaymentTransDetail.MaxLength = 200;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCompanyPackageID = base.Columns["CompanyPackageID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnPackageID = base.Columns["PackageID"];
                this.columnPackageStartDate = base.Columns["PackageStartDate"];
                this.columnPackageEndDate = base.Columns["PackageEndDate"];
                this.columnPackageMonthlyAmount = base.Columns["PackageMonthlyAmount"];
                this.columnPackageYearlyAmount = base.Columns["PackageYearlyAmount"];
                this.columnPackagePaid = base.Columns["PackagePaid"];
                this.columnPackagePaidAmount = base.Columns["PackagePaidAmount"];
                this.columnPackagePaymentTransDetail = base.Columns["PackagePaymentTransDetail"];
                this.columnPackagePaymentTransDate = base.Columns["PackagePaymentTransDate"];
                this.columnPackageAssignDate = base.Columns["PackageAssignDate"];
                this.columnActivePackage = base.Columns["ActivePackage"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPackageDetailsRow NewCompanyPackageDetailsRow()
            {
                return (CloudAccountDA.CompanyPackageDetailsRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyPackageDetailsRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyPackageDetailsRowChanged != null)
                {
                    this.CompanyPackageDetailsRowChanged(this, new CloudAccountDA.CompanyPackageDetailsRowChangeEvent((CloudAccountDA.CompanyPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyPackageDetailsRowChanging != null)
                {
                    this.CompanyPackageDetailsRowChanging(this, new CloudAccountDA.CompanyPackageDetailsRowChangeEvent((CloudAccountDA.CompanyPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyPackageDetailsRowDeleted != null)
                {
                    this.CompanyPackageDetailsRowDeleted(this, new CloudAccountDA.CompanyPackageDetailsRowChangeEvent((CloudAccountDA.CompanyPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyPackageDetailsRowDeleting != null)
                {
                    this.CompanyPackageDetailsRowDeleting(this, new CloudAccountDA.CompanyPackageDetailsRowChangeEvent((CloudAccountDA.CompanyPackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCompanyPackageDetailsRow(CloudAccountDA.CompanyPackageDetailsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ActivePackageColumn
            {
                get
                {
                    return this.columnActivePackage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyPackageIDColumn
            {
                get
                {
                    return this.columnCompanyPackageID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPackageDetailsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyPackageDetailsRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageAssignDateColumn
            {
                get
                {
                    return this.columnPackageAssignDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageEndDateColumn
            {
                get
                {
                    return this.columnPackageEndDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageIDColumn
            {
                get
                {
                    return this.columnPackageID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageMonthlyAmountColumn
            {
                get
                {
                    return this.columnPackageMonthlyAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackagePaidAmountColumn
            {
                get
                {
                    return this.columnPackagePaidAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackagePaidColumn
            {
                get
                {
                    return this.columnPackagePaid;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackagePaymentTransDateColumn
            {
                get
                {
                    return this.columnPackagePaymentTransDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackagePaymentTransDetailColumn
            {
                get
                {
                    return this.columnPackagePaymentTransDetail;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageStartDateColumn
            {
                get
                {
                    return this.columnPackageStartDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageYearlyAmountColumn
            {
                get
                {
                    return this.columnPackageYearlyAmount;
                }
            }
        }
        
        public class CompanyPackageDetailsRow : DataRow
        {
            private CloudAccountDA.CompanyPackageDetailsDataTable tableCompanyPackageDetails;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyPackageDetailsRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyPackageDetails = (CloudAccountDA.CompanyPackageDetailsDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsActivePackageNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.ActivePackageColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyIDNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.CompanyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageAssignDateNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackageAssignDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageEndDateNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackageEndDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageIDNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackageIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageMonthlyAmountNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackageMonthlyAmountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackagePaidAmountNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackagePaidAmountColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackagePaidNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackagePaidColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackagePaymentTransDateNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackagePaymentTransDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackagePaymentTransDetailNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackagePaymentTransDetailColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageStartDateNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackageStartDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageYearlyAmountNull()
            {
                return base.IsNull(this.tableCompanyPackageDetails.PackageYearlyAmountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetActivePackageNull()
            {
                base[this.tableCompanyPackageDetails.ActivePackageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyIDNull()
            {
                base[this.tableCompanyPackageDetails.CompanyIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageAssignDateNull()
            {
                base[this.tableCompanyPackageDetails.PackageAssignDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageEndDateNull()
            {
                base[this.tableCompanyPackageDetails.PackageEndDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageIDNull()
            {
                base[this.tableCompanyPackageDetails.PackageIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageMonthlyAmountNull()
            {
                base[this.tableCompanyPackageDetails.PackageMonthlyAmountColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackagePaidAmountNull()
            {
                base[this.tableCompanyPackageDetails.PackagePaidAmountColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackagePaidNull()
            {
                base[this.tableCompanyPackageDetails.PackagePaidColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackagePaymentTransDateNull()
            {
                base[this.tableCompanyPackageDetails.PackagePaymentTransDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackagePaymentTransDetailNull()
            {
                base[this.tableCompanyPackageDetails.PackagePaymentTransDetailColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageStartDateNull()
            {
                base[this.tableCompanyPackageDetails.PackageStartDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackageYearlyAmountNull()
            {
                base[this.tableCompanyPackageDetails.PackageYearlyAmountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ActivePackage
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyPackageDetails.ActivePackageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ActivePackage' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.ActivePackageColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyPackageDetails.CompanyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyID' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyPackageID
            {
                get
                {
                    return (int) base[this.tableCompanyPackageDetails.CompanyPackageIDColumn];
                }
                set
                {
                    base[this.tableCompanyPackageDetails.CompanyPackageIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime PackageAssignDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCompanyPackageDetails.PackageAssignDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageAssignDate' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackageAssignDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime PackageEndDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCompanyPackageDetails.PackageEndDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageEndDate' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackageEndDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int PackageID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyPackageDetails.PackageIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageID' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackageIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal PackageMonthlyAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCompanyPackageDetails.PackageMonthlyAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageMonthlyAmount' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackageMonthlyAmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PackagePaid
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableCompanyPackageDetails.PackagePaidColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackagePaid' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackagePaidColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PackagePaidAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCompanyPackageDetails.PackagePaidAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackagePaidAmount' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackagePaidAmountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime PackagePaymentTransDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCompanyPackageDetails.PackagePaymentTransDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackagePaymentTransDate' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackagePaymentTransDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PackagePaymentTransDetail
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyPackageDetails.PackagePaymentTransDetailColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackagePaymentTransDetail' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackagePaymentTransDetailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime PackageStartDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCompanyPackageDetails.PackageStartDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageStartDate' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackageStartDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal PackageYearlyAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCompanyPackageDetails.PackageYearlyAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageYearlyAmount' in table 'CompanyPackageDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyPackageDetails.PackageYearlyAmountColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyPackageDetailsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyPackageDetailsRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyPackageDetailsRowChangeEvent(CloudAccountDA.CompanyPackageDetailsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPackageDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyPackageDetailsRowChangeEventHandler(object sender, CloudAccountDA.CompanyPackageDetailsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyPackageMasterDataTable : TypedTableBase<CloudAccountDA.CompanyPackageMasterRow>
        {
            private DataColumn columnActivePackage;
            private DataColumn columnCloudPackageID;
            private DataColumn columnCompanyID;
            private DataColumn columnCompanyPackageID;
            private DataColumn columnPackageAmount;
            private DataColumn columnPackageAssignDate;
            private DataColumn columnPackageEndDate;
            private DataColumn columnPackagePaymentTransDate;
            private DataColumn columnPackagePaymentTransDetail;
            private DataColumn columnPackageStartDate;
            private DataColumn columnPackageType;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageMasterRowChangeEventHandler CompanyPackageMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageMasterRowChangeEventHandler CompanyPackageMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageMasterRowChangeEventHandler CompanyPackageMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPackageMasterRowChangeEventHandler CompanyPackageMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyPackageMasterDataTable()
            {
                base.TableName = "CompanyPackageMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CompanyPackageMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CompanyPackageMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyPackageMasterRow(CloudAccountDA.CompanyPackageMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPackageMasterRow AddCompanyPackageMasterRow(int CompanyID, int CloudPackageID, DateTime PackageStartDate, DateTime PackageEndDate, string PackageType, decimal PackageAmount, string PackagePaymentTransDetail, DateTime PackagePaymentTransDate, DateTime PackageAssignDate, bool ActivePackage)
            {
                CloudAccountDA.CompanyPackageMasterRow row = (CloudAccountDA.CompanyPackageMasterRow) base.NewRow();
                object[] objArray2 = new object[11];
                objArray2[1] = CompanyID;
                objArray2[2] = CloudPackageID;
                objArray2[3] = PackageStartDate;
                objArray2[4] = PackageEndDate;
                objArray2[5] = PackageType;
                objArray2[6] = PackageAmount;
                objArray2[7] = PackagePaymentTransDetail;
                objArray2[8] = PackagePaymentTransDate;
                objArray2[9] = PackageAssignDate;
                objArray2[10] = ActivePackage;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyPackageMasterDataTable table = (CloudAccountDA.CompanyPackageMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyPackageMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPackageMasterRow FindByCompanyPackageID(int CompanyPackageID)
            {
                return (CloudAccountDA.CompanyPackageMasterRow) base.Rows.Find(new object[] { CompanyPackageID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyPackageMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyPackageMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCompanyPackageID = new DataColumn("CompanyPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyPackageID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCloudPackageID = new DataColumn("CloudPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageID);
                this.columnPackageStartDate = new DataColumn("PackageStartDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageStartDate);
                this.columnPackageEndDate = new DataColumn("PackageEndDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageEndDate);
                this.columnPackageType = new DataColumn("PackageType", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageType);
                this.columnPackageAmount = new DataColumn("PackageAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPackageAmount);
                this.columnPackagePaymentTransDetail = new DataColumn("PackagePaymentTransDetail", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackagePaymentTransDetail);
                this.columnPackagePaymentTransDate = new DataColumn("PackagePaymentTransDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackagePaymentTransDate);
                this.columnPackageAssignDate = new DataColumn("PackageAssignDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageAssignDate);
                this.columnActivePackage = new DataColumn("ActivePackage", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActivePackage);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyPackageID }, true));
                this.columnCompanyPackageID.AutoIncrement = true;
                this.columnCompanyPackageID.AutoIncrementSeed = -1L;
                this.columnCompanyPackageID.AutoIncrementStep = -1L;
                this.columnCompanyPackageID.AllowDBNull = false;
                this.columnCompanyPackageID.ReadOnly = true;
                this.columnCompanyPackageID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnCloudPackageID.AllowDBNull = false;
                this.columnPackageStartDate.AllowDBNull = false;
                this.columnPackageEndDate.AllowDBNull = false;
                this.columnPackageType.AllowDBNull = false;
                this.columnPackageType.MaxLength = 10;
                this.columnPackageAmount.AllowDBNull = false;
                this.columnPackagePaymentTransDetail.AllowDBNull = false;
                this.columnPackagePaymentTransDetail.MaxLength = 500;
                this.columnActivePackage.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCompanyPackageID = base.Columns["CompanyPackageID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCloudPackageID = base.Columns["CloudPackageID"];
                this.columnPackageStartDate = base.Columns["PackageStartDate"];
                this.columnPackageEndDate = base.Columns["PackageEndDate"];
                this.columnPackageType = base.Columns["PackageType"];
                this.columnPackageAmount = base.Columns["PackageAmount"];
                this.columnPackagePaymentTransDetail = base.Columns["PackagePaymentTransDetail"];
                this.columnPackagePaymentTransDate = base.Columns["PackagePaymentTransDate"];
                this.columnPackageAssignDate = base.Columns["PackageAssignDate"];
                this.columnActivePackage = base.Columns["ActivePackage"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPackageMasterRow NewCompanyPackageMasterRow()
            {
                return (CloudAccountDA.CompanyPackageMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyPackageMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyPackageMasterRowChanged != null)
                {
                    this.CompanyPackageMasterRowChanged(this, new CloudAccountDA.CompanyPackageMasterRowChangeEvent((CloudAccountDA.CompanyPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyPackageMasterRowChanging != null)
                {
                    this.CompanyPackageMasterRowChanging(this, new CloudAccountDA.CompanyPackageMasterRowChangeEvent((CloudAccountDA.CompanyPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyPackageMasterRowDeleted != null)
                {
                    this.CompanyPackageMasterRowDeleted(this, new CloudAccountDA.CompanyPackageMasterRowChangeEvent((CloudAccountDA.CompanyPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyPackageMasterRowDeleting != null)
                {
                    this.CompanyPackageMasterRowDeleting(this, new CloudAccountDA.CompanyPackageMasterRowChangeEvent((CloudAccountDA.CompanyPackageMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCompanyPackageMasterRow(CloudAccountDA.CompanyPackageMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ActivePackageColumn
            {
                get
                {
                    return this.columnActivePackage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CloudPackageIDColumn
            {
                get
                {
                    return this.columnCloudPackageID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyPackageIDColumn
            {
                get
                {
                    return this.columnCompanyPackageID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPackageMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyPackageMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageAmountColumn
            {
                get
                {
                    return this.columnPackageAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageAssignDateColumn
            {
                get
                {
                    return this.columnPackageAssignDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageEndDateColumn
            {
                get
                {
                    return this.columnPackageEndDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackagePaymentTransDateColumn
            {
                get
                {
                    return this.columnPackagePaymentTransDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackagePaymentTransDetailColumn
            {
                get
                {
                    return this.columnPackagePaymentTransDetail;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageStartDateColumn
            {
                get
                {
                    return this.columnPackageStartDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageTypeColumn
            {
                get
                {
                    return this.columnPackageType;
                }
            }
        }
        
        public class CompanyPackageMasterRow : DataRow
        {
            private CloudAccountDA.CompanyPackageMasterDataTable tableCompanyPackageMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyPackageMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyPackageMaster = (CloudAccountDA.CompanyPackageMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageAssignDateNull()
            {
                return base.IsNull(this.tableCompanyPackageMaster.PackageAssignDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackagePaymentTransDateNull()
            {
                return base.IsNull(this.tableCompanyPackageMaster.PackagePaymentTransDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackageAssignDateNull()
            {
                base[this.tableCompanyPackageMaster.PackageAssignDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackagePaymentTransDateNull()
            {
                base[this.tableCompanyPackageMaster.PackagePaymentTransDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ActivePackage
            {
                get
                {
                    return (bool) base[this.tableCompanyPackageMaster.ActivePackageColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.ActivePackageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CloudPackageID
            {
                get
                {
                    return (int) base[this.tableCompanyPackageMaster.CloudPackageIDColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.CloudPackageIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCompanyPackageMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyPackageID
            {
                get
                {
                    return (int) base[this.tableCompanyPackageMaster.CompanyPackageIDColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.CompanyPackageIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal PackageAmount
            {
                get
                {
                    return (decimal) base[this.tableCompanyPackageMaster.PackageAmountColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.PackageAmountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime PackageAssignDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCompanyPackageMaster.PackageAssignDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageAssignDate' in table 'CompanyPackageMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCompanyPackageMaster.PackageAssignDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime PackageEndDate
            {
                get
                {
                    return (DateTime) base[this.tableCompanyPackageMaster.PackageEndDateColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.PackageEndDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime PackagePaymentTransDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCompanyPackageMaster.PackagePaymentTransDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackagePaymentTransDate' in table 'CompanyPackageMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCompanyPackageMaster.PackagePaymentTransDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PackagePaymentTransDetail
            {
                get
                {
                    return (string) base[this.tableCompanyPackageMaster.PackagePaymentTransDetailColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.PackagePaymentTransDetailColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime PackageStartDate
            {
                get
                {
                    return (DateTime) base[this.tableCompanyPackageMaster.PackageStartDateColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.PackageStartDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PackageType
            {
                get
                {
                    return (string) base[this.tableCompanyPackageMaster.PackageTypeColumn];
                }
                set
                {
                    base[this.tableCompanyPackageMaster.PackageTypeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyPackageMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyPackageMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyPackageMasterRowChangeEvent(CloudAccountDA.CompanyPackageMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPackageMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyPackageMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyPackageMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyPaymentMasterDataTable : TypedTableBase<CloudAccountDA.CompanyPaymentMasterRow>
        {
            private DataColumn columnCloudPackageID;
            private DataColumn columnCompanyID;
            private DataColumn columnCompanyPaymentID;
            private DataColumn columnPackageAmount;
            private DataColumn columnPaymentMode;
            private DataColumn columnResponseCode;
            private DataColumn columnResponseMessage;
            private DataColumn columnStatus;
            private DataColumn columnTransactionDate;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaymentMasterRowChangeEventHandler CompanyPaymentMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaymentMasterRowChangeEventHandler CompanyPaymentMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaymentMasterRowChangeEventHandler CompanyPaymentMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaymentMasterRowChangeEventHandler CompanyPaymentMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CompanyPaymentMasterDataTable()
            {
                base.TableName = "CompanyPaymentMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CompanyPaymentMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CompanyPaymentMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyPaymentMasterRow(CloudAccountDA.CompanyPaymentMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPaymentMasterRow AddCompanyPaymentMasterRow(int CompanyID, int CloudPackageID, decimal PackageAmount, string Status, string ResponseCode, string ResponseMessage, DateTime TransactionDate, string PaymentMode)
            {
                CloudAccountDA.CompanyPaymentMasterRow row = (CloudAccountDA.CompanyPaymentMasterRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = CompanyID;
                objArray2[2] = CloudPackageID;
                objArray2[3] = PackageAmount;
                objArray2[4] = Status;
                objArray2[5] = ResponseCode;
                objArray2[6] = ResponseMessage;
                objArray2[7] = TransactionDate;
                objArray2[8] = PaymentMode;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyPaymentMasterDataTable table = (CloudAccountDA.CompanyPaymentMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyPaymentMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPaymentMasterRow FindByCompanyPaymentID(int CompanyPaymentID)
            {
                return (CloudAccountDA.CompanyPaymentMasterRow) base.Rows.Find(new object[] { CompanyPaymentID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyPaymentMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyPaymentMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCompanyPaymentID = new DataColumn("CompanyPaymentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyPaymentID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnCloudPackageID = new DataColumn("CloudPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCloudPackageID);
                this.columnPackageAmount = new DataColumn("PackageAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPackageAmount);
                this.columnStatus = new DataColumn("Status", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnResponseCode = new DataColumn("ResponseCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnResponseCode);
                this.columnResponseMessage = new DataColumn("ResponseMessage", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnResponseMessage);
                this.columnTransactionDate = new DataColumn("TransactionDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
                this.columnPaymentMode = new DataColumn("PaymentMode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentMode);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyPaymentID }, true));
                this.columnCompanyPaymentID.AutoIncrement = true;
                this.columnCompanyPaymentID.AutoIncrementSeed = -1L;
                this.columnCompanyPaymentID.AutoIncrementStep = -1L;
                this.columnCompanyPaymentID.AllowDBNull = false;
                this.columnCompanyPaymentID.ReadOnly = true;
                this.columnCompanyPaymentID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnCloudPackageID.AllowDBNull = false;
                this.columnPackageAmount.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnResponseCode.MaxLength = 50;
                this.columnResponseMessage.MaxLength = 0x3e8;
                this.columnTransactionDate.AllowDBNull = false;
                this.columnPaymentMode.AllowDBNull = false;
                this.columnPaymentMode.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCompanyPaymentID = base.Columns["CompanyPaymentID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnCloudPackageID = base.Columns["CloudPackageID"];
                this.columnPackageAmount = base.Columns["PackageAmount"];
                this.columnStatus = base.Columns["Status"];
                this.columnResponseCode = base.Columns["ResponseCode"];
                this.columnResponseMessage = base.Columns["ResponseMessage"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
                this.columnPaymentMode = base.Columns["PaymentMode"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPaymentMasterRow NewCompanyPaymentMasterRow()
            {
                return (CloudAccountDA.CompanyPaymentMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyPaymentMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyPaymentMasterRowChanged != null)
                {
                    this.CompanyPaymentMasterRowChanged(this, new CloudAccountDA.CompanyPaymentMasterRowChangeEvent((CloudAccountDA.CompanyPaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyPaymentMasterRowChanging != null)
                {
                    this.CompanyPaymentMasterRowChanging(this, new CloudAccountDA.CompanyPaymentMasterRowChangeEvent((CloudAccountDA.CompanyPaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyPaymentMasterRowDeleted != null)
                {
                    this.CompanyPaymentMasterRowDeleted(this, new CloudAccountDA.CompanyPaymentMasterRowChangeEvent((CloudAccountDA.CompanyPaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyPaymentMasterRowDeleting != null)
                {
                    this.CompanyPaymentMasterRowDeleting(this, new CloudAccountDA.CompanyPaymentMasterRowChangeEvent((CloudAccountDA.CompanyPaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCompanyPaymentMasterRow(CloudAccountDA.CompanyPaymentMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CloudPackageIDColumn
            {
                get
                {
                    return this.columnCloudPackageID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyPaymentIDColumn
            {
                get
                {
                    return this.columnCompanyPaymentID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPaymentMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyPaymentMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageAmountColumn
            {
                get
                {
                    return this.columnPackageAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PaymentModeColumn
            {
                get
                {
                    return this.columnPaymentMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ResponseCodeColumn
            {
                get
                {
                    return this.columnResponseCode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ResponseMessageColumn
            {
                get
                {
                    return this.columnResponseMessage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TransactionDateColumn
            {
                get
                {
                    return this.columnTransactionDate;
                }
            }
        }
        
        public class CompanyPaymentMasterRow : DataRow
        {
            private CloudAccountDA.CompanyPaymentMasterDataTable tableCompanyPaymentMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyPaymentMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyPaymentMaster = (CloudAccountDA.CompanyPaymentMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsResponseCodeNull()
            {
                return base.IsNull(this.tableCompanyPaymentMaster.ResponseCodeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsResponseMessageNull()
            {
                return base.IsNull(this.tableCompanyPaymentMaster.ResponseMessageColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStatusNull()
            {
                return base.IsNull(this.tableCompanyPaymentMaster.StatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetResponseCodeNull()
            {
                base[this.tableCompanyPaymentMaster.ResponseCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetResponseMessageNull()
            {
                base[this.tableCompanyPaymentMaster.ResponseMessageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStatusNull()
            {
                base[this.tableCompanyPaymentMaster.StatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CloudPackageID
            {
                get
                {
                    return (int) base[this.tableCompanyPaymentMaster.CloudPackageIDColumn];
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.CloudPackageIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCompanyPaymentMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyPaymentID
            {
                get
                {
                    return (int) base[this.tableCompanyPaymentMaster.CompanyPaymentIDColumn];
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.CompanyPaymentIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PackageAmount
            {
                get
                {
                    return (decimal) base[this.tableCompanyPaymentMaster.PackageAmountColumn];
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.PackageAmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PaymentMode
            {
                get
                {
                    return (string) base[this.tableCompanyPaymentMaster.PaymentModeColumn];
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.PaymentModeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ResponseCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyPaymentMaster.ResponseCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ResponseCode' in table 'CompanyPaymentMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.ResponseCodeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ResponseMessage
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyPaymentMaster.ResponseMessageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ResponseMessage' in table 'CompanyPaymentMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.ResponseMessageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Status
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyPaymentMaster.StatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Status' in table 'CompanyPaymentMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.StatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime TransactionDate
            {
                get
                {
                    return (DateTime) base[this.tableCompanyPaymentMaster.TransactionDateColumn];
                }
                set
                {
                    base[this.tableCompanyPaymentMaster.TransactionDateColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyPaymentMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyPaymentMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyPaymentMasterRowChangeEvent(CloudAccountDA.CompanyPaymentMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPaymentMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyPaymentMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyPaymentMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyPaypalMasterDataTable : TypedTableBase<CloudAccountDA.CompanyPaypalMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnCompanyPaypalID;
            private DataColumn columnPaypalID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaypalMasterRowChangeEventHandler CompanyPaypalMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaypalMasterRowChangeEventHandler CompanyPaypalMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaypalMasterRowChangeEventHandler CompanyPaypalMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyPaypalMasterRowChangeEventHandler CompanyPaypalMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyPaypalMasterDataTable()
            {
                base.TableName = "CompanyPaypalMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyPaypalMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CompanyPaypalMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyPaypalMasterRow(CloudAccountDA.CompanyPaypalMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPaypalMasterRow AddCompanyPaypalMasterRow(int CompanyID, string PaypalID)
            {
                CloudAccountDA.CompanyPaypalMasterRow row = (CloudAccountDA.CompanyPaypalMasterRow) base.NewRow();
                object[] objArray2 = new object[3];
                objArray2[1] = CompanyID;
                objArray2[2] = PaypalID;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyPaypalMasterDataTable table = (CloudAccountDA.CompanyPaypalMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyPaypalMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPaypalMasterRow FindByCompanyPaypalID(int CompanyPaypalID)
            {
                return (CloudAccountDA.CompanyPaypalMasterRow) base.Rows.Find(new object[] { CompanyPaypalID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyPaypalMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyPaypalMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCompanyPaypalID = new DataColumn("CompanyPaypalID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyPaypalID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnPaypalID = new DataColumn("PaypalID", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPaypalID);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCompanyPaypalID }, true));
                this.columnCompanyPaypalID.AutoIncrement = true;
                this.columnCompanyPaypalID.AutoIncrementSeed = -1L;
                this.columnCompanyPaypalID.AutoIncrementStep = -1L;
                this.columnCompanyPaypalID.AllowDBNull = false;
                this.columnCompanyPaypalID.ReadOnly = true;
                this.columnCompanyPaypalID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnPaypalID.AllowDBNull = false;
                this.columnPaypalID.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCompanyPaypalID = base.Columns["CompanyPaypalID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnPaypalID = base.Columns["PaypalID"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPaypalMasterRow NewCompanyPaypalMasterRow()
            {
                return (CloudAccountDA.CompanyPaypalMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyPaypalMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyPaypalMasterRowChanged != null)
                {
                    this.CompanyPaypalMasterRowChanged(this, new CloudAccountDA.CompanyPaypalMasterRowChangeEvent((CloudAccountDA.CompanyPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyPaypalMasterRowChanging != null)
                {
                    this.CompanyPaypalMasterRowChanging(this, new CloudAccountDA.CompanyPaypalMasterRowChangeEvent((CloudAccountDA.CompanyPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyPaypalMasterRowDeleted != null)
                {
                    this.CompanyPaypalMasterRowDeleted(this, new CloudAccountDA.CompanyPaypalMasterRowChangeEvent((CloudAccountDA.CompanyPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyPaypalMasterRowDeleting != null)
                {
                    this.CompanyPaypalMasterRowDeleting(this, new CloudAccountDA.CompanyPaypalMasterRowChangeEvent((CloudAccountDA.CompanyPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCompanyPaypalMasterRow(CloudAccountDA.CompanyPaypalMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyPaypalIDColumn
            {
                get
                {
                    return this.columnCompanyPaypalID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CompanyPaypalMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyPaypalMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PaypalIDColumn
            {
                get
                {
                    return this.columnPaypalID;
                }
            }
        }
        
        public class CompanyPaypalMasterRow : DataRow
        {
            private CloudAccountDA.CompanyPaypalMasterDataTable tableCompanyPaypalMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyPaypalMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyPaypalMaster = (CloudAccountDA.CompanyPaypalMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCompanyPaypalMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCompanyPaypalMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyPaypalID
            {
                get
                {
                    return (int) base[this.tableCompanyPaypalMaster.CompanyPaypalIDColumn];
                }
                set
                {
                    base[this.tableCompanyPaypalMaster.CompanyPaypalIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PaypalID
            {
                get
                {
                    return (string) base[this.tableCompanyPaypalMaster.PaypalIDColumn];
                }
                set
                {
                    base[this.tableCompanyPaypalMaster.PaypalIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyPaypalMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyPaypalMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyPaypalMasterRowChangeEvent(CloudAccountDA.CompanyPaypalMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyPaypalMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyPaypalMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyPaypalMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CompanyUserMasterDataTable : TypedTableBase<CloudAccountDA.CompanyUserMasterRow>
        {
            private DataColumn columnEmail;
            private DataColumn columnID;
            private DataColumn columnLastLoginDate;
            private DataColumn columnName;
            private DataColumn columnRole;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyUserMasterRowChangeEventHandler CompanyUserMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyUserMasterRowChangeEventHandler CompanyUserMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyUserMasterRowChangeEventHandler CompanyUserMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CompanyUserMasterRowChangeEventHandler CompanyUserMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CompanyUserMasterDataTable()
            {
                base.TableName = "CompanyUserMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CompanyUserMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CompanyUserMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCompanyUserMasterRow(CloudAccountDA.CompanyUserMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyUserMasterRow AddCompanyUserMasterRow(int ID, string Name, string Email, string Role, DateTime LastLoginDate)
            {
                CloudAccountDA.CompanyUserMasterRow row = (CloudAccountDA.CompanyUserMasterRow) base.NewRow();
                row.ItemArray = new object[] { ID, Name, Email, Role, LastLoginDate };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CompanyUserMasterDataTable table = (CloudAccountDA.CompanyUserMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CompanyUserMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CompanyUserMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CompanyUserMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnEmail = new DataColumn("Email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnRole = new DataColumn("Role", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRole);
                this.columnLastLoginDate = new DataColumn("LastLoginDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnLastLoginDate);
                this.columnID.ReadOnly = true;
                this.columnName.ReadOnly = true;
                this.columnName.MaxLength = 0x193;
                this.columnEmail.ReadOnly = true;
                this.columnEmail.MaxLength = 50;
                this.columnRole.ReadOnly = true;
                this.columnRole.MaxLength = 10;
                this.columnLastLoginDate.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnID = base.Columns["ID"];
                this.columnName = base.Columns["Name"];
                this.columnEmail = base.Columns["Email"];
                this.columnRole = base.Columns["Role"];
                this.columnLastLoginDate = base.Columns["LastLoginDate"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyUserMasterRow NewCompanyUserMasterRow()
            {
                return (CloudAccountDA.CompanyUserMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CompanyUserMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CompanyUserMasterRowChanged != null)
                {
                    this.CompanyUserMasterRowChanged(this, new CloudAccountDA.CompanyUserMasterRowChangeEvent((CloudAccountDA.CompanyUserMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CompanyUserMasterRowChanging != null)
                {
                    this.CompanyUserMasterRowChanging(this, new CloudAccountDA.CompanyUserMasterRowChangeEvent((CloudAccountDA.CompanyUserMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CompanyUserMasterRowDeleted != null)
                {
                    this.CompanyUserMasterRowDeleted(this, new CloudAccountDA.CompanyUserMasterRowChangeEvent((CloudAccountDA.CompanyUserMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CompanyUserMasterRowDeleting != null)
                {
                    this.CompanyUserMasterRowDeleting(this, new CloudAccountDA.CompanyUserMasterRowChangeEvent((CloudAccountDA.CompanyUserMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCompanyUserMasterRow(CloudAccountDA.CompanyUserMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailColumn
            {
                get
                {
                    return this.columnEmail;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IDColumn
            {
                get
                {
                    return this.columnID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyUserMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CompanyUserMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn LastLoginDateColumn
            {
                get
                {
                    return this.columnLastLoginDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RoleColumn
            {
                get
                {
                    return this.columnRole;
                }
            }
        }
        
        public class CompanyUserMasterRow : DataRow
        {
            private CloudAccountDA.CompanyUserMasterDataTable tableCompanyUserMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CompanyUserMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCompanyUserMaster = (CloudAccountDA.CompanyUserMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEmailNull()
            {
                return base.IsNull(this.tableCompanyUserMaster.EmailColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsIDNull()
            {
                return base.IsNull(this.tableCompanyUserMaster.IDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsLastLoginDateNull()
            {
                return base.IsNull(this.tableCompanyUserMaster.LastLoginDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull()
            {
                return base.IsNull(this.tableCompanyUserMaster.NameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRoleNull()
            {
                return base.IsNull(this.tableCompanyUserMaster.RoleColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEmailNull()
            {
                base[this.tableCompanyUserMaster.EmailColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetIDNull()
            {
                base[this.tableCompanyUserMaster.IDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastLoginDateNull()
            {
                base[this.tableCompanyUserMaster.LastLoginDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNameNull()
            {
                base[this.tableCompanyUserMaster.NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRoleNull()
            {
                base[this.tableCompanyUserMaster.RoleColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Email
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyUserMaster.EmailColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Email' in table 'CompanyUserMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyUserMaster.EmailColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCompanyUserMaster.IDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ID' in table 'CompanyUserMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCompanyUserMaster.IDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime LastLoginDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCompanyUserMaster.LastLoginDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LastLoginDate' in table 'CompanyUserMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCompanyUserMaster.LastLoginDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Name
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyUserMaster.NameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Name' in table 'CompanyUserMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyUserMaster.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Role
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCompanyUserMaster.RoleColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Role' in table 'CompanyUserMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCompanyUserMaster.RoleColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CompanyUserMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CompanyUserMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CompanyUserMasterRowChangeEvent(CloudAccountDA.CompanyUserMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CompanyUserMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CompanyUserMasterRowChangeEventHandler(object sender, CloudAccountDA.CompanyUserMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ContactMasterDataTable : TypedTableBase<CloudAccountDA.ContactMasterRow>
        {
            private DataColumn columnAddress1;
            private DataColumn columnAddress2;
            private DataColumn columnAddress3;
            private DataColumn columnAddress4;
            private DataColumn columnCity;
            private DataColumn columnCompanyName;
            private DataColumn columnContactID;
            private DataColumn columnContactPerson;
            private DataColumn columnCountry;
            private DataColumn columnEmail1;
            private DataColumn columnEmail2;
            private DataColumn columnFax1;
            private DataColumn columnFax2;
            private DataColumn columnGoogleMapCode;
            private DataColumn columnMobile1;
            private DataColumn columnMobile2;
            private DataColumn columnPhone1;
            private DataColumn columnPhone2;
            private DataColumn columnState;
            private DataColumn columnStatus;
            private DataColumn columnWebsite;
            private DataColumn columnZipCode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContactMasterRowChangeEventHandler ContactMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContactMasterRowChangeEventHandler ContactMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContactMasterRowChangeEventHandler ContactMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContactMasterRowChangeEventHandler ContactMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ContactMasterDataTable()
            {
                base.TableName = "ContactMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ContactMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ContactMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddContactMasterRow(CloudAccountDA.ContactMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ContactMasterRow AddContactMasterRow(string CompanyName, string ContactPerson, string Address1, string Address2, string Address3, string Address4, string ZipCode, string City, string State, string Country, string Phone1, string Phone2, string Fax1, string Fax2, string Mobile1, string Mobile2, string Email1, string Email2, string Website, string GoogleMapCode, bool Status)
            {
                CloudAccountDA.ContactMasterRow row = (CloudAccountDA.ContactMasterRow) base.NewRow();
                object[] objArray2 = new object[0x16];
                objArray2[1] = CompanyName;
                objArray2[2] = ContactPerson;
                objArray2[3] = Address1;
                objArray2[4] = Address2;
                objArray2[5] = Address3;
                objArray2[6] = Address4;
                objArray2[7] = ZipCode;
                objArray2[8] = City;
                objArray2[9] = State;
                objArray2[10] = Country;
                objArray2[11] = Phone1;
                objArray2[12] = Phone2;
                objArray2[13] = Fax1;
                objArray2[14] = Fax2;
                objArray2[15] = Mobile1;
                objArray2[0x10] = Mobile2;
                objArray2[0x11] = Email1;
                objArray2[0x12] = Email2;
                objArray2[0x13] = Website;
                objArray2[20] = GoogleMapCode;
                objArray2[0x15] = Status;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ContactMasterDataTable table = (CloudAccountDA.ContactMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ContactMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ContactMasterRow FindByContactID(int ContactID)
            {
                return (CloudAccountDA.ContactMasterRow) base.Rows.Find(new object[] { ContactID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ContactMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ContactMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnContactID = new DataColumn("ContactID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnContactID);
                this.columnCompanyName = new DataColumn("CompanyName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnContactPerson = new DataColumn("ContactPerson", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnContactPerson);
                this.columnAddress1 = new DataColumn("Address1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new DataColumn("Address2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnAddress3 = new DataColumn("Address3", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress3);
                this.columnAddress4 = new DataColumn("Address4", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress4);
                this.columnZipCode = new DataColumn("ZipCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnCity = new DataColumn("City", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new DataColumn("State", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnCountry = new DataColumn("Country", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCountry);
                this.columnPhone1 = new DataColumn("Phone1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPhone1);
                this.columnPhone2 = new DataColumn("Phone2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPhone2);
                this.columnFax1 = new DataColumn("Fax1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFax1);
                this.columnFax2 = new DataColumn("Fax2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFax2);
                this.columnMobile1 = new DataColumn("Mobile1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMobile1);
                this.columnMobile2 = new DataColumn("Mobile2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMobile2);
                this.columnEmail1 = new DataColumn("Email1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmail1);
                this.columnEmail2 = new DataColumn("Email2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmail2);
                this.columnWebsite = new DataColumn("Website", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnWebsite);
                this.columnGoogleMapCode = new DataColumn("GoogleMapCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnGoogleMapCode);
                this.columnStatus = new DataColumn("Status", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnContactID }, true));
                this.columnContactID.AutoIncrement = true;
                this.columnContactID.AutoIncrementSeed = -1L;
                this.columnContactID.AutoIncrementStep = -1L;
                this.columnContactID.AllowDBNull = false;
                this.columnContactID.ReadOnly = true;
                this.columnContactID.Unique = true;
                this.columnCompanyName.MaxLength = 100;
                this.columnContactPerson.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnAddress3.MaxLength = 50;
                this.columnAddress4.MaxLength = 50;
                this.columnZipCode.MaxLength = 50;
                this.columnCity.MaxLength = 50;
                this.columnState.MaxLength = 50;
                this.columnCountry.MaxLength = 50;
                this.columnPhone1.MaxLength = 50;
                this.columnPhone2.MaxLength = 50;
                this.columnFax1.MaxLength = 50;
                this.columnFax2.MaxLength = 50;
                this.columnMobile1.MaxLength = 15;
                this.columnMobile2.MaxLength = 15;
                this.columnEmail1.MaxLength = 50;
                this.columnEmail2.MaxLength = 50;
                this.columnWebsite.MaxLength = 50;
                this.columnGoogleMapCode.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnContactID = base.Columns["ContactID"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnContactPerson = base.Columns["ContactPerson"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnAddress3 = base.Columns["Address3"];
                this.columnAddress4 = base.Columns["Address4"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnCountry = base.Columns["Country"];
                this.columnPhone1 = base.Columns["Phone1"];
                this.columnPhone2 = base.Columns["Phone2"];
                this.columnFax1 = base.Columns["Fax1"];
                this.columnFax2 = base.Columns["Fax2"];
                this.columnMobile1 = base.Columns["Mobile1"];
                this.columnMobile2 = base.Columns["Mobile2"];
                this.columnEmail1 = base.Columns["Email1"];
                this.columnEmail2 = base.Columns["Email2"];
                this.columnWebsite = base.Columns["Website"];
                this.columnGoogleMapCode = base.Columns["GoogleMapCode"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContactMasterRow NewContactMasterRow()
            {
                return (CloudAccountDA.ContactMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ContactMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ContactMasterRowChanged != null)
                {
                    this.ContactMasterRowChanged(this, new CloudAccountDA.ContactMasterRowChangeEvent((CloudAccountDA.ContactMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ContactMasterRowChanging != null)
                {
                    this.ContactMasterRowChanging(this, new CloudAccountDA.ContactMasterRowChangeEvent((CloudAccountDA.ContactMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ContactMasterRowDeleted != null)
                {
                    this.ContactMasterRowDeleted(this, new CloudAccountDA.ContactMasterRowChangeEvent((CloudAccountDA.ContactMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ContactMasterRowDeleting != null)
                {
                    this.ContactMasterRowDeleting(this, new CloudAccountDA.ContactMasterRowChangeEvent((CloudAccountDA.ContactMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveContactMasterRow(CloudAccountDA.ContactMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Address3Column
            {
                get
                {
                    return this.columnAddress3;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Address4Column
            {
                get
                {
                    return this.columnAddress4;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CityColumn
            {
                get
                {
                    return this.columnCity;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyNameColumn
            {
                get
                {
                    return this.columnCompanyName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ContactIDColumn
            {
                get
                {
                    return this.columnContactID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ContactPersonColumn
            {
                get
                {
                    return this.columnContactPerson;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryColumn
            {
                get
                {
                    return this.columnCountry;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Email1Column
            {
                get
                {
                    return this.columnEmail1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Email2Column
            {
                get
                {
                    return this.columnEmail2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Fax1Column
            {
                get
                {
                    return this.columnFax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Fax2Column
            {
                get
                {
                    return this.columnFax2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn GoogleMapCodeColumn
            {
                get
                {
                    return this.columnGoogleMapCode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContactMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ContactMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Mobile1Column
            {
                get
                {
                    return this.columnMobile1;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Mobile2Column
            {
                get
                {
                    return this.columnMobile2;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Phone1Column
            {
                get
                {
                    return this.columnPhone1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Phone2Column
            {
                get
                {
                    return this.columnPhone2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StateColumn
            {
                get
                {
                    return this.columnState;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn WebsiteColumn
            {
                get
                {
                    return this.columnWebsite;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ZipCodeColumn
            {
                get
                {
                    return this.columnZipCode;
                }
            }
        }
        
        public class ContactMasterRow : DataRow
        {
            private CloudAccountDA.ContactMasterDataTable tableContactMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ContactMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableContactMaster = (CloudAccountDA.ContactMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddress1Null()
            {
                return base.IsNull(this.tableContactMaster.Address1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddress2Null()
            {
                return base.IsNull(this.tableContactMaster.Address2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddress3Null()
            {
                return base.IsNull(this.tableContactMaster.Address3Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddress4Null()
            {
                return base.IsNull(this.tableContactMaster.Address4Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCityNull()
            {
                return base.IsNull(this.tableContactMaster.CityColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyNameNull()
            {
                return base.IsNull(this.tableContactMaster.CompanyNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsContactPersonNull()
            {
                return base.IsNull(this.tableContactMaster.ContactPersonColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCountryNull()
            {
                return base.IsNull(this.tableContactMaster.CountryColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEmail1Null()
            {
                return base.IsNull(this.tableContactMaster.Email1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEmail2Null()
            {
                return base.IsNull(this.tableContactMaster.Email2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFax1Null()
            {
                return base.IsNull(this.tableContactMaster.Fax1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFax2Null()
            {
                return base.IsNull(this.tableContactMaster.Fax2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsGoogleMapCodeNull()
            {
                return base.IsNull(this.tableContactMaster.GoogleMapCodeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMobile1Null()
            {
                return base.IsNull(this.tableContactMaster.Mobile1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsMobile2Null()
            {
                return base.IsNull(this.tableContactMaster.Mobile2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPhone1Null()
            {
                return base.IsNull(this.tableContactMaster.Phone1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPhone2Null()
            {
                return base.IsNull(this.tableContactMaster.Phone2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStateNull()
            {
                return base.IsNull(this.tableContactMaster.StateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStatusNull()
            {
                return base.IsNull(this.tableContactMaster.StatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsWebsiteNull()
            {
                return base.IsNull(this.tableContactMaster.WebsiteColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsZipCodeNull()
            {
                return base.IsNull(this.tableContactMaster.ZipCodeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddress1Null()
            {
                base[this.tableContactMaster.Address1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddress2Null()
            {
                base[this.tableContactMaster.Address2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddress3Null()
            {
                base[this.tableContactMaster.Address3Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddress4Null()
            {
                base[this.tableContactMaster.Address4Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCityNull()
            {
                base[this.tableContactMaster.CityColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCompanyNameNull()
            {
                base[this.tableContactMaster.CompanyNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetContactPersonNull()
            {
                base[this.tableContactMaster.ContactPersonColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCountryNull()
            {
                base[this.tableContactMaster.CountryColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEmail1Null()
            {
                base[this.tableContactMaster.Email1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEmail2Null()
            {
                base[this.tableContactMaster.Email2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFax1Null()
            {
                base[this.tableContactMaster.Fax1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFax2Null()
            {
                base[this.tableContactMaster.Fax2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGoogleMapCodeNull()
            {
                base[this.tableContactMaster.GoogleMapCodeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMobile1Null()
            {
                base[this.tableContactMaster.Mobile1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetMobile2Null()
            {
                base[this.tableContactMaster.Mobile2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPhone1Null()
            {
                base[this.tableContactMaster.Phone1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPhone2Null()
            {
                base[this.tableContactMaster.Phone2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetStateNull()
            {
                base[this.tableContactMaster.StateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStatusNull()
            {
                base[this.tableContactMaster.StatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWebsiteNull()
            {
                base[this.tableContactMaster.WebsiteColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetZipCodeNull()
            {
                base[this.tableContactMaster.ZipCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Address1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Address1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address1' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Address1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Address2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Address2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address2' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Address2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Address3
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Address3Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address3' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Address3Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Address4
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Address4Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address4' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Address4Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string City
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.CityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'City' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.CityColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CompanyName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.CompanyNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyName' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.CompanyNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ContactID
            {
                get
                {
                    return (int) base[this.tableContactMaster.ContactIDColumn];
                }
                set
                {
                    base[this.tableContactMaster.ContactIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ContactPerson
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.ContactPersonColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ContactPerson' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.ContactPersonColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Country
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.CountryColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Country' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.CountryColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Email1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Email1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Email1' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Email1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Email2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Email2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Email2' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Email2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Fax1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Fax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Fax1' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Fax1Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Fax2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Fax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Fax2' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Fax2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string GoogleMapCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.GoogleMapCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'GoogleMapCode' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.GoogleMapCodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Mobile1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Mobile1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Mobile1' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Mobile1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Mobile2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Mobile2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Mobile2' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Mobile2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Phone1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Phone1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Phone1' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Phone1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Phone2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.Phone2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Phone2' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.Phone2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string State
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.StateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'State' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.StateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Status
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableContactMaster.StatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Status' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableContactMaster.StatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Website
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.WebsiteColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Website' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.WebsiteColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ZipCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContactMaster.ZipCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ZipCode' in table 'ContactMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContactMaster.ZipCodeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ContactMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ContactMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ContactMasterRowChangeEvent(CloudAccountDA.ContactMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContactMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ContactMasterRowChangeEventHandler(object sender, CloudAccountDA.ContactMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ContractorMasterDataTable : TypedTableBase<CloudAccountDA.ContractorMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnCompanyID;
            private DataColumn columnContractorEmail;
            private DataColumn columnContractorID;
            private DataColumn columnContractorName;
            private DataColumn columnDeleted;
            private DataColumn columnRebillRate;
            private DataColumn columnTaskID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorMasterRowChangeEventHandler ContractorMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorMasterRowChangeEventHandler ContractorMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorMasterRowChangeEventHandler ContractorMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorMasterRowChangeEventHandler ContractorMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ContractorMasterDataTable()
            {
                base.TableName = "ContractorMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ContractorMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ContractorMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddContractorMasterRow(CloudAccountDA.ContractorMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContractorMasterRow AddContractorMasterRow(int CompanyID, string ContractorEmail, string ContractorName, int TaskID, decimal RebillRate, bool Active, bool Archived, bool Deleted)
            {
                CloudAccountDA.ContractorMasterRow row = (CloudAccountDA.ContractorMasterRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = CompanyID;
                objArray2[2] = ContractorEmail;
                objArray2[3] = ContractorName;
                objArray2[4] = TaskID;
                objArray2[5] = RebillRate;
                objArray2[6] = Active;
                objArray2[7] = Archived;
                objArray2[8] = Deleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ContractorMasterDataTable table = (CloudAccountDA.ContractorMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ContractorMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ContractorMasterRow FindByContractorID(int ContractorID)
            {
                return (CloudAccountDA.ContractorMasterRow) base.Rows.Find(new object[] { ContractorID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ContractorMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ContractorMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnContractorID = new DataColumn("ContractorID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnContractorID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnContractorEmail = new DataColumn("ContractorEmail", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnContractorEmail);
                this.columnContractorName = new DataColumn("ContractorName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnContractorName);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnRebillRate = new DataColumn("RebillRate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRebillRate);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnContractorID }, true));
                this.columnContractorID.AutoIncrement = true;
                this.columnContractorID.AutoIncrementSeed = -1L;
                this.columnContractorID.AutoIncrementStep = -1L;
                this.columnContractorID.AllowDBNull = false;
                this.columnContractorID.ReadOnly = true;
                this.columnContractorID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnContractorEmail.MaxLength = 50;
                this.columnContractorName.MaxLength = 100;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnContractorID = base.Columns["ContractorID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnContractorEmail = base.Columns["ContractorEmail"];
                this.columnContractorName = base.Columns["ContractorName"];
                this.columnTaskID = base.Columns["TaskID"];
                this.columnRebillRate = base.Columns["RebillRate"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContractorMasterRow NewContractorMasterRow()
            {
                return (CloudAccountDA.ContractorMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ContractorMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ContractorMasterRowChanged != null)
                {
                    this.ContractorMasterRowChanged(this, new CloudAccountDA.ContractorMasterRowChangeEvent((CloudAccountDA.ContractorMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ContractorMasterRowChanging != null)
                {
                    this.ContractorMasterRowChanging(this, new CloudAccountDA.ContractorMasterRowChangeEvent((CloudAccountDA.ContractorMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ContractorMasterRowDeleted != null)
                {
                    this.ContractorMasterRowDeleted(this, new CloudAccountDA.ContractorMasterRowChangeEvent((CloudAccountDA.ContractorMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ContractorMasterRowDeleting != null)
                {
                    this.ContractorMasterRowDeleting(this, new CloudAccountDA.ContractorMasterRowChangeEvent((CloudAccountDA.ContractorMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveContractorMasterRow(CloudAccountDA.ContractorMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ContractorEmailColumn
            {
                get
                {
                    return this.columnContractorEmail;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ContractorIDColumn
            {
                get
                {
                    return this.columnContractorID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ContractorNameColumn
            {
                get
                {
                    return this.columnContractorName;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContractorMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ContractorMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RebillRateColumn
            {
                get
                {
                    return this.columnRebillRate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
        }
        
        public class ContractorMasterRow : DataRow
        {
            private CloudAccountDA.ContractorMasterDataTable tableContractorMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ContractorMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableContractorMaster = (CloudAccountDA.ContractorMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableContractorMaster.ActiveColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableContractorMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsContractorEmailNull()
            {
                return base.IsNull(this.tableContractorMaster.ContractorEmailColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsContractorNameNull()
            {
                return base.IsNull(this.tableContractorMaster.ContractorNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableContractorMaster.DeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRebillRateNull()
            {
                return base.IsNull(this.tableContractorMaster.RebillRateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskIDNull()
            {
                return base.IsNull(this.tableContractorMaster.TaskIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableContractorMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetArchivedNull()
            {
                base[this.tableContractorMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetContractorEmailNull()
            {
                base[this.tableContractorMaster.ContractorEmailColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetContractorNameNull()
            {
                base[this.tableContractorMaster.ContractorNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeletedNull()
            {
                base[this.tableContractorMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRebillRateNull()
            {
                base[this.tableContractorMaster.RebillRateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaskIDNull()
            {
                base[this.tableContractorMaster.TaskIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableContractorMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'ContractorMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableContractorMaster.ActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableContractorMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'ContractorMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableContractorMaster.ArchivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableContractorMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableContractorMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ContractorEmail
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContractorMaster.ContractorEmailColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ContractorEmail' in table 'ContractorMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContractorMaster.ContractorEmailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ContractorID
            {
                get
                {
                    return (int) base[this.tableContractorMaster.ContractorIDColumn];
                }
                set
                {
                    base[this.tableContractorMaster.ContractorIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ContractorName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableContractorMaster.ContractorNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ContractorName' in table 'ContractorMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableContractorMaster.ContractorNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableContractorMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'ContractorMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableContractorMaster.DeletedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal RebillRate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableContractorMaster.RebillRateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RebillRate' in table 'ContractorMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableContractorMaster.RebillRateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaskID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableContractorMaster.TaskIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaskID' in table 'ContractorMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableContractorMaster.TaskIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ContractorMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ContractorMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ContractorMasterRowChangeEvent(CloudAccountDA.ContractorMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ContractorMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ContractorMasterRowChangeEventHandler(object sender, CloudAccountDA.ContractorMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ContractorProjectDetailDataTable : TypedTableBase<CloudAccountDA.ContractorProjectDetailRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnContractorID;
            private DataColumn columnContractorProjectDetailID;
            private DataColumn columnProjectID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorProjectDetailRowChangeEventHandler ContractorProjectDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorProjectDetailRowChangeEventHandler ContractorProjectDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorProjectDetailRowChangeEventHandler ContractorProjectDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ContractorProjectDetailRowChangeEventHandler ContractorProjectDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ContractorProjectDetailDataTable()
            {
                base.TableName = "ContractorProjectDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ContractorProjectDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ContractorProjectDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddContractorProjectDetailRow(CloudAccountDA.ContractorProjectDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContractorProjectDetailRow AddContractorProjectDetailRow(int CompanyID, int ContractorID, int ProjectID)
            {
                CloudAccountDA.ContractorProjectDetailRow row = (CloudAccountDA.ContractorProjectDetailRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = ContractorID;
                objArray2[3] = ProjectID;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ContractorProjectDetailDataTable table = (CloudAccountDA.ContractorProjectDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ContractorProjectDetailDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ContractorProjectDetailRow FindByContractorProjectDetailID(int ContractorProjectDetailID)
            {
                return (CloudAccountDA.ContractorProjectDetailRow) base.Rows.Find(new object[] { ContractorProjectDetailID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ContractorProjectDetailRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ContractorProjectDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnContractorProjectDetailID = new DataColumn("ContractorProjectDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnContractorProjectDetailID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnContractorID = new DataColumn("ContractorID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnContractorID);
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnContractorProjectDetailID }, true));
                this.columnContractorProjectDetailID.AutoIncrement = true;
                this.columnContractorProjectDetailID.AutoIncrementSeed = -1L;
                this.columnContractorProjectDetailID.AutoIncrementStep = -1L;
                this.columnContractorProjectDetailID.AllowDBNull = false;
                this.columnContractorProjectDetailID.ReadOnly = true;
                this.columnContractorProjectDetailID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnContractorID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnContractorProjectDetailID = base.Columns["ContractorProjectDetailID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnContractorID = base.Columns["ContractorID"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ContractorProjectDetailRow NewContractorProjectDetailRow()
            {
                return (CloudAccountDA.ContractorProjectDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ContractorProjectDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ContractorProjectDetailRowChanged != null)
                {
                    this.ContractorProjectDetailRowChanged(this, new CloudAccountDA.ContractorProjectDetailRowChangeEvent((CloudAccountDA.ContractorProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ContractorProjectDetailRowChanging != null)
                {
                    this.ContractorProjectDetailRowChanging(this, new CloudAccountDA.ContractorProjectDetailRowChangeEvent((CloudAccountDA.ContractorProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ContractorProjectDetailRowDeleted != null)
                {
                    this.ContractorProjectDetailRowDeleted(this, new CloudAccountDA.ContractorProjectDetailRowChangeEvent((CloudAccountDA.ContractorProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ContractorProjectDetailRowDeleting != null)
                {
                    this.ContractorProjectDetailRowDeleting(this, new CloudAccountDA.ContractorProjectDetailRowChangeEvent((CloudAccountDA.ContractorProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveContractorProjectDetailRow(CloudAccountDA.ContractorProjectDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ContractorIDColumn
            {
                get
                {
                    return this.columnContractorID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ContractorProjectDetailIDColumn
            {
                get
                {
                    return this.columnContractorProjectDetailID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ContractorProjectDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ContractorProjectDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return this.columnProjectID;
                }
            }
        }
        
        public class ContractorProjectDetailRow : DataRow
        {
            private CloudAccountDA.ContractorProjectDetailDataTable tableContractorProjectDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ContractorProjectDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableContractorProjectDetail = (CloudAccountDA.ContractorProjectDetailDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableContractorProjectDetail.CompanyIDColumn];
                }
                set
                {
                    base[this.tableContractorProjectDetail.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ContractorID
            {
                get
                {
                    return (int) base[this.tableContractorProjectDetail.ContractorIDColumn];
                }
                set
                {
                    base[this.tableContractorProjectDetail.ContractorIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ContractorProjectDetailID
            {
                get
                {
                    return (int) base[this.tableContractorProjectDetail.ContractorProjectDetailIDColumn];
                }
                set
                {
                    base[this.tableContractorProjectDetail.ContractorProjectDetailIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ProjectID
            {
                get
                {
                    return (int) base[this.tableContractorProjectDetail.ProjectIDColumn];
                }
                set
                {
                    base[this.tableContractorProjectDetail.ProjectIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ContractorProjectDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ContractorProjectDetailRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ContractorProjectDetailRowChangeEvent(CloudAccountDA.ContractorProjectDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ContractorProjectDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ContractorProjectDetailRowChangeEventHandler(object sender, CloudAccountDA.ContractorProjectDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CountryMasterDataTable : TypedTableBase<CloudAccountDA.CountryMasterRow>
        {
            private DataColumn columnCountryCode;
            private DataColumn columnCountryDesc;
            private DataColumn columnCountryID;
            private DataColumn columnCountryName;
            private DataColumn columnCountryStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CountryMasterRowChangeEventHandler CountryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CountryMasterRowChangeEventHandler CountryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CountryMasterRowChangeEventHandler CountryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CountryMasterRowChangeEventHandler CountryMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CountryMasterDataTable()
            {
                base.TableName = "CountryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CountryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CountryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCountryMasterRow(CloudAccountDA.CountryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CountryMasterRow AddCountryMasterRow(string CountryCode, string CountryName, string CountryDesc, bool CountryStatus)
            {
                CloudAccountDA.CountryMasterRow row = (CloudAccountDA.CountryMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = CountryCode;
                objArray2[2] = CountryName;
                objArray2[3] = CountryDesc;
                objArray2[4] = CountryStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CountryMasterDataTable table = (CloudAccountDA.CountryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CountryMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CountryMasterRow FindByCountryID(int CountryID)
            {
                return (CloudAccountDA.CountryMasterRow) base.Rows.Find(new object[] { CountryID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CountryMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CountryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnCountryCode = new DataColumn("CountryCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCountryCode);
                this.columnCountryName = new DataColumn("CountryName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnCountryDesc = new DataColumn("CountryDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCountryDesc);
                this.columnCountryStatus = new DataColumn("CountryStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCountryStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCountryID }, true));
                this.columnCountryID.AutoIncrement = true;
                this.columnCountryID.AutoIncrementSeed = -1L;
                this.columnCountryID.AutoIncrementStep = -1L;
                this.columnCountryID.AllowDBNull = false;
                this.columnCountryID.ReadOnly = true;
                this.columnCountryID.Unique = true;
                this.columnCountryCode.AllowDBNull = false;
                this.columnCountryCode.MaxLength = 30;
                this.columnCountryName.AllowDBNull = false;
                this.columnCountryName.MaxLength = 100;
                this.columnCountryDesc.MaxLength = 500;
                this.columnCountryStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCountryID = base.Columns["CountryID"];
                this.columnCountryCode = base.Columns["CountryCode"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnCountryDesc = base.Columns["CountryDesc"];
                this.columnCountryStatus = base.Columns["CountryStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CountryMasterRow NewCountryMasterRow()
            {
                return (CloudAccountDA.CountryMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CountryMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CountryMasterRowChanged != null)
                {
                    this.CountryMasterRowChanged(this, new CloudAccountDA.CountryMasterRowChangeEvent((CloudAccountDA.CountryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CountryMasterRowChanging != null)
                {
                    this.CountryMasterRowChanging(this, new CloudAccountDA.CountryMasterRowChangeEvent((CloudAccountDA.CountryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CountryMasterRowDeleted != null)
                {
                    this.CountryMasterRowDeleted(this, new CloudAccountDA.CountryMasterRowChangeEvent((CloudAccountDA.CountryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CountryMasterRowDeleting != null)
                {
                    this.CountryMasterRowDeleting(this, new CloudAccountDA.CountryMasterRowChangeEvent((CloudAccountDA.CountryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCountryMasterRow(CloudAccountDA.CountryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryCodeColumn
            {
                get
                {
                    return this.columnCountryCode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryDescColumn
            {
                get
                {
                    return this.columnCountryDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryIDColumn
            {
                get
                {
                    return this.columnCountryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryNameColumn
            {
                get
                {
                    return this.columnCountryName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CountryStatusColumn
            {
                get
                {
                    return this.columnCountryStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CountryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CountryMasterRow) base.Rows[index];
                }
            }
        }
        
        public class CountryMasterRow : DataRow
        {
            private CloudAccountDA.CountryMasterDataTable tableCountryMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CountryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCountryMaster = (CloudAccountDA.CountryMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCountryDescNull()
            {
                return base.IsNull(this.tableCountryMaster.CountryDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCountryDescNull()
            {
                base[this.tableCountryMaster.CountryDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CountryCode
            {
                get
                {
                    return (string) base[this.tableCountryMaster.CountryCodeColumn];
                }
                set
                {
                    base[this.tableCountryMaster.CountryCodeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CountryDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCountryMaster.CountryDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CountryDesc' in table 'CountryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCountryMaster.CountryDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CountryID
            {
                get
                {
                    return (int) base[this.tableCountryMaster.CountryIDColumn];
                }
                set
                {
                    base[this.tableCountryMaster.CountryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CountryName
            {
                get
                {
                    return (string) base[this.tableCountryMaster.CountryNameColumn];
                }
                set
                {
                    base[this.tableCountryMaster.CountryNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CountryStatus
            {
                get
                {
                    return (bool) base[this.tableCountryMaster.CountryStatusColumn];
                }
                set
                {
                    base[this.tableCountryMaster.CountryStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CountryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CountryMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CountryMasterRowChangeEvent(CloudAccountDA.CountryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CountryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CountryMasterRowChangeEventHandler(object sender, CloudAccountDA.CountryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CreditDefaultTermsMasterDataTable : TypedTableBase<CloudAccountDA.CreditDefaultTermsMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnCreditDefaultTermsID;
            private DataColumn columnDefaultTerms;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditDefaultTermsMasterRowChangeEventHandler CreditDefaultTermsMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditDefaultTermsMasterRowChangeEventHandler CreditDefaultTermsMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditDefaultTermsMasterRowChangeEventHandler CreditDefaultTermsMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditDefaultTermsMasterRowChangeEventHandler CreditDefaultTermsMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreditDefaultTermsMasterDataTable()
            {
                base.TableName = "CreditDefaultTermsMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CreditDefaultTermsMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CreditDefaultTermsMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCreditDefaultTermsMasterRow(CloudAccountDA.CreditDefaultTermsMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditDefaultTermsMasterRow AddCreditDefaultTermsMasterRow(int CompanyID, string DefaultTerms)
            {
                CloudAccountDA.CreditDefaultTermsMasterRow row = (CloudAccountDA.CreditDefaultTermsMasterRow) base.NewRow();
                object[] objArray2 = new object[3];
                objArray2[1] = CompanyID;
                objArray2[2] = DefaultTerms;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CreditDefaultTermsMasterDataTable table = (CloudAccountDA.CreditDefaultTermsMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CreditDefaultTermsMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditDefaultTermsMasterRow FindByCreditDefaultTermsID(int CreditDefaultTermsID)
            {
                return (CloudAccountDA.CreditDefaultTermsMasterRow) base.Rows.Find(new object[] { CreditDefaultTermsID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CreditDefaultTermsMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CreditDefaultTermsMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCreditDefaultTermsID = new DataColumn("CreditDefaultTermsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditDefaultTermsID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnDefaultTerms = new DataColumn("DefaultTerms", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDefaultTerms);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCreditDefaultTermsID }, true));
                this.columnCreditDefaultTermsID.AutoIncrement = true;
                this.columnCreditDefaultTermsID.AutoIncrementSeed = -1L;
                this.columnCreditDefaultTermsID.AutoIncrementStep = -1L;
                this.columnCreditDefaultTermsID.AllowDBNull = false;
                this.columnCreditDefaultTermsID.ReadOnly = true;
                this.columnCreditDefaultTermsID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnDefaultTerms.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCreditDefaultTermsID = base.Columns["CreditDefaultTermsID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnDefaultTerms = base.Columns["DefaultTerms"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditDefaultTermsMasterRow NewCreditDefaultTermsMasterRow()
            {
                return (CloudAccountDA.CreditDefaultTermsMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CreditDefaultTermsMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CreditDefaultTermsMasterRowChanged != null)
                {
                    this.CreditDefaultTermsMasterRowChanged(this, new CloudAccountDA.CreditDefaultTermsMasterRowChangeEvent((CloudAccountDA.CreditDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CreditDefaultTermsMasterRowChanging != null)
                {
                    this.CreditDefaultTermsMasterRowChanging(this, new CloudAccountDA.CreditDefaultTermsMasterRowChangeEvent((CloudAccountDA.CreditDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CreditDefaultTermsMasterRowDeleted != null)
                {
                    this.CreditDefaultTermsMasterRowDeleted(this, new CloudAccountDA.CreditDefaultTermsMasterRowChangeEvent((CloudAccountDA.CreditDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CreditDefaultTermsMasterRowDeleting != null)
                {
                    this.CreditDefaultTermsMasterRowDeleting(this, new CloudAccountDA.CreditDefaultTermsMasterRowChangeEvent((CloudAccountDA.CreditDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCreditDefaultTermsMasterRow(CloudAccountDA.CreditDefaultTermsMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreditDefaultTermsIDColumn
            {
                get
                {
                    return this.columnCreditDefaultTermsID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DefaultTermsColumn
            {
                get
                {
                    return this.columnDefaultTerms;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditDefaultTermsMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CreditDefaultTermsMasterRow) base.Rows[index];
                }
            }
        }
        
        public class CreditDefaultTermsMasterRow : DataRow
        {
            private CloudAccountDA.CreditDefaultTermsMasterDataTable tableCreditDefaultTermsMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CreditDefaultTermsMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCreditDefaultTermsMaster = (CloudAccountDA.CreditDefaultTermsMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDefaultTermsNull()
            {
                return base.IsNull(this.tableCreditDefaultTermsMaster.DefaultTermsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDefaultTermsNull()
            {
                base[this.tableCreditDefaultTermsMaster.DefaultTermsColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCreditDefaultTermsMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCreditDefaultTermsMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CreditDefaultTermsID
            {
                get
                {
                    return (int) base[this.tableCreditDefaultTermsMaster.CreditDefaultTermsIDColumn];
                }
                set
                {
                    base[this.tableCreditDefaultTermsMaster.CreditDefaultTermsIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string DefaultTerms
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditDefaultTermsMaster.DefaultTermsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DefaultTerms' in table 'CreditDefaultTermsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditDefaultTermsMaster.DefaultTermsColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CreditDefaultTermsMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CreditDefaultTermsMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CreditDefaultTermsMasterRowChangeEvent(CloudAccountDA.CreditDefaultTermsMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditDefaultTermsMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CreditDefaultTermsMasterRowChangeEventHandler(object sender, CloudAccountDA.CreditDefaultTermsMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CreditHistoryDetailDataTable : TypedTableBase<CloudAccountDA.CreditHistoryDetailRow>
        {
            private DataColumn columnCreditHistoryDetailID;
            private DataColumn columnCreditID;
            private DataColumn columnInvoiceDate;
            private DataColumn columnInvoiceNo;
            private DataColumn columnUsedAmount;
            private DataColumn columnUsedDate;
            private DataColumn columnUsedNotes;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditHistoryDetailRowChangeEventHandler CreditHistoryDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditHistoryDetailRowChangeEventHandler CreditHistoryDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditHistoryDetailRowChangeEventHandler CreditHistoryDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditHistoryDetailRowChangeEventHandler CreditHistoryDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CreditHistoryDetailDataTable()
            {
                base.TableName = "CreditHistoryDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreditHistoryDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CreditHistoryDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCreditHistoryDetailRow(CloudAccountDA.CreditHistoryDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditHistoryDetailRow AddCreditHistoryDetailRow(int CreditID, string InvoiceNo, DateTime InvoiceDate, decimal UsedAmount, string UsedNotes, DateTime UsedDate)
            {
                CloudAccountDA.CreditHistoryDetailRow row = (CloudAccountDA.CreditHistoryDetailRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CreditID;
                objArray2[2] = InvoiceNo;
                objArray2[3] = InvoiceDate;
                objArray2[4] = UsedAmount;
                objArray2[5] = UsedNotes;
                objArray2[6] = UsedDate;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CreditHistoryDetailDataTable table = (CloudAccountDA.CreditHistoryDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CreditHistoryDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditHistoryDetailRow FindByCreditHistoryDetailID(int CreditHistoryDetailID)
            {
                return (CloudAccountDA.CreditHistoryDetailRow) base.Rows.Find(new object[] { CreditHistoryDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CreditHistoryDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CreditHistoryDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnCreditHistoryDetailID = new DataColumn("CreditHistoryDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditHistoryDetailID);
                this.columnCreditID = new DataColumn("CreditID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditID);
                this.columnInvoiceNo = new DataColumn("InvoiceNo", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceNo);
                this.columnInvoiceDate = new DataColumn("InvoiceDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDate);
                this.columnUsedAmount = new DataColumn("UsedAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUsedAmount);
                this.columnUsedNotes = new DataColumn("UsedNotes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUsedNotes);
                this.columnUsedDate = new DataColumn("UsedDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnUsedDate);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCreditHistoryDetailID }, true));
                this.columnCreditHistoryDetailID.AutoIncrement = true;
                this.columnCreditHistoryDetailID.AutoIncrementSeed = -1L;
                this.columnCreditHistoryDetailID.AutoIncrementStep = -1L;
                this.columnCreditHistoryDetailID.AllowDBNull = false;
                this.columnCreditHistoryDetailID.ReadOnly = true;
                this.columnCreditHistoryDetailID.Unique = true;
                this.columnCreditID.AllowDBNull = false;
                this.columnInvoiceNo.AllowDBNull = false;
                this.columnInvoiceNo.MaxLength = 50;
                this.columnInvoiceDate.AllowDBNull = false;
                this.columnUsedAmount.AllowDBNull = false;
                this.columnUsedNotes.MaxLength = 500;
                this.columnUsedDate.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCreditHistoryDetailID = base.Columns["CreditHistoryDetailID"];
                this.columnCreditID = base.Columns["CreditID"];
                this.columnInvoiceNo = base.Columns["InvoiceNo"];
                this.columnInvoiceDate = base.Columns["InvoiceDate"];
                this.columnUsedAmount = base.Columns["UsedAmount"];
                this.columnUsedNotes = base.Columns["UsedNotes"];
                this.columnUsedDate = base.Columns["UsedDate"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditHistoryDetailRow NewCreditHistoryDetailRow()
            {
                return (CloudAccountDA.CreditHistoryDetailRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CreditHistoryDetailRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CreditHistoryDetailRowChanged != null)
                {
                    this.CreditHistoryDetailRowChanged(this, new CloudAccountDA.CreditHistoryDetailRowChangeEvent((CloudAccountDA.CreditHistoryDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CreditHistoryDetailRowChanging != null)
                {
                    this.CreditHistoryDetailRowChanging(this, new CloudAccountDA.CreditHistoryDetailRowChangeEvent((CloudAccountDA.CreditHistoryDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CreditHistoryDetailRowDeleted != null)
                {
                    this.CreditHistoryDetailRowDeleted(this, new CloudAccountDA.CreditHistoryDetailRowChangeEvent((CloudAccountDA.CreditHistoryDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CreditHistoryDetailRowDeleting != null)
                {
                    this.CreditHistoryDetailRowDeleting(this, new CloudAccountDA.CreditHistoryDetailRowChangeEvent((CloudAccountDA.CreditHistoryDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCreditHistoryDetailRow(CloudAccountDA.CreditHistoryDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreditHistoryDetailIDColumn
            {
                get
                {
                    return this.columnCreditHistoryDetailID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditIDColumn
            {
                get
                {
                    return this.columnCreditID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceDateColumn
            {
                get
                {
                    return this.columnInvoiceDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceNoColumn
            {
                get
                {
                    return this.columnInvoiceNo;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditHistoryDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CreditHistoryDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn UsedAmountColumn
            {
                get
                {
                    return this.columnUsedAmount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UsedDateColumn
            {
                get
                {
                    return this.columnUsedDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UsedNotesColumn
            {
                get
                {
                    return this.columnUsedNotes;
                }
            }
        }
        
        public class CreditHistoryDetailRow : DataRow
        {
            private CloudAccountDA.CreditHistoryDetailDataTable tableCreditHistoryDetail;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CreditHistoryDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCreditHistoryDetail = (CloudAccountDA.CreditHistoryDetailDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsUsedNotesNull()
            {
                return base.IsNull(this.tableCreditHistoryDetail.UsedNotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUsedNotesNull()
            {
                base[this.tableCreditHistoryDetail.UsedNotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CreditHistoryDetailID
            {
                get
                {
                    return (int) base[this.tableCreditHistoryDetail.CreditHistoryDetailIDColumn];
                }
                set
                {
                    base[this.tableCreditHistoryDetail.CreditHistoryDetailIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CreditID
            {
                get
                {
                    return (int) base[this.tableCreditHistoryDetail.CreditIDColumn];
                }
                set
                {
                    base[this.tableCreditHistoryDetail.CreditIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime InvoiceDate
            {
                get
                {
                    return (DateTime) base[this.tableCreditHistoryDetail.InvoiceDateColumn];
                }
                set
                {
                    base[this.tableCreditHistoryDetail.InvoiceDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string InvoiceNo
            {
                get
                {
                    return (string) base[this.tableCreditHistoryDetail.InvoiceNoColumn];
                }
                set
                {
                    base[this.tableCreditHistoryDetail.InvoiceNoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal UsedAmount
            {
                get
                {
                    return (decimal) base[this.tableCreditHistoryDetail.UsedAmountColumn];
                }
                set
                {
                    base[this.tableCreditHistoryDetail.UsedAmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime UsedDate
            {
                get
                {
                    return (DateTime) base[this.tableCreditHistoryDetail.UsedDateColumn];
                }
                set
                {
                    base[this.tableCreditHistoryDetail.UsedDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string UsedNotes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditHistoryDetail.UsedNotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UsedNotes' in table 'CreditHistoryDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditHistoryDetail.UsedNotesColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CreditHistoryDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CreditHistoryDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CreditHistoryDetailRowChangeEvent(CloudAccountDA.CreditHistoryDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditHistoryDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CreditHistoryDetailRowChangeEventHandler(object sender, CloudAccountDA.CreditHistoryDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CreditItemDetailDataTable : TypedTableBase<CloudAccountDA.CreditItemDetailRow>
        {
            private DataColumn columnCreditID;
            private DataColumn columnCreditItemDetailID;
            private DataColumn columnItemDesc;
            private DataColumn columnItemID;
            private DataColumn columnQuantity;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTotal;
            private DataColumn columnUnitCost;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditItemDetailRowChangeEventHandler CreditItemDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditItemDetailRowChangeEventHandler CreditItemDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditItemDetailRowChangeEventHandler CreditItemDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditItemDetailRowChangeEventHandler CreditItemDetailRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreditItemDetailDataTable()
            {
                base.TableName = "CreditItemDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreditItemDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CreditItemDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCreditItemDetailRow(CloudAccountDA.CreditItemDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditItemDetailRow AddCreditItemDetailRow(int CreditID, int ItemID, string ItemDesc, decimal UnitCost, decimal Quantity, int Tax1, int Tax2, decimal Total)
            {
                CloudAccountDA.CreditItemDetailRow row = (CloudAccountDA.CreditItemDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = CreditID;
                objArray2[2] = ItemID;
                objArray2[3] = ItemDesc;
                objArray2[4] = UnitCost;
                objArray2[5] = Quantity;
                objArray2[6] = Tax1;
                objArray2[7] = Tax2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CreditItemDetailDataTable table = (CloudAccountDA.CreditItemDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CreditItemDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditItemDetailRow FindByCreditItemDetailID(int CreditItemDetailID)
            {
                return (CloudAccountDA.CreditItemDetailRow) base.Rows.Find(new object[] { CreditItemDetailID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CreditItemDetailRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CreditItemDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCreditItemDetailID = new DataColumn("CreditItemDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditItemDetailID);
                this.columnCreditID = new DataColumn("CreditID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditID);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnItemDesc = new DataColumn("ItemDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnItemDesc);
                this.columnUnitCost = new DataColumn("UnitCost", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUnitCost);
                this.columnQuantity = new DataColumn("Quantity", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCreditItemDetailID }, true));
                this.columnCreditItemDetailID.AutoIncrement = true;
                this.columnCreditItemDetailID.AutoIncrementSeed = -1L;
                this.columnCreditItemDetailID.AutoIncrementStep = -1L;
                this.columnCreditItemDetailID.AllowDBNull = false;
                this.columnCreditItemDetailID.ReadOnly = true;
                this.columnCreditItemDetailID.Unique = true;
                this.columnCreditID.AllowDBNull = false;
                this.columnItemID.AllowDBNull = false;
                this.columnItemDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCreditItemDetailID = base.Columns["CreditItemDetailID"];
                this.columnCreditID = base.Columns["CreditID"];
                this.columnItemID = base.Columns["ItemID"];
                this.columnItemDesc = base.Columns["ItemDesc"];
                this.columnUnitCost = base.Columns["UnitCost"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditItemDetailRow NewCreditItemDetailRow()
            {
                return (CloudAccountDA.CreditItemDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CreditItemDetailRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CreditItemDetailRowChanged != null)
                {
                    this.CreditItemDetailRowChanged(this, new CloudAccountDA.CreditItemDetailRowChangeEvent((CloudAccountDA.CreditItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CreditItemDetailRowChanging != null)
                {
                    this.CreditItemDetailRowChanging(this, new CloudAccountDA.CreditItemDetailRowChangeEvent((CloudAccountDA.CreditItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CreditItemDetailRowDeleted != null)
                {
                    this.CreditItemDetailRowDeleted(this, new CloudAccountDA.CreditItemDetailRowChangeEvent((CloudAccountDA.CreditItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CreditItemDetailRowDeleting != null)
                {
                    this.CreditItemDetailRowDeleting(this, new CloudAccountDA.CreditItemDetailRowChangeEvent((CloudAccountDA.CreditItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCreditItemDetailRow(CloudAccountDA.CreditItemDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditIDColumn
            {
                get
                {
                    return this.columnCreditID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditItemDetailIDColumn
            {
                get
                {
                    return this.columnCreditItemDetailID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditItemDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CreditItemDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemDescColumn
            {
                get
                {
                    return this.columnItemDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemIDColumn
            {
                get
                {
                    return this.columnItemID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn UnitCostColumn
            {
                get
                {
                    return this.columnUnitCost;
                }
            }
        }
        
        public class CreditItemDetailRow : DataRow
        {
            private CloudAccountDA.CreditItemDetailDataTable tableCreditItemDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreditItemDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCreditItemDetail = (CloudAccountDA.CreditItemDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsItemDescNull()
            {
                return base.IsNull(this.tableCreditItemDetail.ItemDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQuantityNull()
            {
                return base.IsNull(this.tableCreditItemDetail.QuantityColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableCreditItemDetail.Tax1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableCreditItemDetail.Tax2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableCreditItemDetail.TotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnitCostNull()
            {
                return base.IsNull(this.tableCreditItemDetail.UnitCostColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetItemDescNull()
            {
                base[this.tableCreditItemDetail.ItemDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetQuantityNull()
            {
                base[this.tableCreditItemDetail.QuantityColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax1Null()
            {
                base[this.tableCreditItemDetail.Tax1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax2Null()
            {
                base[this.tableCreditItemDetail.Tax2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalNull()
            {
                base[this.tableCreditItemDetail.TotalColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUnitCostNull()
            {
                base[this.tableCreditItemDetail.UnitCostColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CreditID
            {
                get
                {
                    return (int) base[this.tableCreditItemDetail.CreditIDColumn];
                }
                set
                {
                    base[this.tableCreditItemDetail.CreditIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CreditItemDetailID
            {
                get
                {
                    return (int) base[this.tableCreditItemDetail.CreditItemDetailIDColumn];
                }
                set
                {
                    base[this.tableCreditItemDetail.CreditItemDetailIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ItemDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditItemDetail.ItemDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ItemDesc' in table 'CreditItemDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditItemDetail.ItemDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ItemID
            {
                get
                {
                    return (int) base[this.tableCreditItemDetail.ItemIDColumn];
                }
                set
                {
                    base[this.tableCreditItemDetail.ItemIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Quantity
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditItemDetail.QuantityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Quantity' in table 'CreditItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditItemDetail.QuantityColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCreditItemDetail.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'CreditItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditItemDetail.Tax1Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCreditItemDetail.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'CreditItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditItemDetail.Tax2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditItemDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'CreditItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditItemDetail.TotalColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal UnitCost
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditItemDetail.UnitCostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UnitCost' in table 'CreditItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditItemDetail.UnitCostColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CreditItemDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CreditItemDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CreditItemDetailRowChangeEvent(CloudAccountDA.CreditItemDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditItemDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CreditItemDetailRowChangeEventHandler(object sender, CloudAccountDA.CreditItemDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CreditMasterDataTable : TypedTableBase<CloudAccountDA.CreditMasterRow>
        {
            private DataColumn columnClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnCreditDate;
            private DataColumn columnCreditID;
            private DataColumn columnCreditNumber;
            private DataColumn columnCreditRemaingTotal;
            private DataColumn columnCreditStatus;
            private DataColumn columnCreditTotal;
            private DataColumn columnCurrencyID;
            private DataColumn columnNotes;
            private DataColumn columnTerms;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditMasterRowChangeEventHandler CreditMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditMasterRowChangeEventHandler CreditMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditMasterRowChangeEventHandler CreditMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditMasterRowChangeEventHandler CreditMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CreditMasterDataTable()
            {
                base.TableName = "CreditMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreditMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CreditMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCreditMasterRow(CloudAccountDA.CreditMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditMasterRow AddCreditMasterRow(int CompanyID, int ClientID, int CurrencyID, string CreditNumber, DateTime CreditDate, string Notes, string Terms, string CreditStatus, decimal CreditRemaingTotal, decimal CreditTotal)
            {
                CloudAccountDA.CreditMasterRow row = (CloudAccountDA.CreditMasterRow) base.NewRow();
                object[] objArray2 = new object[11];
                objArray2[1] = CompanyID;
                objArray2[2] = ClientID;
                objArray2[3] = CurrencyID;
                objArray2[4] = CreditNumber;
                objArray2[5] = CreditDate;
                objArray2[6] = Notes;
                objArray2[7] = Terms;
                objArray2[8] = CreditStatus;
                objArray2[9] = CreditRemaingTotal;
                objArray2[10] = CreditTotal;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.CreditMasterDataTable table = (CloudAccountDA.CreditMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CreditMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditMasterRow FindByCreditID(int CreditID)
            {
                return (CloudAccountDA.CreditMasterRow) base.Rows.Find(new object[] { CreditID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CreditMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CreditMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCreditID = new DataColumn("CreditID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnCreditNumber = new DataColumn("CreditNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreditNumber);
                this.columnCreditDate = new DataColumn("CreditDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnCreditDate);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnTerms = new DataColumn("Terms", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTerms);
                this.columnCreditStatus = new DataColumn("CreditStatus", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreditStatus);
                this.columnCreditRemaingTotal = new DataColumn("CreditRemaingTotal", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnCreditRemaingTotal);
                this.columnCreditTotal = new DataColumn("CreditTotal", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnCreditTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCreditID }, true));
                this.columnCreditID.AutoIncrement = true;
                this.columnCreditID.AutoIncrementSeed = -1L;
                this.columnCreditID.AutoIncrementStep = -1L;
                this.columnCreditID.AllowDBNull = false;
                this.columnCreditID.ReadOnly = true;
                this.columnCreditID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnCreditNumber.MaxLength = 50;
                this.columnNotes.MaxLength = 0x7fffffff;
                this.columnTerms.MaxLength = 0x7fffffff;
                this.columnCreditStatus.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCreditID = base.Columns["CreditID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnCreditNumber = base.Columns["CreditNumber"];
                this.columnCreditDate = base.Columns["CreditDate"];
                this.columnNotes = base.Columns["Notes"];
                this.columnTerms = base.Columns["Terms"];
                this.columnCreditStatus = base.Columns["CreditStatus"];
                this.columnCreditRemaingTotal = base.Columns["CreditRemaingTotal"];
                this.columnCreditTotal = base.Columns["CreditTotal"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditMasterRow NewCreditMasterRow()
            {
                return (CloudAccountDA.CreditMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CreditMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CreditMasterRowChanged != null)
                {
                    this.CreditMasterRowChanged(this, new CloudAccountDA.CreditMasterRowChangeEvent((CloudAccountDA.CreditMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CreditMasterRowChanging != null)
                {
                    this.CreditMasterRowChanging(this, new CloudAccountDA.CreditMasterRowChangeEvent((CloudAccountDA.CreditMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CreditMasterRowDeleted != null)
                {
                    this.CreditMasterRowDeleted(this, new CloudAccountDA.CreditMasterRowChangeEvent((CloudAccountDA.CreditMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CreditMasterRowDeleting != null)
                {
                    this.CreditMasterRowDeleting(this, new CloudAccountDA.CreditMasterRowChangeEvent((CloudAccountDA.CreditMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCreditMasterRow(CloudAccountDA.CreditMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreditDateColumn
            {
                get
                {
                    return this.columnCreditDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditIDColumn
            {
                get
                {
                    return this.columnCreditID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreditNumberColumn
            {
                get
                {
                    return this.columnCreditNumber;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditRemaingTotalColumn
            {
                get
                {
                    return this.columnCreditRemaingTotal;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreditStatusColumn
            {
                get
                {
                    return this.columnCreditStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditTotalColumn
            {
                get
                {
                    return this.columnCreditTotal;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CurrencyIDColumn
            {
                get
                {
                    return this.columnCurrencyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CreditMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TermsColumn
            {
                get
                {
                    return this.columnTerms;
                }
            }
        }
        
        public class CreditMasterRow : DataRow
        {
            private CloudAccountDA.CreditMasterDataTable tableCreditMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreditMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCreditMaster = (CloudAccountDA.CreditMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCreditDateNull()
            {
                return base.IsNull(this.tableCreditMaster.CreditDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDatiSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCreditNumberNull()
            {
                return base.IsNull(this.tableCreditMaster.CreditNumberColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreditRemaingTotalNull()
            {
                return base.IsNull(this.tableCreditMaster.CreditRemaingTotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreditStatusNull()
            {
                return base.IsNull(this.tableCreditMaster.CreditStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCreditTotalNull()
            {
                return base.IsNull(this.tableCreditMaster.CreditTotalColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrencyIDNull()
            {
                return base.IsNull(this.tableCreditMaster.CurrencyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableCreditMaster.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTermsNull()
            {
                return base.IsNull(this.tableCreditMaster.TermsColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreditDateNull()
            {
                base[this.tableCreditMaster.CreditDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreditNumberNull()
            {
                base[this.tableCreditMaster.CreditNumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreditRemaingTotalNull()
            {
                base[this.tableCreditMaster.CreditRemaingTotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCreditStatusNull()
            {
                base[this.tableCreditMaster.CreditStatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreditTotalNull()
            {
                base[this.tableCreditMaster.CreditTotalColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrencyIDNull()
            {
                base[this.tableCreditMaster.CurrencyIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tableCreditMaster.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTermsNull()
            {
                base[this.tableCreditMaster.TermsColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ClientID
            {
                get
                {
                    return (int) base[this.tableCreditMaster.ClientIDColumn];
                }
                set
                {
                    base[this.tableCreditMaster.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableCreditMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableCreditMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime CreditDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableCreditMaster.CreditDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CreditDate' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableCreditMaster.CreditDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CreditID
            {
                get
                {
                    return (int) base[this.tableCreditMaster.CreditIDColumn];
                }
                set
                {
                    base[this.tableCreditMaster.CreditIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CreditNumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditMaster.CreditNumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CreditNumber' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditMaster.CreditNumberColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal CreditRemaingTotal
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditMaster.CreditRemaingTotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CreditRemaingTotal' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditMaster.CreditRemaingTotalColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CreditStatus
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditMaster.CreditStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CreditStatus' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditMaster.CreditStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal CreditTotal
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditMaster.CreditTotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CreditTotal' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditMaster.CreditTotalColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CurrencyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCreditMaster.CurrencyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyID' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditMaster.CurrencyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditMaster.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Terms
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditMaster.TermsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Terms' in table 'CreditMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditMaster.TermsColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CreditMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CreditMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CreditMasterRowChangeEvent(CloudAccountDA.CreditMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CreditMasterRowChangeEventHandler(object sender, CloudAccountDA.CreditMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CreditTaskDetailDataTable : TypedTableBase<CloudAccountDA.CreditTaskDetailRow>
        {
            private DataColumn columnCreditID;
            private DataColumn columnCreditTaskDetailID;
            private DataColumn columnHours;
            private DataColumn columnRate;
            private DataColumn columnTaskDesc;
            private DataColumn columnTaskID;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTotal;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditTaskDetailRowChangeEventHandler CreditTaskDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditTaskDetailRowChangeEventHandler CreditTaskDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditTaskDetailRowChangeEventHandler CreditTaskDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CreditTaskDetailRowChangeEventHandler CreditTaskDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CreditTaskDetailDataTable()
            {
                base.TableName = "CreditTaskDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreditTaskDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CreditTaskDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCreditTaskDetailRow(CloudAccountDA.CreditTaskDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditTaskDetailRow AddCreditTaskDetailRow(int CreditID, int TaskID, string TaskDesc, decimal Rate, decimal Hours, int Tax1, int Tax2, decimal Total)
            {
                CloudAccountDA.CreditTaskDetailRow row = (CloudAccountDA.CreditTaskDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = CreditID;
                objArray2[2] = TaskID;
                objArray2[3] = TaskDesc;
                objArray2[4] = Rate;
                objArray2[5] = Hours;
                objArray2[6] = Tax1;
                objArray2[7] = Tax2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CreditTaskDetailDataTable table = (CloudAccountDA.CreditTaskDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CreditTaskDetailDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CreditTaskDetailRow FindByCreditTaskDetailID(int CreditTaskDetailID)
            {
                return (CloudAccountDA.CreditTaskDetailRow) base.Rows.Find(new object[] { CreditTaskDetailID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CreditTaskDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CreditTaskDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCreditTaskDetailID = new DataColumn("CreditTaskDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditTaskDetailID);
                this.columnCreditID = new DataColumn("CreditID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCreditID);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnTaskDesc = new DataColumn("TaskDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaskDesc);
                this.columnRate = new DataColumn("Rate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCreditTaskDetailID }, true));
                this.columnCreditTaskDetailID.AutoIncrement = true;
                this.columnCreditTaskDetailID.AutoIncrementSeed = -1L;
                this.columnCreditTaskDetailID.AutoIncrementStep = -1L;
                this.columnCreditTaskDetailID.AllowDBNull = false;
                this.columnCreditTaskDetailID.ReadOnly = true;
                this.columnCreditTaskDetailID.Unique = true;
                this.columnCreditID.AllowDBNull = false;
                this.columnTaskID.AllowDBNull = false;
                this.columnTaskDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnCreditTaskDetailID = base.Columns["CreditTaskDetailID"];
                this.columnCreditID = base.Columns["CreditID"];
                this.columnTaskID = base.Columns["TaskID"];
                this.columnTaskDesc = base.Columns["TaskDesc"];
                this.columnRate = base.Columns["Rate"];
                this.columnHours = base.Columns["Hours"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditTaskDetailRow NewCreditTaskDetailRow()
            {
                return (CloudAccountDA.CreditTaskDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CreditTaskDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CreditTaskDetailRowChanged != null)
                {
                    this.CreditTaskDetailRowChanged(this, new CloudAccountDA.CreditTaskDetailRowChangeEvent((CloudAccountDA.CreditTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CreditTaskDetailRowChanging != null)
                {
                    this.CreditTaskDetailRowChanging(this, new CloudAccountDA.CreditTaskDetailRowChangeEvent((CloudAccountDA.CreditTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CreditTaskDetailRowDeleted != null)
                {
                    this.CreditTaskDetailRowDeleted(this, new CloudAccountDA.CreditTaskDetailRowChangeEvent((CloudAccountDA.CreditTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CreditTaskDetailRowDeleting != null)
                {
                    this.CreditTaskDetailRowDeleting(this, new CloudAccountDA.CreditTaskDetailRowChangeEvent((CloudAccountDA.CreditTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCreditTaskDetailRow(CloudAccountDA.CreditTaskDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreditIDColumn
            {
                get
                {
                    return this.columnCreditID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditTaskDetailIDColumn
            {
                get
                {
                    return this.columnCreditTaskDetailID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditTaskDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CreditTaskDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RateColumn
            {
                get
                {
                    return this.columnRate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskDescColumn
            {
                get
                {
                    return this.columnTaskDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
        }
        
        public class CreditTaskDetailRow : DataRow
        {
            private CloudAccountDA.CreditTaskDetailDataTable tableCreditTaskDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CreditTaskDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCreditTaskDetail = (CloudAccountDA.CreditTaskDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableCreditTaskDetail.HoursColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRateNull()
            {
                return base.IsNull(this.tableCreditTaskDetail.RateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskDescNull()
            {
                return base.IsNull(this.tableCreditTaskDetail.TaskDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableCreditTaskDetail.Tax1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableCreditTaskDetail.Tax2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableCreditTaskDetail.TotalColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableCreditTaskDetail.HoursColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRateNull()
            {
                base[this.tableCreditTaskDetail.RateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaskDescNull()
            {
                base[this.tableCreditTaskDetail.TaskDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax1Null()
            {
                base[this.tableCreditTaskDetail.Tax1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax2Null()
            {
                base[this.tableCreditTaskDetail.Tax2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTotalNull()
            {
                base[this.tableCreditTaskDetail.TotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CreditID
            {
                get
                {
                    return (int) base[this.tableCreditTaskDetail.CreditIDColumn];
                }
                set
                {
                    base[this.tableCreditTaskDetail.CreditIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CreditTaskDetailID
            {
                get
                {
                    return (int) base[this.tableCreditTaskDetail.CreditTaskDetailIDColumn];
                }
                set
                {
                    base[this.tableCreditTaskDetail.CreditTaskDetailIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditTaskDetail.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'CreditTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditTaskDetail.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Rate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditTaskDetail.RateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Rate' in table 'CreditTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditTaskDetail.RateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TaskDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCreditTaskDetail.TaskDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaskDesc' in table 'CreditTaskDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCreditTaskDetail.TaskDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaskID
            {
                get
                {
                    return (int) base[this.tableCreditTaskDetail.TaskIDColumn];
                }
                set
                {
                    base[this.tableCreditTaskDetail.TaskIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCreditTaskDetail.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'CreditTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditTaskDetail.Tax1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableCreditTaskDetail.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'CreditTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditTaskDetail.Tax2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableCreditTaskDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'CreditTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableCreditTaskDetail.TotalColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CreditTaskDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CreditTaskDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CreditTaskDetailRowChangeEvent(CloudAccountDA.CreditTaskDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CreditTaskDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CreditTaskDetailRowChangeEventHandler(object sender, CloudAccountDA.CreditTaskDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CurrencyMasterDataTable : TypedTableBase<CloudAccountDA.CurrencyMasterRow>
        {
            private DataColumn columnCountryID;
            private DataColumn columnCurrencyCode;
            private DataColumn columnCurrencyDesc;
            private DataColumn columnCurrencyID;
            private DataColumn columnCurrencyName;
            private DataColumn columnCurrencyStatus;
            private DataColumn columnCurrencySymbol;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrencyMasterRowChangeEventHandler CurrencyMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrencyMasterRowChangeEventHandler CurrencyMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrencyMasterRowChangeEventHandler CurrencyMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrencyMasterRowChangeEventHandler CurrencyMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CurrencyMasterDataTable()
            {
                base.TableName = "CurrencyMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CurrencyMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CurrencyMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddCurrencyMasterRow(CloudAccountDA.CurrencyMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrencyMasterRow AddCurrencyMasterRow(int CountryID, string CurrencyCode, string CurrencyName, string CurrencySymbol, string CurrencyDesc, bool CurrencyStatus)
            {
                CloudAccountDA.CurrencyMasterRow row = (CloudAccountDA.CurrencyMasterRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CountryID;
                objArray2[2] = CurrencyCode;
                objArray2[3] = CurrencyName;
                objArray2[4] = CurrencySymbol;
                objArray2[5] = CurrencyDesc;
                objArray2[6] = CurrencyStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CurrencyMasterDataTable table = (CloudAccountDA.CurrencyMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CurrencyMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrencyMasterRow FindByCurrencyID(int CurrencyID)
            {
                return (CloudAccountDA.CurrencyMasterRow) base.Rows.Find(new object[] { CurrencyID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CurrencyMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CurrencyMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnCurrencyCode = new DataColumn("CurrencyCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyCode);
                this.columnCurrencyName = new DataColumn("CurrencyName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyName);
                this.columnCurrencySymbol = new DataColumn("CurrencySymbol", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencySymbol);
                this.columnCurrencyDesc = new DataColumn("CurrencyDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyDesc);
                this.columnCurrencyStatus = new DataColumn("CurrencyStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCurrencyID }, true));
                this.columnCurrencyID.AutoIncrement = true;
                this.columnCurrencyID.AutoIncrementSeed = -1L;
                this.columnCurrencyID.AutoIncrementStep = -1L;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnCurrencyID.ReadOnly = true;
                this.columnCurrencyID.Unique = true;
                this.columnCountryID.AllowDBNull = false;
                this.columnCurrencyCode.MaxLength = 50;
                this.columnCurrencyName.AllowDBNull = false;
                this.columnCurrencyName.MaxLength = 50;
                this.columnCurrencySymbol.MaxLength = 10;
                this.columnCurrencyDesc.MaxLength = 500;
                this.columnCurrencyStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnCurrencyCode = base.Columns["CurrencyCode"];
                this.columnCurrencyName = base.Columns["CurrencyName"];
                this.columnCurrencySymbol = base.Columns["CurrencySymbol"];
                this.columnCurrencyDesc = base.Columns["CurrencyDesc"];
                this.columnCurrencyStatus = base.Columns["CurrencyStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrencyMasterRow NewCurrencyMasterRow()
            {
                return (CloudAccountDA.CurrencyMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CurrencyMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CurrencyMasterRowChanged != null)
                {
                    this.CurrencyMasterRowChanged(this, new CloudAccountDA.CurrencyMasterRowChangeEvent((CloudAccountDA.CurrencyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CurrencyMasterRowChanging != null)
                {
                    this.CurrencyMasterRowChanging(this, new CloudAccountDA.CurrencyMasterRowChangeEvent((CloudAccountDA.CurrencyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CurrencyMasterRowDeleted != null)
                {
                    this.CurrencyMasterRowDeleted(this, new CloudAccountDA.CurrencyMasterRowChangeEvent((CloudAccountDA.CurrencyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CurrencyMasterRowDeleting != null)
                {
                    this.CurrencyMasterRowDeleting(this, new CloudAccountDA.CurrencyMasterRowChangeEvent((CloudAccountDA.CurrencyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCurrencyMasterRow(CloudAccountDA.CurrencyMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CountryIDColumn
            {
                get
                {
                    return this.columnCountryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrencyCodeColumn
            {
                get
                {
                    return this.columnCurrencyCode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CurrencyDescColumn
            {
                get
                {
                    return this.columnCurrencyDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CurrencyIDColumn
            {
                get
                {
                    return this.columnCurrencyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrencyNameColumn
            {
                get
                {
                    return this.columnCurrencyName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrencyStatusColumn
            {
                get
                {
                    return this.columnCurrencyStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrencySymbolColumn
            {
                get
                {
                    return this.columnCurrencySymbol;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CurrencyMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CurrencyMasterRow) base.Rows[index];
                }
            }
        }
        
        public class CurrencyMasterRow : DataRow
        {
            private CloudAccountDA.CurrencyMasterDataTable tableCurrencyMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal CurrencyMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCurrencyMaster = (CloudAccountDA.CurrencyMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrencyCodeNull()
            {
                return base.IsNull(this.tableCurrencyMaster.CurrencyCodeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrencyDescNull()
            {
                return base.IsNull(this.tableCurrencyMaster.CurrencyDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrencySymbolNull()
            {
                return base.IsNull(this.tableCurrencyMaster.CurrencySymbolColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrencyCodeNull()
            {
                base[this.tableCurrencyMaster.CurrencyCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCurrencyDescNull()
            {
                base[this.tableCurrencyMaster.CurrencyDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCurrencySymbolNull()
            {
                base[this.tableCurrencyMaster.CurrencySymbolColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CountryID
            {
                get
                {
                    return (int) base[this.tableCurrencyMaster.CountryIDColumn];
                }
                set
                {
                    base[this.tableCurrencyMaster.CountryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CurrencyCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCurrencyMaster.CurrencyCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyCode' in table 'CurrencyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCurrencyMaster.CurrencyCodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CurrencyDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCurrencyMaster.CurrencyDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyDesc' in table 'CurrencyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCurrencyMaster.CurrencyDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CurrencyID
            {
                get
                {
                    return (int) base[this.tableCurrencyMaster.CurrencyIDColumn];
                }
                set
                {
                    base[this.tableCurrencyMaster.CurrencyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CurrencyName
            {
                get
                {
                    return (string) base[this.tableCurrencyMaster.CurrencyNameColumn];
                }
                set
                {
                    base[this.tableCurrencyMaster.CurrencyNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool CurrencyStatus
            {
                get
                {
                    return (bool) base[this.tableCurrencyMaster.CurrencyStatusColumn];
                }
                set
                {
                    base[this.tableCurrencyMaster.CurrencyStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CurrencySymbol
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCurrencyMaster.CurrencySymbolColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencySymbol' in table 'CurrencyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCurrencyMaster.CurrencySymbolColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CurrencyMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CurrencyMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CurrencyMasterRowChangeEvent(CloudAccountDA.CurrencyMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrencyMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CurrencyMasterRowChangeEventHandler(object sender, CloudAccountDA.CurrencyMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class CurrentAccountMasterDataTable : TypedTableBase<CloudAccountDA.CurrentAccountMasterRow>
        {
            private DataColumn columnCurrentAccountDesc;
            private DataColumn columnCurrentAccountID;
            private DataColumn columnCurrentAccountName;
            private DataColumn columnCurrentAccountStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrentAccountMasterRowChangeEventHandler CurrentAccountMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrentAccountMasterRowChangeEventHandler CurrentAccountMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrentAccountMasterRowChangeEventHandler CurrentAccountMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.CurrentAccountMasterRowChangeEventHandler CurrentAccountMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CurrentAccountMasterDataTable()
            {
                base.TableName = "CurrentAccountMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CurrentAccountMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected CurrentAccountMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCurrentAccountMasterRow(CloudAccountDA.CurrentAccountMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrentAccountMasterRow AddCurrentAccountMasterRow(string CurrentAccountName, string CurrentAccountDesc, bool CurrentAccountStatus)
            {
                CloudAccountDA.CurrentAccountMasterRow row = (CloudAccountDA.CurrentAccountMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CurrentAccountName;
                objArray2[2] = CurrentAccountDesc;
                objArray2[3] = CurrentAccountStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.CurrentAccountMasterDataTable table = (CloudAccountDA.CurrentAccountMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.CurrentAccountMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrentAccountMasterRow FindByCurrentAccountID(int CurrentAccountID)
            {
                return (CloudAccountDA.CurrentAccountMasterRow) base.Rows.Find(new object[] { CurrentAccountID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.CurrentAccountMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "CurrentAccountMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnCurrentAccountID = new DataColumn("CurrentAccountID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrentAccountID);
                this.columnCurrentAccountName = new DataColumn("CurrentAccountName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCurrentAccountName);
                this.columnCurrentAccountDesc = new DataColumn("CurrentAccountDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCurrentAccountDesc);
                this.columnCurrentAccountStatus = new DataColumn("CurrentAccountStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCurrentAccountStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnCurrentAccountID }, true));
                this.columnCurrentAccountID.AutoIncrement = true;
                this.columnCurrentAccountID.AutoIncrementSeed = -1L;
                this.columnCurrentAccountID.AutoIncrementStep = -1L;
                this.columnCurrentAccountID.AllowDBNull = false;
                this.columnCurrentAccountID.ReadOnly = true;
                this.columnCurrentAccountID.Unique = true;
                this.columnCurrentAccountName.AllowDBNull = false;
                this.columnCurrentAccountName.MaxLength = 100;
                this.columnCurrentAccountDesc.MaxLength = 500;
                this.columnCurrentAccountStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnCurrentAccountID = base.Columns["CurrentAccountID"];
                this.columnCurrentAccountName = base.Columns["CurrentAccountName"];
                this.columnCurrentAccountDesc = base.Columns["CurrentAccountDesc"];
                this.columnCurrentAccountStatus = base.Columns["CurrentAccountStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrentAccountMasterRow NewCurrentAccountMasterRow()
            {
                return (CloudAccountDA.CurrentAccountMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.CurrentAccountMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.CurrentAccountMasterRowChanged != null)
                {
                    this.CurrentAccountMasterRowChanged(this, new CloudAccountDA.CurrentAccountMasterRowChangeEvent((CloudAccountDA.CurrentAccountMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.CurrentAccountMasterRowChanging != null)
                {
                    this.CurrentAccountMasterRowChanging(this, new CloudAccountDA.CurrentAccountMasterRowChangeEvent((CloudAccountDA.CurrentAccountMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.CurrentAccountMasterRowDeleted != null)
                {
                    this.CurrentAccountMasterRowDeleted(this, new CloudAccountDA.CurrentAccountMasterRowChangeEvent((CloudAccountDA.CurrentAccountMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.CurrentAccountMasterRowDeleting != null)
                {
                    this.CurrentAccountMasterRowDeleting(this, new CloudAccountDA.CurrentAccountMasterRowChangeEvent((CloudAccountDA.CurrentAccountMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveCurrentAccountMasterRow(CloudAccountDA.CurrentAccountMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrentAccountDescColumn
            {
                get
                {
                    return this.columnCurrentAccountDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrentAccountIDColumn
            {
                get
                {
                    return this.columnCurrentAccountID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrentAccountNameColumn
            {
                get
                {
                    return this.columnCurrentAccountName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrentAccountStatusColumn
            {
                get
                {
                    return this.columnCurrentAccountStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.CurrentAccountMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.CurrentAccountMasterRow) base.Rows[index];
                }
            }
        }
        
        public class CurrentAccountMasterRow : DataRow
        {
            private CloudAccountDA.CurrentAccountMasterDataTable tableCurrentAccountMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CurrentAccountMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableCurrentAccountMaster = (CloudAccountDA.CurrentAccountMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrentAccountDescNull()
            {
                return base.IsNull(this.tableCurrentAccountMaster.CurrentAccountDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrentAccountDescNull()
            {
                base[this.tableCurrentAccountMaster.CurrentAccountDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CurrentAccountDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableCurrentAccountMaster.CurrentAccountDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrentAccountDesc' in table 'CurrentAccountMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableCurrentAccountMaster.CurrentAccountDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CurrentAccountID
            {
                get
                {
                    return (int) base[this.tableCurrentAccountMaster.CurrentAccountIDColumn];
                }
                set
                {
                    base[this.tableCurrentAccountMaster.CurrentAccountIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string CurrentAccountName
            {
                get
                {
                    return (string) base[this.tableCurrentAccountMaster.CurrentAccountNameColumn];
                }
                set
                {
                    base[this.tableCurrentAccountMaster.CurrentAccountNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CurrentAccountStatus
            {
                get
                {
                    return (bool) base[this.tableCurrentAccountMaster.CurrentAccountStatusColumn];
                }
                set
                {
                    base[this.tableCurrentAccountMaster.CurrentAccountStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CurrentAccountMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.CurrentAccountMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CurrentAccountMasterRowChangeEvent(CloudAccountDA.CurrentAccountMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.CurrentAccountMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CurrentAccountMasterRowChangeEventHandler(object sender, CloudAccountDA.CurrentAccountMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class DoyinGoSupportDiscussionDataTable : TypedTableBase<CloudAccountDA.DoyinGoSupportDiscussionRow>
        {
            private DataColumn columnDoyinGoSupportDiscussionID;
            private DataColumn columnDoyinGoSupportTicketID;
            private DataColumn columnSupportMessage;
            private DataColumn columnSupportMessageBy;
            private DataColumn columnSupportMessageDate;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportDiscussionRowChangeEventHandler DoyinGoSupportDiscussionRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportDiscussionRowChangeEventHandler DoyinGoSupportDiscussionRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportDiscussionRowChangeEventHandler DoyinGoSupportDiscussionRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportDiscussionRowChangeEventHandler DoyinGoSupportDiscussionRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DoyinGoSupportDiscussionDataTable()
            {
                base.TableName = "DoyinGoSupportDiscussion";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DoyinGoSupportDiscussionDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected DoyinGoSupportDiscussionDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddDoyinGoSupportDiscussionRow(CloudAccountDA.DoyinGoSupportDiscussionRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoSupportDiscussionRow AddDoyinGoSupportDiscussionRow(int DoyinGoSupportTicketID, string SupportMessage, DateTime SupportMessageDate, string SupportMessageBy)
            {
                CloudAccountDA.DoyinGoSupportDiscussionRow row = (CloudAccountDA.DoyinGoSupportDiscussionRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = DoyinGoSupportTicketID;
                objArray2[2] = SupportMessage;
                objArray2[3] = SupportMessageDate;
                objArray2[4] = SupportMessageBy;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.DoyinGoSupportDiscussionDataTable table = (CloudAccountDA.DoyinGoSupportDiscussionDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.DoyinGoSupportDiscussionDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoSupportDiscussionRow FindByDoyinGoSupportDiscussionID(int DoyinGoSupportDiscussionID)
            {
                return (CloudAccountDA.DoyinGoSupportDiscussionRow) base.Rows.Find(new object[] { DoyinGoSupportDiscussionID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.DoyinGoSupportDiscussionRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "DoyinGoSupportDiscussionDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDoyinGoSupportDiscussionID = new DataColumn("DoyinGoSupportDiscussionID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnDoyinGoSupportDiscussionID);
                this.columnDoyinGoSupportTicketID = new DataColumn("DoyinGoSupportTicketID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnDoyinGoSupportTicketID);
                this.columnSupportMessage = new DataColumn("SupportMessage", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSupportMessage);
                this.columnSupportMessageDate = new DataColumn("SupportMessageDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnSupportMessageDate);
                this.columnSupportMessageBy = new DataColumn("SupportMessageBy", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSupportMessageBy);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnDoyinGoSupportDiscussionID }, true));
                this.columnDoyinGoSupportDiscussionID.AutoIncrement = true;
                this.columnDoyinGoSupportDiscussionID.AutoIncrementSeed = -1L;
                this.columnDoyinGoSupportDiscussionID.AutoIncrementStep = -1L;
                this.columnDoyinGoSupportDiscussionID.AllowDBNull = false;
                this.columnDoyinGoSupportDiscussionID.ReadOnly = true;
                this.columnDoyinGoSupportDiscussionID.Unique = true;
                this.columnDoyinGoSupportTicketID.AllowDBNull = false;
                this.columnSupportMessage.AllowDBNull = false;
                this.columnSupportMessage.MaxLength = 0x7fffffff;
                this.columnSupportMessageDate.AllowDBNull = false;
                this.columnSupportMessageBy.AllowDBNull = false;
                this.columnSupportMessageBy.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnDoyinGoSupportDiscussionID = base.Columns["DoyinGoSupportDiscussionID"];
                this.columnDoyinGoSupportTicketID = base.Columns["DoyinGoSupportTicketID"];
                this.columnSupportMessage = base.Columns["SupportMessage"];
                this.columnSupportMessageDate = base.Columns["SupportMessageDate"];
                this.columnSupportMessageBy = base.Columns["SupportMessageBy"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.DoyinGoSupportDiscussionRow NewDoyinGoSupportDiscussionRow()
            {
                return (CloudAccountDA.DoyinGoSupportDiscussionRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.DoyinGoSupportDiscussionRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.DoyinGoSupportDiscussionRowChanged != null)
                {
                    this.DoyinGoSupportDiscussionRowChanged(this, new CloudAccountDA.DoyinGoSupportDiscussionRowChangeEvent((CloudAccountDA.DoyinGoSupportDiscussionRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.DoyinGoSupportDiscussionRowChanging != null)
                {
                    this.DoyinGoSupportDiscussionRowChanging(this, new CloudAccountDA.DoyinGoSupportDiscussionRowChangeEvent((CloudAccountDA.DoyinGoSupportDiscussionRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.DoyinGoSupportDiscussionRowDeleted != null)
                {
                    this.DoyinGoSupportDiscussionRowDeleted(this, new CloudAccountDA.DoyinGoSupportDiscussionRowChangeEvent((CloudAccountDA.DoyinGoSupportDiscussionRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.DoyinGoSupportDiscussionRowDeleting != null)
                {
                    this.DoyinGoSupportDiscussionRowDeleting(this, new CloudAccountDA.DoyinGoSupportDiscussionRowChangeEvent((CloudAccountDA.DoyinGoSupportDiscussionRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDoyinGoSupportDiscussionRow(CloudAccountDA.DoyinGoSupportDiscussionRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DoyinGoSupportDiscussionIDColumn
            {
                get
                {
                    return this.columnDoyinGoSupportDiscussionID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DoyinGoSupportTicketIDColumn
            {
                get
                {
                    return this.columnDoyinGoSupportTicketID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoSupportDiscussionRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.DoyinGoSupportDiscussionRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportMessageByColumn
            {
                get
                {
                    return this.columnSupportMessageBy;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SupportMessageColumn
            {
                get
                {
                    return this.columnSupportMessage;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportMessageDateColumn
            {
                get
                {
                    return this.columnSupportMessageDate;
                }
            }
        }
        
        public class DoyinGoSupportDiscussionRow : DataRow
        {
            private CloudAccountDA.DoyinGoSupportDiscussionDataTable tableDoyinGoSupportDiscussion;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DoyinGoSupportDiscussionRow(DataRowBuilder rb) : base(rb)
            {
                this.tableDoyinGoSupportDiscussion = (CloudAccountDA.DoyinGoSupportDiscussionDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DoyinGoSupportDiscussionID
            {
                get
                {
                    return (int) base[this.tableDoyinGoSupportDiscussion.DoyinGoSupportDiscussionIDColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportDiscussion.DoyinGoSupportDiscussionIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int DoyinGoSupportTicketID
            {
                get
                {
                    return (int) base[this.tableDoyinGoSupportDiscussion.DoyinGoSupportTicketIDColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportDiscussion.DoyinGoSupportTicketIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SupportMessage
            {
                get
                {
                    return (string) base[this.tableDoyinGoSupportDiscussion.SupportMessageColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportDiscussion.SupportMessageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SupportMessageBy
            {
                get
                {
                    return (string) base[this.tableDoyinGoSupportDiscussion.SupportMessageByColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportDiscussion.SupportMessageByColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime SupportMessageDate
            {
                get
                {
                    return (DateTime) base[this.tableDoyinGoSupportDiscussion.SupportMessageDateColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportDiscussion.SupportMessageDateColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DoyinGoSupportDiscussionRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.DoyinGoSupportDiscussionRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DoyinGoSupportDiscussionRowChangeEvent(CloudAccountDA.DoyinGoSupportDiscussionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.DoyinGoSupportDiscussionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DoyinGoSupportDiscussionRowChangeEventHandler(object sender, CloudAccountDA.DoyinGoSupportDiscussionRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class DoyinGoSupportTicketDataTable : TypedTableBase<CloudAccountDA.DoyinGoSupportTicketRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnDoyinGoSupportTicketID;
            private DataColumn columnMessage;
            private DataColumn columnSubject;
            private DataColumn columnSupportDate;
            private DataColumn columnSupportDepartmentID;
            private DataColumn columnSupportPriority;
            private DataColumn columnSupportStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportTicketRowChangeEventHandler DoyinGoSupportTicketRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportTicketRowChangeEventHandler DoyinGoSupportTicketRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportTicketRowChangeEventHandler DoyinGoSupportTicketRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoSupportTicketRowChangeEventHandler DoyinGoSupportTicketRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DoyinGoSupportTicketDataTable()
            {
                base.TableName = "DoyinGoSupportTicket";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal DoyinGoSupportTicketDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DoyinGoSupportTicketDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddDoyinGoSupportTicketRow(CloudAccountDA.DoyinGoSupportTicketRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoSupportTicketRow AddDoyinGoSupportTicketRow(int DoyinGoSupportTicketID, int CompanyID, int SupportDepartmentID, string Subject, string Message, string SupportPriority, string SupportStatus, DateTime SupportDate)
            {
                CloudAccountDA.DoyinGoSupportTicketRow row = (CloudAccountDA.DoyinGoSupportTicketRow) base.NewRow();
                row.ItemArray = new object[] { DoyinGoSupportTicketID, CompanyID, SupportDepartmentID, Subject, Message, SupportPriority, SupportStatus, SupportDate };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.DoyinGoSupportTicketDataTable table = (CloudAccountDA.DoyinGoSupportTicketDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.DoyinGoSupportTicketDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.DoyinGoSupportTicketRow FindByDoyinGoSupportTicketID(int DoyinGoSupportTicketID)
            {
                return (CloudAccountDA.DoyinGoSupportTicketRow) base.Rows.Find(new object[] { DoyinGoSupportTicketID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.DoyinGoSupportTicketRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "DoyinGoSupportTicketDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDoyinGoSupportTicketID = new DataColumn("DoyinGoSupportTicketID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnDoyinGoSupportTicketID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnSupportDepartmentID = new DataColumn("SupportDepartmentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSupportDepartmentID);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnMessage = new DataColumn("Message", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMessage);
                this.columnSupportPriority = new DataColumn("SupportPriority", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSupportPriority);
                this.columnSupportStatus = new DataColumn("SupportStatus", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSupportStatus);
                this.columnSupportDate = new DataColumn("SupportDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnSupportDate);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnDoyinGoSupportTicketID }, true));
                this.columnDoyinGoSupportTicketID.AllowDBNull = false;
                this.columnDoyinGoSupportTicketID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnSupportDepartmentID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 150;
                this.columnMessage.AllowDBNull = false;
                this.columnMessage.MaxLength = 0x7fffffff;
                this.columnSupportPriority.AllowDBNull = false;
                this.columnSupportPriority.MaxLength = 50;
                this.columnSupportStatus.AllowDBNull = false;
                this.columnSupportStatus.MaxLength = 50;
                this.columnSupportDate.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnDoyinGoSupportTicketID = base.Columns["DoyinGoSupportTicketID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnSupportDepartmentID = base.Columns["SupportDepartmentID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnMessage = base.Columns["Message"];
                this.columnSupportPriority = base.Columns["SupportPriority"];
                this.columnSupportStatus = base.Columns["SupportStatus"];
                this.columnSupportDate = base.Columns["SupportDate"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.DoyinGoSupportTicketRow NewDoyinGoSupportTicketRow()
            {
                return (CloudAccountDA.DoyinGoSupportTicketRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.DoyinGoSupportTicketRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.DoyinGoSupportTicketRowChanged != null)
                {
                    this.DoyinGoSupportTicketRowChanged(this, new CloudAccountDA.DoyinGoSupportTicketRowChangeEvent((CloudAccountDA.DoyinGoSupportTicketRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.DoyinGoSupportTicketRowChanging != null)
                {
                    this.DoyinGoSupportTicketRowChanging(this, new CloudAccountDA.DoyinGoSupportTicketRowChangeEvent((CloudAccountDA.DoyinGoSupportTicketRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.DoyinGoSupportTicketRowDeleted != null)
                {
                    this.DoyinGoSupportTicketRowDeleted(this, new CloudAccountDA.DoyinGoSupportTicketRowChangeEvent((CloudAccountDA.DoyinGoSupportTicketRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.DoyinGoSupportTicketRowDeleting != null)
                {
                    this.DoyinGoSupportTicketRowDeleting(this, new CloudAccountDA.DoyinGoSupportTicketRowChangeEvent((CloudAccountDA.DoyinGoSupportTicketRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveDoyinGoSupportTicketRow(CloudAccountDA.DoyinGoSupportTicketRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DoyinGoSupportTicketIDColumn
            {
                get
                {
                    return this.columnDoyinGoSupportTicketID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoSupportTicketRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.DoyinGoSupportTicketRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MessageColumn
            {
                get
                {
                    return this.columnMessage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SubjectColumn
            {
                get
                {
                    return this.columnSubject;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportDateColumn
            {
                get
                {
                    return this.columnSupportDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportDepartmentIDColumn
            {
                get
                {
                    return this.columnSupportDepartmentID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportPriorityColumn
            {
                get
                {
                    return this.columnSupportPriority;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SupportStatusColumn
            {
                get
                {
                    return this.columnSupportStatus;
                }
            }
        }
        
        public class DoyinGoSupportTicketRow : DataRow
        {
            private CloudAccountDA.DoyinGoSupportTicketDataTable tableDoyinGoSupportTicket;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DoyinGoSupportTicketRow(DataRowBuilder rb) : base(rb)
            {
                this.tableDoyinGoSupportTicket = (CloudAccountDA.DoyinGoSupportTicketDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableDoyinGoSupportTicket.CompanyIDColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DoyinGoSupportTicketID
            {
                get
                {
                    return (int) base[this.tableDoyinGoSupportTicket.DoyinGoSupportTicketIDColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.DoyinGoSupportTicketIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Message
            {
                get
                {
                    return (string) base[this.tableDoyinGoSupportTicket.MessageColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.MessageColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Subject
            {
                get
                {
                    return (string) base[this.tableDoyinGoSupportTicket.SubjectColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.SubjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime SupportDate
            {
                get
                {
                    return (DateTime) base[this.tableDoyinGoSupportTicket.SupportDateColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.SupportDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int SupportDepartmentID
            {
                get
                {
                    return (int) base[this.tableDoyinGoSupportTicket.SupportDepartmentIDColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.SupportDepartmentIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SupportPriority
            {
                get
                {
                    return (string) base[this.tableDoyinGoSupportTicket.SupportPriorityColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.SupportPriorityColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SupportStatus
            {
                get
                {
                    return (string) base[this.tableDoyinGoSupportTicket.SupportStatusColumn];
                }
                set
                {
                    base[this.tableDoyinGoSupportTicket.SupportStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DoyinGoSupportTicketRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.DoyinGoSupportTicketRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DoyinGoSupportTicketRowChangeEvent(CloudAccountDA.DoyinGoSupportTicketRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.DoyinGoSupportTicketRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DoyinGoSupportTicketRowChangeEventHandler(object sender, CloudAccountDA.DoyinGoSupportTicketRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class DoyinGoTicketAttachmentDataTable : TypedTableBase<CloudAccountDA.DoyinGoTicketAttachmentRow>
        {
            private DataColumn columnAttachFile;
            private DataColumn columnAttachFileName;
            private DataColumn columnAttachFileType;
            private DataColumn columnDoyinGoSupportTicketID;
            private DataColumn columnDoyinGoTicketAttachmentID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoTicketAttachmentRowChangeEventHandler DoyinGoTicketAttachmentRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoTicketAttachmentRowChangeEventHandler DoyinGoTicketAttachmentRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoTicketAttachmentRowChangeEventHandler DoyinGoTicketAttachmentRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.DoyinGoTicketAttachmentRowChangeEventHandler DoyinGoTicketAttachmentRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DoyinGoTicketAttachmentDataTable()
            {
                base.TableName = "DoyinGoTicketAttachment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DoyinGoTicketAttachmentDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DoyinGoTicketAttachmentDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDoyinGoTicketAttachmentRow(CloudAccountDA.DoyinGoTicketAttachmentRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoTicketAttachmentRow AddDoyinGoTicketAttachmentRow(int DoyinGoSupportTicketID, string AttachFileName, string AttachFileType, byte[] AttachFile)
            {
                CloudAccountDA.DoyinGoTicketAttachmentRow row = (CloudAccountDA.DoyinGoTicketAttachmentRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = DoyinGoSupportTicketID;
                objArray2[2] = AttachFileName;
                objArray2[3] = AttachFileType;
                objArray2[4] = AttachFile;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.DoyinGoTicketAttachmentDataTable table = (CloudAccountDA.DoyinGoTicketAttachmentDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.DoyinGoTicketAttachmentDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoTicketAttachmentRow FindByDoyinGoTicketAttachmentID(int DoyinGoTicketAttachmentID)
            {
                return (CloudAccountDA.DoyinGoTicketAttachmentRow) base.Rows.Find(new object[] { DoyinGoTicketAttachmentID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.DoyinGoTicketAttachmentRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "DoyinGoTicketAttachmentDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDoyinGoTicketAttachmentID = new DataColumn("DoyinGoTicketAttachmentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnDoyinGoTicketAttachmentID);
                this.columnDoyinGoSupportTicketID = new DataColumn("DoyinGoSupportTicketID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnDoyinGoSupportTicketID);
                this.columnAttachFileName = new DataColumn("AttachFileName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAttachFileName);
                this.columnAttachFileType = new DataColumn("AttachFileType", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAttachFileType);
                this.columnAttachFile = new DataColumn("AttachFile", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnAttachFile);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnDoyinGoTicketAttachmentID }, true));
                this.columnDoyinGoTicketAttachmentID.AutoIncrement = true;
                this.columnDoyinGoTicketAttachmentID.AutoIncrementSeed = -1L;
                this.columnDoyinGoTicketAttachmentID.AutoIncrementStep = -1L;
                this.columnDoyinGoTicketAttachmentID.AllowDBNull = false;
                this.columnDoyinGoTicketAttachmentID.ReadOnly = true;
                this.columnDoyinGoTicketAttachmentID.Unique = true;
                this.columnDoyinGoSupportTicketID.AllowDBNull = false;
                this.columnAttachFileName.MaxLength = 50;
                this.columnAttachFileType.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnDoyinGoTicketAttachmentID = base.Columns["DoyinGoTicketAttachmentID"];
                this.columnDoyinGoSupportTicketID = base.Columns["DoyinGoSupportTicketID"];
                this.columnAttachFileName = base.Columns["AttachFileName"];
                this.columnAttachFileType = base.Columns["AttachFileType"];
                this.columnAttachFile = base.Columns["AttachFile"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.DoyinGoTicketAttachmentRow NewDoyinGoTicketAttachmentRow()
            {
                return (CloudAccountDA.DoyinGoTicketAttachmentRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.DoyinGoTicketAttachmentRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.DoyinGoTicketAttachmentRowChanged != null)
                {
                    this.DoyinGoTicketAttachmentRowChanged(this, new CloudAccountDA.DoyinGoTicketAttachmentRowChangeEvent((CloudAccountDA.DoyinGoTicketAttachmentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.DoyinGoTicketAttachmentRowChanging != null)
                {
                    this.DoyinGoTicketAttachmentRowChanging(this, new CloudAccountDA.DoyinGoTicketAttachmentRowChangeEvent((CloudAccountDA.DoyinGoTicketAttachmentRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.DoyinGoTicketAttachmentRowDeleted != null)
                {
                    this.DoyinGoTicketAttachmentRowDeleted(this, new CloudAccountDA.DoyinGoTicketAttachmentRowChangeEvent((CloudAccountDA.DoyinGoTicketAttachmentRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.DoyinGoTicketAttachmentRowDeleting != null)
                {
                    this.DoyinGoTicketAttachmentRowDeleting(this, new CloudAccountDA.DoyinGoTicketAttachmentRowChangeEvent((CloudAccountDA.DoyinGoTicketAttachmentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveDoyinGoTicketAttachmentRow(CloudAccountDA.DoyinGoTicketAttachmentRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AttachFileColumn
            {
                get
                {
                    return this.columnAttachFile;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AttachFileNameColumn
            {
                get
                {
                    return this.columnAttachFileName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AttachFileTypeColumn
            {
                get
                {
                    return this.columnAttachFileType;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DoyinGoSupportTicketIDColumn
            {
                get
                {
                    return this.columnDoyinGoSupportTicketID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DoyinGoTicketAttachmentIDColumn
            {
                get
                {
                    return this.columnDoyinGoTicketAttachmentID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.DoyinGoTicketAttachmentRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.DoyinGoTicketAttachmentRow) base.Rows[index];
                }
            }
        }
        
        public class DoyinGoTicketAttachmentRow : DataRow
        {
            private CloudAccountDA.DoyinGoTicketAttachmentDataTable tableDoyinGoTicketAttachment;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal DoyinGoTicketAttachmentRow(DataRowBuilder rb) : base(rb)
            {
                this.tableDoyinGoTicketAttachment = (CloudAccountDA.DoyinGoTicketAttachmentDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAttachFileNameNull()
            {
                return base.IsNull(this.tableDoyinGoTicketAttachment.AttachFileNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAttachFileNull()
            {
                return base.IsNull(this.tableDoyinGoTicketAttachment.AttachFileColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAttachFileTypeNull()
            {
                return base.IsNull(this.tableDoyinGoTicketAttachment.AttachFileTypeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAttachFileNameNull()
            {
                base[this.tableDoyinGoTicketAttachment.AttachFileNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAttachFileNull()
            {
                base[this.tableDoyinGoTicketAttachment.AttachFileColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAttachFileTypeNull()
            {
                base[this.tableDoyinGoTicketAttachment.AttachFileTypeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] AttachFile
            {
                get
                {
                    byte[] buffer;
                    try
                    {
                        buffer = (byte[]) base[this.tableDoyinGoTicketAttachment.AttachFileColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AttachFile' in table 'DoyinGoTicketAttachment' is DBNull.", exception);
                    }
                    return buffer;
                }
                set
                {
                    base[this.tableDoyinGoTicketAttachment.AttachFileColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AttachFileName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableDoyinGoTicketAttachment.AttachFileNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AttachFileName' in table 'DoyinGoTicketAttachment' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableDoyinGoTicketAttachment.AttachFileNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string AttachFileType
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableDoyinGoTicketAttachment.AttachFileTypeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AttachFileType' in table 'DoyinGoTicketAttachment' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableDoyinGoTicketAttachment.AttachFileTypeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int DoyinGoSupportTicketID
            {
                get
                {
                    return (int) base[this.tableDoyinGoTicketAttachment.DoyinGoSupportTicketIDColumn];
                }
                set
                {
                    base[this.tableDoyinGoTicketAttachment.DoyinGoSupportTicketIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int DoyinGoTicketAttachmentID
            {
                get
                {
                    return (int) base[this.tableDoyinGoTicketAttachment.DoyinGoTicketAttachmentIDColumn];
                }
                set
                {
                    base[this.tableDoyinGoTicketAttachment.DoyinGoTicketAttachmentIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DoyinGoTicketAttachmentRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.DoyinGoTicketAttachmentRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DoyinGoTicketAttachmentRowChangeEvent(CloudAccountDA.DoyinGoTicketAttachmentRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.DoyinGoTicketAttachmentRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DoyinGoTicketAttachmentRowChangeEventHandler(object sender, CloudAccountDA.DoyinGoTicketAttachmentRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class EmailNotificationsDataTable : TypedTableBase<CloudAccountDA.EmailNotificationsRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailNotificationsID;
            private DataColumn columnInvoiceSent;
            private DataColumn columnLatePaymentRemider;
            private DataColumn columnPaymentReceived;
            private DataColumn columnWeeklySummary;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EmailNotificationsRowChangeEventHandler EmailNotificationsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EmailNotificationsRowChangeEventHandler EmailNotificationsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EmailNotificationsRowChangeEventHandler EmailNotificationsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EmailNotificationsRowChangeEventHandler EmailNotificationsRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EmailNotificationsDataTable()
            {
                base.TableName = "EmailNotifications";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EmailNotificationsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected EmailNotificationsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddEmailNotificationsRow(CloudAccountDA.EmailNotificationsRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EmailNotificationsRow AddEmailNotificationsRow(int CompanyID, bool WeeklySummary, bool PaymentReceived, bool LatePaymentRemider, bool InvoiceSent)
            {
                CloudAccountDA.EmailNotificationsRow row = (CloudAccountDA.EmailNotificationsRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = CompanyID;
                objArray2[2] = WeeklySummary;
                objArray2[3] = PaymentReceived;
                objArray2[4] = LatePaymentRemider;
                objArray2[5] = InvoiceSent;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.EmailNotificationsDataTable table = (CloudAccountDA.EmailNotificationsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.EmailNotificationsDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EmailNotificationsRow FindByEmailNotificationsID(int EmailNotificationsID)
            {
                return (CloudAccountDA.EmailNotificationsRow) base.Rows.Find(new object[] { EmailNotificationsID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.EmailNotificationsRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "EmailNotificationsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnEmailNotificationsID = new DataColumn("EmailNotificationsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEmailNotificationsID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnWeeklySummary = new DataColumn("WeeklySummary", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnWeeklySummary);
                this.columnPaymentReceived = new DataColumn("PaymentReceived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentReceived);
                this.columnLatePaymentRemider = new DataColumn("LatePaymentRemider", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnLatePaymentRemider);
                this.columnInvoiceSent = new DataColumn("InvoiceSent", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceSent);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnEmailNotificationsID }, true));
                this.columnEmailNotificationsID.AutoIncrement = true;
                this.columnEmailNotificationsID.AutoIncrementSeed = -1L;
                this.columnEmailNotificationsID.AutoIncrementStep = -1L;
                this.columnEmailNotificationsID.AllowDBNull = false;
                this.columnEmailNotificationsID.ReadOnly = true;
                this.columnEmailNotificationsID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnWeeklySummary.AllowDBNull = false;
                this.columnPaymentReceived.AllowDBNull = false;
                this.columnLatePaymentRemider.AllowDBNull = false;
                this.columnInvoiceSent.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnEmailNotificationsID = base.Columns["EmailNotificationsID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnWeeklySummary = base.Columns["WeeklySummary"];
                this.columnPaymentReceived = base.Columns["PaymentReceived"];
                this.columnLatePaymentRemider = base.Columns["LatePaymentRemider"];
                this.columnInvoiceSent = base.Columns["InvoiceSent"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EmailNotificationsRow NewEmailNotificationsRow()
            {
                return (CloudAccountDA.EmailNotificationsRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.EmailNotificationsRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.EmailNotificationsRowChanged != null)
                {
                    this.EmailNotificationsRowChanged(this, new CloudAccountDA.EmailNotificationsRowChangeEvent((CloudAccountDA.EmailNotificationsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.EmailNotificationsRowChanging != null)
                {
                    this.EmailNotificationsRowChanging(this, new CloudAccountDA.EmailNotificationsRowChangeEvent((CloudAccountDA.EmailNotificationsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.EmailNotificationsRowDeleted != null)
                {
                    this.EmailNotificationsRowDeleted(this, new CloudAccountDA.EmailNotificationsRowChangeEvent((CloudAccountDA.EmailNotificationsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.EmailNotificationsRowDeleting != null)
                {
                    this.EmailNotificationsRowDeleting(this, new CloudAccountDA.EmailNotificationsRowChangeEvent((CloudAccountDA.EmailNotificationsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveEmailNotificationsRow(CloudAccountDA.EmailNotificationsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailNotificationsIDColumn
            {
                get
                {
                    return this.columnEmailNotificationsID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceSentColumn
            {
                get
                {
                    return this.columnInvoiceSent;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EmailNotificationsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.EmailNotificationsRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LatePaymentRemiderColumn
            {
                get
                {
                    return this.columnLatePaymentRemider;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PaymentReceivedColumn
            {
                get
                {
                    return this.columnPaymentReceived;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn WeeklySummaryColumn
            {
                get
                {
                    return this.columnWeeklySummary;
                }
            }
        }
        
        public class EmailNotificationsRow : DataRow
        {
            private CloudAccountDA.EmailNotificationsDataTable tableEmailNotifications;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EmailNotificationsRow(DataRowBuilder rb) : base(rb)
            {
                this.tableEmailNotifications = (CloudAccountDA.EmailNotificationsDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableEmailNotifications.CompanyIDColumn];
                }
                set
                {
                    base[this.tableEmailNotifications.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EmailNotificationsID
            {
                get
                {
                    return (int) base[this.tableEmailNotifications.EmailNotificationsIDColumn];
                }
                set
                {
                    base[this.tableEmailNotifications.EmailNotificationsIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool InvoiceSent
            {
                get
                {
                    return (bool) base[this.tableEmailNotifications.InvoiceSentColumn];
                }
                set
                {
                    base[this.tableEmailNotifications.InvoiceSentColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool LatePaymentRemider
            {
                get
                {
                    return (bool) base[this.tableEmailNotifications.LatePaymentRemiderColumn];
                }
                set
                {
                    base[this.tableEmailNotifications.LatePaymentRemiderColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool PaymentReceived
            {
                get
                {
                    return (bool) base[this.tableEmailNotifications.PaymentReceivedColumn];
                }
                set
                {
                    base[this.tableEmailNotifications.PaymentReceivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool WeeklySummary
            {
                get
                {
                    return (bool) base[this.tableEmailNotifications.WeeklySummaryColumn];
                }
                set
                {
                    base[this.tableEmailNotifications.WeeklySummaryColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EmailNotificationsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.EmailNotificationsRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EmailNotificationsRowChangeEvent(CloudAccountDA.EmailNotificationsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EmailNotificationsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EmailNotificationsRowChangeEventHandler(object sender, CloudAccountDA.EmailNotificationsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class EstimateDefaultTermsMasterDataTable : TypedTableBase<CloudAccountDA.EstimateDefaultTermsMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnDefaultTerms;
            private DataColumn columnEstimateDefaultTermsID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDefaultTermsMasterRowChangeEventHandler EstimateDefaultTermsMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDefaultTermsMasterRowChangeEventHandler EstimateDefaultTermsMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDefaultTermsMasterRowChangeEventHandler EstimateDefaultTermsMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDefaultTermsMasterRowChangeEventHandler EstimateDefaultTermsMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public EstimateDefaultTermsMasterDataTable()
            {
                base.TableName = "EstimateDefaultTermsMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateDefaultTermsMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EstimateDefaultTermsMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEstimateDefaultTermsMasterRow(CloudAccountDA.EstimateDefaultTermsMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDefaultTermsMasterRow AddEstimateDefaultTermsMasterRow(int CompanyID, string DefaultTerms)
            {
                CloudAccountDA.EstimateDefaultTermsMasterRow row = (CloudAccountDA.EstimateDefaultTermsMasterRow) base.NewRow();
                object[] objArray2 = new object[3];
                objArray2[1] = CompanyID;
                objArray2[2] = DefaultTerms;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.EstimateDefaultTermsMasterDataTable table = (CloudAccountDA.EstimateDefaultTermsMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.EstimateDefaultTermsMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateDefaultTermsMasterRow FindByEstimateDefaultTermsID(int EstimateDefaultTermsID)
            {
                return (CloudAccountDA.EstimateDefaultTermsMasterRow) base.Rows.Find(new object[] { EstimateDefaultTermsID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.EstimateDefaultTermsMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "EstimateDefaultTermsMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnEstimateDefaultTermsID = new DataColumn("EstimateDefaultTermsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateDefaultTermsID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnDefaultTerms = new DataColumn("DefaultTerms", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDefaultTerms);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnEstimateDefaultTermsID }, true));
                this.columnEstimateDefaultTermsID.AutoIncrement = true;
                this.columnEstimateDefaultTermsID.AutoIncrementSeed = -1L;
                this.columnEstimateDefaultTermsID.AutoIncrementStep = -1L;
                this.columnEstimateDefaultTermsID.AllowDBNull = false;
                this.columnEstimateDefaultTermsID.ReadOnly = true;
                this.columnEstimateDefaultTermsID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnDefaultTerms.MaxLength = 0x7fffffff;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnEstimateDefaultTermsID = base.Columns["EstimateDefaultTermsID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnDefaultTerms = base.Columns["DefaultTerms"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDefaultTermsMasterRow NewEstimateDefaultTermsMasterRow()
            {
                return (CloudAccountDA.EstimateDefaultTermsMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.EstimateDefaultTermsMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.EstimateDefaultTermsMasterRowChanged != null)
                {
                    this.EstimateDefaultTermsMasterRowChanged(this, new CloudAccountDA.EstimateDefaultTermsMasterRowChangeEvent((CloudAccountDA.EstimateDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.EstimateDefaultTermsMasterRowChanging != null)
                {
                    this.EstimateDefaultTermsMasterRowChanging(this, new CloudAccountDA.EstimateDefaultTermsMasterRowChangeEvent((CloudAccountDA.EstimateDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.EstimateDefaultTermsMasterRowDeleted != null)
                {
                    this.EstimateDefaultTermsMasterRowDeleted(this, new CloudAccountDA.EstimateDefaultTermsMasterRowChangeEvent((CloudAccountDA.EstimateDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.EstimateDefaultTermsMasterRowDeleting != null)
                {
                    this.EstimateDefaultTermsMasterRowDeleting(this, new CloudAccountDA.EstimateDefaultTermsMasterRowChangeEvent((CloudAccountDA.EstimateDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveEstimateDefaultTermsMasterRow(CloudAccountDA.EstimateDefaultTermsMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DefaultTermsColumn
            {
                get
                {
                    return this.columnDefaultTerms;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateDefaultTermsIDColumn
            {
                get
                {
                    return this.columnEstimateDefaultTermsID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDefaultTermsMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.EstimateDefaultTermsMasterRow) base.Rows[index];
                }
            }
        }
        
        public class EstimateDefaultTermsMasterRow : DataRow
        {
            private CloudAccountDA.EstimateDefaultTermsMasterDataTable tableEstimateDefaultTermsMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateDefaultTermsMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableEstimateDefaultTermsMaster = (CloudAccountDA.EstimateDefaultTermsMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDefaultTermsNull()
            {
                return base.IsNull(this.tableEstimateDefaultTermsMaster.DefaultTermsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDefaultTermsNull()
            {
                base[this.tableEstimateDefaultTermsMaster.DefaultTermsColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableEstimateDefaultTermsMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableEstimateDefaultTermsMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultTerms
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateDefaultTermsMaster.DefaultTermsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DefaultTerms' in table 'EstimateDefaultTermsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateDefaultTermsMaster.DefaultTermsColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EstimateDefaultTermsID
            {
                get
                {
                    return (int) base[this.tableEstimateDefaultTermsMaster.EstimateDefaultTermsIDColumn];
                }
                set
                {
                    base[this.tableEstimateDefaultTermsMaster.EstimateDefaultTermsIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EstimateDefaultTermsMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.EstimateDefaultTermsMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EstimateDefaultTermsMasterRowChangeEvent(CloudAccountDA.EstimateDefaultTermsMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDefaultTermsMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EstimateDefaultTermsMasterRowChangeEventHandler(object sender, CloudAccountDA.EstimateDefaultTermsMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class EstimateDisputeHistoryDataTable : TypedTableBase<CloudAccountDA.EstimateDisputeHistoryRow>
        {
            private DataColumn columnEstimateDisputeCommentDate;
            private DataColumn columnEstimateDisputeComments;
            private DataColumn columnEstimateDisputeCreatedBy;
            private DataColumn columnEstimateDisputeCreatedID;
            private DataColumn columnEstimateDisputeHistoryID;
            private DataColumn columnEstimateID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDisputeHistoryRowChangeEventHandler EstimateDisputeHistoryRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDisputeHistoryRowChangeEventHandler EstimateDisputeHistoryRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDisputeHistoryRowChangeEventHandler EstimateDisputeHistoryRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateDisputeHistoryRowChangeEventHandler EstimateDisputeHistoryRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public EstimateDisputeHistoryDataTable()
            {
                base.TableName = "EstimateDisputeHistory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateDisputeHistoryDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected EstimateDisputeHistoryDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEstimateDisputeHistoryRow(CloudAccountDA.EstimateDisputeHistoryRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDisputeHistoryRow AddEstimateDisputeHistoryRow(int EstimateID, string EstimateDisputeCreatedBy, int EstimateDisputeCreatedID, string EstimateDisputeComments, DateTime EstimateDisputeCommentDate)
            {
                CloudAccountDA.EstimateDisputeHistoryRow row = (CloudAccountDA.EstimateDisputeHistoryRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = EstimateID;
                objArray2[2] = EstimateDisputeCreatedBy;
                objArray2[3] = EstimateDisputeCreatedID;
                objArray2[4] = EstimateDisputeComments;
                objArray2[5] = EstimateDisputeCommentDate;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.EstimateDisputeHistoryDataTable table = (CloudAccountDA.EstimateDisputeHistoryDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.EstimateDisputeHistoryDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateDisputeHistoryRow FindByEstimateDisputeHistoryID(int EstimateDisputeHistoryID)
            {
                return (CloudAccountDA.EstimateDisputeHistoryRow) base.Rows.Find(new object[] { EstimateDisputeHistoryID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.EstimateDisputeHistoryRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "EstimateDisputeHistoryDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnEstimateDisputeHistoryID = new DataColumn("EstimateDisputeHistoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateDisputeHistoryID);
                this.columnEstimateID = new DataColumn("EstimateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateID);
                this.columnEstimateDisputeCreatedBy = new DataColumn("EstimateDisputeCreatedBy", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateDisputeCreatedBy);
                this.columnEstimateDisputeCreatedID = new DataColumn("EstimateDisputeCreatedID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateDisputeCreatedID);
                this.columnEstimateDisputeComments = new DataColumn("EstimateDisputeComments", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateDisputeComments);
                this.columnEstimateDisputeCommentDate = new DataColumn("EstimateDisputeCommentDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateDisputeCommentDate);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnEstimateDisputeHistoryID }, true));
                this.columnEstimateDisputeHistoryID.AutoIncrement = true;
                this.columnEstimateDisputeHistoryID.AutoIncrementSeed = -1L;
                this.columnEstimateDisputeHistoryID.AutoIncrementStep = -1L;
                this.columnEstimateDisputeHistoryID.AllowDBNull = false;
                this.columnEstimateDisputeHistoryID.ReadOnly = true;
                this.columnEstimateDisputeHistoryID.Unique = true;
                this.columnEstimateID.AllowDBNull = false;
                this.columnEstimateDisputeCreatedBy.MaxLength = 50;
                this.columnEstimateDisputeComments.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnEstimateDisputeHistoryID = base.Columns["EstimateDisputeHistoryID"];
                this.columnEstimateID = base.Columns["EstimateID"];
                this.columnEstimateDisputeCreatedBy = base.Columns["EstimateDisputeCreatedBy"];
                this.columnEstimateDisputeCreatedID = base.Columns["EstimateDisputeCreatedID"];
                this.columnEstimateDisputeComments = base.Columns["EstimateDisputeComments"];
                this.columnEstimateDisputeCommentDate = base.Columns["EstimateDisputeCommentDate"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDisputeHistoryRow NewEstimateDisputeHistoryRow()
            {
                return (CloudAccountDA.EstimateDisputeHistoryRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.EstimateDisputeHistoryRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.EstimateDisputeHistoryRowChanged != null)
                {
                    this.EstimateDisputeHistoryRowChanged(this, new CloudAccountDA.EstimateDisputeHistoryRowChangeEvent((CloudAccountDA.EstimateDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.EstimateDisputeHistoryRowChanging != null)
                {
                    this.EstimateDisputeHistoryRowChanging(this, new CloudAccountDA.EstimateDisputeHistoryRowChangeEvent((CloudAccountDA.EstimateDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.EstimateDisputeHistoryRowDeleted != null)
                {
                    this.EstimateDisputeHistoryRowDeleted(this, new CloudAccountDA.EstimateDisputeHistoryRowChangeEvent((CloudAccountDA.EstimateDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.EstimateDisputeHistoryRowDeleting != null)
                {
                    this.EstimateDisputeHistoryRowDeleting(this, new CloudAccountDA.EstimateDisputeHistoryRowChangeEvent((CloudAccountDA.EstimateDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveEstimateDisputeHistoryRow(CloudAccountDA.EstimateDisputeHistoryRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateDisputeCommentDateColumn
            {
                get
                {
                    return this.columnEstimateDisputeCommentDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateDisputeCommentsColumn
            {
                get
                {
                    return this.columnEstimateDisputeComments;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateDisputeCreatedByColumn
            {
                get
                {
                    return this.columnEstimateDisputeCreatedBy;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateDisputeCreatedIDColumn
            {
                get
                {
                    return this.columnEstimateDisputeCreatedID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateDisputeHistoryIDColumn
            {
                get
                {
                    return this.columnEstimateDisputeHistoryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateIDColumn
            {
                get
                {
                    return this.columnEstimateID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDisputeHistoryRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.EstimateDisputeHistoryRow) base.Rows[index];
                }
            }
        }
        
        public class EstimateDisputeHistoryRow : DataRow
        {
            private CloudAccountDA.EstimateDisputeHistoryDataTable tableEstimateDisputeHistory;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal EstimateDisputeHistoryRow(DataRowBuilder rb) : base(rb)
            {
                this.tableEstimateDisputeHistory = (CloudAccountDA.EstimateDisputeHistoryDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEstimateDisputeCommentDateNull()
            {
                return base.IsNull(this.tableEstimateDisputeHistory.EstimateDisputeCommentDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEstimateDisputeCommentsNull()
            {
                return base.IsNull(this.tableEstimateDisputeHistory.EstimateDisputeCommentsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEstimateDisputeCreatedByNull()
            {
                return base.IsNull(this.tableEstimateDisputeHistory.EstimateDisputeCreatedByColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEstimateDisputeCreatedIDNull()
            {
                return base.IsNull(this.tableEstimateDisputeHistory.EstimateDisputeCreatedIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimateDisputeCommentDateNull()
            {
                base[this.tableEstimateDisputeHistory.EstimateDisputeCommentDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimateDisputeCommentsNull()
            {
                base[this.tableEstimateDisputeHistory.EstimateDisputeCommentsColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimateDisputeCreatedByNull()
            {
                base[this.tableEstimateDisputeHistory.EstimateDisputeCreatedByColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimateDisputeCreatedIDNull()
            {
                base[this.tableEstimateDisputeHistory.EstimateDisputeCreatedIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime EstimateDisputeCommentDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableEstimateDisputeHistory.EstimateDisputeCommentDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateDisputeCommentDate' in table 'EstimateDisputeHistory' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableEstimateDisputeHistory.EstimateDisputeCommentDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EstimateDisputeComments
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateDisputeHistory.EstimateDisputeCommentsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateDisputeComments' in table 'EstimateDisputeHistory' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateDisputeHistory.EstimateDisputeCommentsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EstimateDisputeCreatedBy
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateDisputeHistory.EstimateDisputeCreatedByColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateDisputeCreatedBy' in table 'EstimateDisputeHistory' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateDisputeHistory.EstimateDisputeCreatedByColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EstimateDisputeCreatedID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableEstimateDisputeHistory.EstimateDisputeCreatedIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateDisputeCreatedID' in table 'EstimateDisputeHistory' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateDisputeHistory.EstimateDisputeCreatedIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EstimateDisputeHistoryID
            {
                get
                {
                    return (int) base[this.tableEstimateDisputeHistory.EstimateDisputeHistoryIDColumn];
                }
                set
                {
                    base[this.tableEstimateDisputeHistory.EstimateDisputeHistoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EstimateID
            {
                get
                {
                    return (int) base[this.tableEstimateDisputeHistory.EstimateIDColumn];
                }
                set
                {
                    base[this.tableEstimateDisputeHistory.EstimateIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EstimateDisputeHistoryRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.EstimateDisputeHistoryRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public EstimateDisputeHistoryRowChangeEvent(CloudAccountDA.EstimateDisputeHistoryRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateDisputeHistoryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EstimateDisputeHistoryRowChangeEventHandler(object sender, CloudAccountDA.EstimateDisputeHistoryRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class EstimateItemDetailDataTable : TypedTableBase<CloudAccountDA.EstimateItemDetailRow>
        {
            private DataColumn columnEstimateID;
            private DataColumn columnEstimateItemDetailID;
            private DataColumn columnItemDesc;
            private DataColumn columnItemID;
            private DataColumn columnQuantity;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTotal;
            private DataColumn columnUnitCost;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateItemDetailRowChangeEventHandler EstimateItemDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateItemDetailRowChangeEventHandler EstimateItemDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateItemDetailRowChangeEventHandler EstimateItemDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateItemDetailRowChangeEventHandler EstimateItemDetailRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EstimateItemDetailDataTable()
            {
                base.TableName = "EstimateItemDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateItemDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EstimateItemDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEstimateItemDetailRow(CloudAccountDA.EstimateItemDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateItemDetailRow AddEstimateItemDetailRow(int EstimateID, int ItemID, string ItemDesc, decimal UnitCost, decimal Quantity, int Tax1, int Tax2, decimal Total)
            {
                CloudAccountDA.EstimateItemDetailRow row = (CloudAccountDA.EstimateItemDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = EstimateID;
                objArray2[2] = ItemID;
                objArray2[3] = ItemDesc;
                objArray2[4] = UnitCost;
                objArray2[5] = Quantity;
                objArray2[6] = Tax1;
                objArray2[7] = Tax2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.EstimateItemDetailDataTable table = (CloudAccountDA.EstimateItemDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.EstimateItemDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateItemDetailRow FindByEstimateItemDetailID(int EstimateItemDetailID)
            {
                return (CloudAccountDA.EstimateItemDetailRow) base.Rows.Find(new object[] { EstimateItemDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.EstimateItemDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "EstimateItemDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnEstimateItemDetailID = new DataColumn("EstimateItemDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateItemDetailID);
                this.columnEstimateID = new DataColumn("EstimateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateID);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnItemDesc = new DataColumn("ItemDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnItemDesc);
                this.columnUnitCost = new DataColumn("UnitCost", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUnitCost);
                this.columnQuantity = new DataColumn("Quantity", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnEstimateItemDetailID }, true));
                this.columnEstimateItemDetailID.AutoIncrement = true;
                this.columnEstimateItemDetailID.AutoIncrementSeed = -1L;
                this.columnEstimateItemDetailID.AutoIncrementStep = -1L;
                this.columnEstimateItemDetailID.AllowDBNull = false;
                this.columnEstimateItemDetailID.ReadOnly = true;
                this.columnEstimateItemDetailID.Unique = true;
                this.columnEstimateID.AllowDBNull = false;
                this.columnItemID.AllowDBNull = false;
                this.columnItemDesc.MaxLength = 500;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnEstimateItemDetailID = base.Columns["EstimateItemDetailID"];
                this.columnEstimateID = base.Columns["EstimateID"];
                this.columnItemID = base.Columns["ItemID"];
                this.columnItemDesc = base.Columns["ItemDesc"];
                this.columnUnitCost = base.Columns["UnitCost"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateItemDetailRow NewEstimateItemDetailRow()
            {
                return (CloudAccountDA.EstimateItemDetailRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.EstimateItemDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.EstimateItemDetailRowChanged != null)
                {
                    this.EstimateItemDetailRowChanged(this, new CloudAccountDA.EstimateItemDetailRowChangeEvent((CloudAccountDA.EstimateItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.EstimateItemDetailRowChanging != null)
                {
                    this.EstimateItemDetailRowChanging(this, new CloudAccountDA.EstimateItemDetailRowChangeEvent((CloudAccountDA.EstimateItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.EstimateItemDetailRowDeleted != null)
                {
                    this.EstimateItemDetailRowDeleted(this, new CloudAccountDA.EstimateItemDetailRowChangeEvent((CloudAccountDA.EstimateItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.EstimateItemDetailRowDeleting != null)
                {
                    this.EstimateItemDetailRowDeleting(this, new CloudAccountDA.EstimateItemDetailRowChangeEvent((CloudAccountDA.EstimateItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveEstimateItemDetailRow(CloudAccountDA.EstimateItemDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateIDColumn
            {
                get
                {
                    return this.columnEstimateID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateItemDetailIDColumn
            {
                get
                {
                    return this.columnEstimateItemDetailID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateItemDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.EstimateItemDetailRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ItemDescColumn
            {
                get
                {
                    return this.columnItemDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemIDColumn
            {
                get
                {
                    return this.columnItemID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UnitCostColumn
            {
                get
                {
                    return this.columnUnitCost;
                }
            }
        }
        
        public class EstimateItemDetailRow : DataRow
        {
            private CloudAccountDA.EstimateItemDetailDataTable tableEstimateItemDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateItemDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableEstimateItemDetail = (CloudAccountDA.EstimateItemDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsItemDescNull()
            {
                return base.IsNull(this.tableEstimateItemDetail.ItemDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsQuantityNull()
            {
                return base.IsNull(this.tableEstimateItemDetail.QuantityColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableEstimateItemDetail.Tax1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableEstimateItemDetail.Tax2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableEstimateItemDetail.TotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnitCostNull()
            {
                return base.IsNull(this.tableEstimateItemDetail.UnitCostColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetItemDescNull()
            {
                base[this.tableEstimateItemDetail.ItemDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQuantityNull()
            {
                base[this.tableEstimateItemDetail.QuantityColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax1Null()
            {
                base[this.tableEstimateItemDetail.Tax1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax2Null()
            {
                base[this.tableEstimateItemDetail.Tax2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTotalNull()
            {
                base[this.tableEstimateItemDetail.TotalColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUnitCostNull()
            {
                base[this.tableEstimateItemDetail.UnitCostColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EstimateID
            {
                get
                {
                    return (int) base[this.tableEstimateItemDetail.EstimateIDColumn];
                }
                set
                {
                    base[this.tableEstimateItemDetail.EstimateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EstimateItemDetailID
            {
                get
                {
                    return (int) base[this.tableEstimateItemDetail.EstimateItemDetailIDColumn];
                }
                set
                {
                    base[this.tableEstimateItemDetail.EstimateItemDetailIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ItemDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateItemDetail.ItemDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ItemDesc' in table 'EstimateItemDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateItemDetail.ItemDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ItemID
            {
                get
                {
                    return (int) base[this.tableEstimateItemDetail.ItemIDColumn];
                }
                set
                {
                    base[this.tableEstimateItemDetail.ItemIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Quantity
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateItemDetail.QuantityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Quantity' in table 'EstimateItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateItemDetail.QuantityColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableEstimateItemDetail.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'EstimateItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateItemDetail.Tax1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableEstimateItemDetail.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'EstimateItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateItemDetail.Tax2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateItemDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'EstimateItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateItemDetail.TotalColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal UnitCost
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateItemDetail.UnitCostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UnitCost' in table 'EstimateItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateItemDetail.UnitCostColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EstimateItemDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.EstimateItemDetailRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EstimateItemDetailRowChangeEvent(CloudAccountDA.EstimateItemDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateItemDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EstimateItemDetailRowChangeEventHandler(object sender, CloudAccountDA.EstimateItemDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class EstimateMasterDataTable : TypedTableBase<CloudAccountDA.EstimateMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnCurrencyID;
            private DataColumn columnDeleted;
            private DataColumn columnDiscount;
            private DataColumn columnDiscountAmount;
            private DataColumn columnEstimateDate;
            private DataColumn columnEstimateID;
            private DataColumn columnEstimateNumber;
            private DataColumn columnEstimateStatus;
            private DataColumn columnEstimateTotal;
            private DataColumn columnNotes;
            private DataColumn columnPaidToDate;
            private DataColumn columnPONumber;
            private DataColumn columnReceivedActive;
            private DataColumn columnReceivedArchived;
            private DataColumn columnReceivedDeleted;
            private DataColumn columnTerms;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateMasterRowChangeEventHandler EstimateMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateMasterRowChangeEventHandler EstimateMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateMasterRowChangeEventHandler EstimateMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateMasterRowChangeEventHandler EstimateMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public EstimateMasterDataTable()
            {
                base.TableName = "EstimateMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal EstimateMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EstimateMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddEstimateMasterRow(CloudAccountDA.EstimateMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateMasterRow AddEstimateMasterRow(int CompanyID, int ClientID, int CurrencyID, string EstimateNumber, DateTime EstimateDate, string PONumber, decimal Discount, decimal DiscountAmount, string Notes, string Terms, string EstimateStatus, decimal EstimateTotal, decimal PaidToDate, bool Active, bool Archived, bool Deleted, bool ReceivedActive, bool ReceivedArchived, bool ReceivedDeleted)
            {
                CloudAccountDA.EstimateMasterRow row = (CloudAccountDA.EstimateMasterRow) base.NewRow();
                object[] objArray2 = new object[20];
                objArray2[1] = CompanyID;
                objArray2[2] = ClientID;
                objArray2[3] = CurrencyID;
                objArray2[4] = EstimateNumber;
                objArray2[5] = EstimateDate;
                objArray2[6] = PONumber;
                objArray2[7] = Discount;
                objArray2[8] = DiscountAmount;
                objArray2[9] = Notes;
                objArray2[10] = Terms;
                objArray2[11] = EstimateStatus;
                objArray2[12] = EstimateTotal;
                objArray2[13] = PaidToDate;
                objArray2[14] = Active;
                objArray2[15] = Archived;
                objArray2[0x10] = Deleted;
                objArray2[0x11] = ReceivedActive;
                objArray2[0x12] = ReceivedArchived;
                objArray2[0x13] = ReceivedDeleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.EstimateMasterDataTable table = (CloudAccountDA.EstimateMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.EstimateMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateMasterRow FindByEstimateID(int EstimateID)
            {
                return (CloudAccountDA.EstimateMasterRow) base.Rows.Find(new object[] { EstimateID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.EstimateMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "EstimateMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnEstimateID = new DataColumn("EstimateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnEstimateNumber = new DataColumn("EstimateNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateNumber);
                this.columnEstimateDate = new DataColumn("EstimateDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateDate);
                this.columnPONumber = new DataColumn("PONumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPONumber);
                this.columnDiscount = new DataColumn("Discount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnDiscountAmount = new DataColumn("DiscountAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscountAmount);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnTerms = new DataColumn("Terms", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTerms);
                this.columnEstimateStatus = new DataColumn("EstimateStatus", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateStatus);
                this.columnEstimateTotal = new DataColumn("EstimateTotal", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateTotal);
                this.columnPaidToDate = new DataColumn("PaidToDate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPaidToDate);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnReceivedActive = new DataColumn("ReceivedActive", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnReceivedActive);
                this.columnReceivedArchived = new DataColumn("ReceivedArchived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnReceivedArchived);
                this.columnReceivedDeleted = new DataColumn("ReceivedDeleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnReceivedDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnEstimateID }, true));
                this.columnEstimateID.AutoIncrement = true;
                this.columnEstimateID.AutoIncrementSeed = -1L;
                this.columnEstimateID.AutoIncrementStep = -1L;
                this.columnEstimateID.AllowDBNull = false;
                this.columnEstimateID.ReadOnly = true;
                this.columnEstimateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnEstimateNumber.MaxLength = 50;
                this.columnPONumber.MaxLength = 50;
                this.columnNotes.MaxLength = 0x7fffffff;
                this.columnTerms.MaxLength = 0x7fffffff;
                this.columnEstimateStatus.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnEstimateID = base.Columns["EstimateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnEstimateNumber = base.Columns["EstimateNumber"];
                this.columnEstimateDate = base.Columns["EstimateDate"];
                this.columnPONumber = base.Columns["PONumber"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnDiscountAmount = base.Columns["DiscountAmount"];
                this.columnNotes = base.Columns["Notes"];
                this.columnTerms = base.Columns["Terms"];
                this.columnEstimateStatus = base.Columns["EstimateStatus"];
                this.columnEstimateTotal = base.Columns["EstimateTotal"];
                this.columnPaidToDate = base.Columns["PaidToDate"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnReceivedActive = base.Columns["ReceivedActive"];
                this.columnReceivedArchived = base.Columns["ReceivedArchived"];
                this.columnReceivedDeleted = base.Columns["ReceivedDeleted"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateMasterRow NewEstimateMasterRow()
            {
                return (CloudAccountDA.EstimateMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.EstimateMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.EstimateMasterRowChanged != null)
                {
                    this.EstimateMasterRowChanged(this, new CloudAccountDA.EstimateMasterRowChangeEvent((CloudAccountDA.EstimateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.EstimateMasterRowChanging != null)
                {
                    this.EstimateMasterRowChanging(this, new CloudAccountDA.EstimateMasterRowChangeEvent((CloudAccountDA.EstimateMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.EstimateMasterRowDeleted != null)
                {
                    this.EstimateMasterRowDeleted(this, new CloudAccountDA.EstimateMasterRowChangeEvent((CloudAccountDA.EstimateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.EstimateMasterRowDeleting != null)
                {
                    this.EstimateMasterRowDeleting(this, new CloudAccountDA.EstimateMasterRowChangeEvent((CloudAccountDA.EstimateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveEstimateMasterRow(CloudAccountDA.EstimateMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrencyIDColumn
            {
                get
                {
                    return this.columnCurrencyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DiscountAmountColumn
            {
                get
                {
                    return this.columnDiscountAmount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DiscountColumn
            {
                get
                {
                    return this.columnDiscount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateDateColumn
            {
                get
                {
                    return this.columnEstimateDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateIDColumn
            {
                get
                {
                    return this.columnEstimateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateNumberColumn
            {
                get
                {
                    return this.columnEstimateNumber;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateStatusColumn
            {
                get
                {
                    return this.columnEstimateStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateTotalColumn
            {
                get
                {
                    return this.columnEstimateTotal;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.EstimateMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PaidToDateColumn
            {
                get
                {
                    return this.columnPaidToDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PONumberColumn
            {
                get
                {
                    return this.columnPONumber;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ReceivedActiveColumn
            {
                get
                {
                    return this.columnReceivedActive;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ReceivedArchivedColumn
            {
                get
                {
                    return this.columnReceivedArchived;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ReceivedDeletedColumn
            {
                get
                {
                    return this.columnReceivedDeleted;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TermsColumn
            {
                get
                {
                    return this.columnTerms;
                }
            }
        }
        
        public class EstimateMasterRow : DataRow
        {
            private CloudAccountDA.EstimateMasterDataTable tableEstimateMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableEstimateMaster = (CloudAccountDA.EstimateMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableEstimateMaster.ActiveColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableEstimateMaster.ArchivedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrencyIDNull()
            {
                return base.IsNull(this.tableEstimateMaster.CurrencyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableEstimateMaster.DeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDiscountAmountNull()
            {
                return base.IsNull(this.tableEstimateMaster.DiscountAmountColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDiscountNull()
            {
                return base.IsNull(this.tableEstimateMaster.DiscountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEstimateDateNull()
            {
                return base.IsNull(this.tableEstimateMaster.EstimateDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEstimateNumberNull()
            {
                return base.IsNull(this.tableEstimateMaster.EstimateNumberColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEstimateStatusNull()
            {
                return base.IsNull(this.tableEstimateMaster.EstimateStatusColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEstimateTotalNull()
            {
                return base.IsNull(this.tableEstimateMaster.EstimateTotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableEstimateMaster.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaidToDateNull()
            {
                return base.IsNull(this.tableEstimateMaster.PaidToDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPONumberNull()
            {
                return base.IsNull(this.tableEstimateMaster.PONumberColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsReceivedActiveNull()
            {
                return base.IsNull(this.tableEstimateMaster.ReceivedActiveColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsReceivedArchivedNull()
            {
                return base.IsNull(this.tableEstimateMaster.ReceivedArchivedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsReceivedDeletedNull()
            {
                return base.IsNull(this.tableEstimateMaster.ReceivedDeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTermsNull()
            {
                return base.IsNull(this.tableEstimateMaster.TermsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableEstimateMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetArchivedNull()
            {
                base[this.tableEstimateMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCurrencyIDNull()
            {
                base[this.tableEstimateMaster.CurrencyIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeletedNull()
            {
                base[this.tableEstimateMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDiscountAmountNull()
            {
                base[this.tableEstimateMaster.DiscountAmountColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDiscountNull()
            {
                base[this.tableEstimateMaster.DiscountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEstimateDateNull()
            {
                base[this.tableEstimateMaster.EstimateDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimateNumberNull()
            {
                base[this.tableEstimateMaster.EstimateNumberColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEstimateStatusNull()
            {
                base[this.tableEstimateMaster.EstimateStatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimateTotalNull()
            {
                base[this.tableEstimateMaster.EstimateTotalColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableEstimateMaster.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaidToDateNull()
            {
                base[this.tableEstimateMaster.PaidToDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPONumberNull()
            {
                base[this.tableEstimateMaster.PONumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReceivedActiveNull()
            {
                base[this.tableEstimateMaster.ReceivedActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetReceivedArchivedNull()
            {
                base[this.tableEstimateMaster.ReceivedArchivedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReceivedDeletedNull()
            {
                base[this.tableEstimateMaster.ReceivedDeletedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTermsNull()
            {
                base[this.tableEstimateMaster.TermsColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableEstimateMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableEstimateMaster.ActiveColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableEstimateMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableEstimateMaster.ArchivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ClientID
            {
                get
                {
                    return (int) base[this.tableEstimateMaster.ClientIDColumn];
                }
                set
                {
                    base[this.tableEstimateMaster.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableEstimateMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableEstimateMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CurrencyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableEstimateMaster.CurrencyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyID' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateMaster.CurrencyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableEstimateMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableEstimateMaster.DeletedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Discount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateMaster.DiscountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Discount' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateMaster.DiscountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DiscountAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateMaster.DiscountAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DiscountAmount' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateMaster.DiscountAmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime EstimateDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableEstimateMaster.EstimateDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateDate' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableEstimateMaster.EstimateDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int EstimateID
            {
                get
                {
                    return (int) base[this.tableEstimateMaster.EstimateIDColumn];
                }
                set
                {
                    base[this.tableEstimateMaster.EstimateIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EstimateNumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateMaster.EstimateNumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateNumber' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateMaster.EstimateNumberColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EstimateStatus
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateMaster.EstimateStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateStatus' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateMaster.EstimateStatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EstimateTotal
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateMaster.EstimateTotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EstimateTotal' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateMaster.EstimateTotalColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateMaster.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PaidToDate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateMaster.PaidToDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PaidToDate' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateMaster.PaidToDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PONumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateMaster.PONumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PONumber' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateMaster.PONumberColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ReceivedActive
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableEstimateMaster.ReceivedActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ReceivedActive' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableEstimateMaster.ReceivedActiveColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ReceivedArchived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableEstimateMaster.ReceivedArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ReceivedArchived' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableEstimateMaster.ReceivedArchivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ReceivedDeleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableEstimateMaster.ReceivedDeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ReceivedDeleted' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableEstimateMaster.ReceivedDeletedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Terms
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateMaster.TermsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Terms' in table 'EstimateMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateMaster.TermsColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EstimateMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.EstimateMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EstimateMasterRowChangeEvent(CloudAccountDA.EstimateMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EstimateMasterRowChangeEventHandler(object sender, CloudAccountDA.EstimateMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class EstimateTaskDetailDataTable : TypedTableBase<CloudAccountDA.EstimateTaskDetailRow>
        {
            private DataColumn columnEstimateID;
            private DataColumn columnEstimateTaskDetailID;
            private DataColumn columnHours;
            private DataColumn columnRate;
            private DataColumn columnTaskDesc;
            private DataColumn columnTaskID;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTotal;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateTaskDetailRowChangeEventHandler EstimateTaskDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateTaskDetailRowChangeEventHandler EstimateTaskDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateTaskDetailRowChangeEventHandler EstimateTaskDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.EstimateTaskDetailRowChangeEventHandler EstimateTaskDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public EstimateTaskDetailDataTable()
            {
                base.TableName = "EstimateTaskDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateTaskDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected EstimateTaskDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddEstimateTaskDetailRow(CloudAccountDA.EstimateTaskDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateTaskDetailRow AddEstimateTaskDetailRow(int EstimateID, int TaskID, string TaskDesc, decimal Rate, decimal Hours, int Tax1, int Tax2, decimal Total)
            {
                CloudAccountDA.EstimateTaskDetailRow row = (CloudAccountDA.EstimateTaskDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = EstimateID;
                objArray2[2] = TaskID;
                objArray2[3] = TaskDesc;
                objArray2[4] = Rate;
                objArray2[5] = Hours;
                objArray2[6] = Tax1;
                objArray2[7] = Tax2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.EstimateTaskDetailDataTable table = (CloudAccountDA.EstimateTaskDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.EstimateTaskDetailDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateTaskDetailRow FindByEstimateTaskDetailID(int EstimateTaskDetailID)
            {
                return (CloudAccountDA.EstimateTaskDetailRow) base.Rows.Find(new object[] { EstimateTaskDetailID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.EstimateTaskDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "EstimateTaskDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnEstimateTaskDetailID = new DataColumn("EstimateTaskDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateTaskDetailID);
                this.columnEstimateID = new DataColumn("EstimateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateID);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnTaskDesc = new DataColumn("TaskDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaskDesc);
                this.columnRate = new DataColumn("Rate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnEstimateTaskDetailID }, true));
                this.columnEstimateTaskDetailID.AutoIncrement = true;
                this.columnEstimateTaskDetailID.AutoIncrementSeed = -1L;
                this.columnEstimateTaskDetailID.AutoIncrementStep = -1L;
                this.columnEstimateTaskDetailID.AllowDBNull = false;
                this.columnEstimateTaskDetailID.ReadOnly = true;
                this.columnEstimateTaskDetailID.Unique = true;
                this.columnEstimateID.AllowDBNull = false;
                this.columnTaskID.AllowDBNull = false;
                this.columnTaskDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnEstimateTaskDetailID = base.Columns["EstimateTaskDetailID"];
                this.columnEstimateID = base.Columns["EstimateID"];
                this.columnTaskID = base.Columns["TaskID"];
                this.columnTaskDesc = base.Columns["TaskDesc"];
                this.columnRate = base.Columns["Rate"];
                this.columnHours = base.Columns["Hours"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateTaskDetailRow NewEstimateTaskDetailRow()
            {
                return (CloudAccountDA.EstimateTaskDetailRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.EstimateTaskDetailRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.EstimateTaskDetailRowChanged != null)
                {
                    this.EstimateTaskDetailRowChanged(this, new CloudAccountDA.EstimateTaskDetailRowChangeEvent((CloudAccountDA.EstimateTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.EstimateTaskDetailRowChanging != null)
                {
                    this.EstimateTaskDetailRowChanging(this, new CloudAccountDA.EstimateTaskDetailRowChangeEvent((CloudAccountDA.EstimateTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.EstimateTaskDetailRowDeleted != null)
                {
                    this.EstimateTaskDetailRowDeleted(this, new CloudAccountDA.EstimateTaskDetailRowChangeEvent((CloudAccountDA.EstimateTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.EstimateTaskDetailRowDeleting != null)
                {
                    this.EstimateTaskDetailRowDeleting(this, new CloudAccountDA.EstimateTaskDetailRowChangeEvent((CloudAccountDA.EstimateTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveEstimateTaskDetailRow(CloudAccountDA.EstimateTaskDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateIDColumn
            {
                get
                {
                    return this.columnEstimateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateTaskDetailIDColumn
            {
                get
                {
                    return this.columnEstimateTaskDetailID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.EstimateTaskDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.EstimateTaskDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RateColumn
            {
                get
                {
                    return this.columnRate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskDescColumn
            {
                get
                {
                    return this.columnTaskDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
        }
        
        public class EstimateTaskDetailRow : DataRow
        {
            private CloudAccountDA.EstimateTaskDetailDataTable tableEstimateTaskDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EstimateTaskDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableEstimateTaskDetail = (CloudAccountDA.EstimateTaskDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableEstimateTaskDetail.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRateNull()
            {
                return base.IsNull(this.tableEstimateTaskDetail.RateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskDescNull()
            {
                return base.IsNull(this.tableEstimateTaskDetail.TaskDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableEstimateTaskDetail.Tax1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableEstimateTaskDetail.Tax2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableEstimateTaskDetail.TotalColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableEstimateTaskDetail.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRateNull()
            {
                base[this.tableEstimateTaskDetail.RateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaskDescNull()
            {
                base[this.tableEstimateTaskDetail.TaskDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax1Null()
            {
                base[this.tableEstimateTaskDetail.Tax1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax2Null()
            {
                base[this.tableEstimateTaskDetail.Tax2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTotalNull()
            {
                base[this.tableEstimateTaskDetail.TotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int EstimateID
            {
                get
                {
                    return (int) base[this.tableEstimateTaskDetail.EstimateIDColumn];
                }
                set
                {
                    base[this.tableEstimateTaskDetail.EstimateIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int EstimateTaskDetailID
            {
                get
                {
                    return (int) base[this.tableEstimateTaskDetail.EstimateTaskDetailIDColumn];
                }
                set
                {
                    base[this.tableEstimateTaskDetail.EstimateTaskDetailIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateTaskDetail.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'EstimateTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateTaskDetail.HoursColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Rate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateTaskDetail.RateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Rate' in table 'EstimateTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateTaskDetail.RateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TaskDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableEstimateTaskDetail.TaskDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaskDesc' in table 'EstimateTaskDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableEstimateTaskDetail.TaskDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaskID
            {
                get
                {
                    return (int) base[this.tableEstimateTaskDetail.TaskIDColumn];
                }
                set
                {
                    base[this.tableEstimateTaskDetail.TaskIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableEstimateTaskDetail.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'EstimateTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateTaskDetail.Tax1Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableEstimateTaskDetail.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'EstimateTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateTaskDetail.Tax2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableEstimateTaskDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'EstimateTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableEstimateTaskDetail.TotalColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EstimateTaskDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.EstimateTaskDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public EstimateTaskDetailRowChangeEvent(CloudAccountDA.EstimateTaskDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.EstimateTaskDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EstimateTaskDetailRowChangeEventHandler(object sender, CloudAccountDA.EstimateTaskDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ExpenseMasterDataTable : TypedTableBase<CloudAccountDA.ExpenseMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnAssignedToClient;
            private DataColumn columnAttachImage;
            private DataColumn columnCategoryID;
            private DataColumn columnClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnDeleted;
            private DataColumn columnEndDate;
            private DataColumn columnExpenseAmount;
            private DataColumn columnExpenseDate;
            private DataColumn columnExpenseID;
            private DataColumn columnExpenseStatus;
            private DataColumn columnFrequencyID;
            private DataColumn columnImage;
            private DataColumn columnNotes;
            private DataColumn columnRecurringExpense;
            private DataColumn columnSubCategoryID;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTaxAmount1;
            private DataColumn columnTaxAmount2;
            private DataColumn columnTaxes;
            private DataColumn columnUntilTimePeriod;
            private DataColumn columnVendor;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ExpenseMasterRowChangeEventHandler ExpenseMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ExpenseMasterRowChangeEventHandler ExpenseMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ExpenseMasterRowChangeEventHandler ExpenseMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ExpenseMasterRowChangeEventHandler ExpenseMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExpenseMasterDataTable()
            {
                base.TableName = "ExpenseMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ExpenseMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ExpenseMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddExpenseMasterRow(CloudAccountDA.ExpenseMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ExpenseMasterRow AddExpenseMasterRow(int CompanyID, decimal ExpenseAmount, DateTime ExpenseDate, string Vendor, int CategoryID, int SubCategoryID, string Notes, bool Taxes, int Tax1, decimal TaxAmount1, int Tax2, decimal TaxAmount2, bool RecurringExpense, int FrequencyID, string UntilTimePeriod, DateTime EndDate, bool AssignedToClient, int ClientID, bool AttachImage, byte[] Image, string ExpenseStatus, bool Active, bool Archived, bool Deleted)
            {
                CloudAccountDA.ExpenseMasterRow row = (CloudAccountDA.ExpenseMasterRow) base.NewRow();
                object[] objArray2 = new object[0x19];
                objArray2[1] = CompanyID;
                objArray2[2] = ExpenseAmount;
                objArray2[3] = ExpenseDate;
                objArray2[4] = Vendor;
                objArray2[5] = CategoryID;
                objArray2[6] = SubCategoryID;
                objArray2[7] = Notes;
                objArray2[8] = Taxes;
                objArray2[9] = Tax1;
                objArray2[10] = TaxAmount1;
                objArray2[11] = Tax2;
                objArray2[12] = TaxAmount2;
                objArray2[13] = RecurringExpense;
                objArray2[14] = FrequencyID;
                objArray2[15] = UntilTimePeriod;
                objArray2[0x10] = EndDate;
                objArray2[0x11] = AssignedToClient;
                objArray2[0x12] = ClientID;
                objArray2[0x13] = AttachImage;
                objArray2[20] = Image;
                objArray2[0x15] = ExpenseStatus;
                objArray2[0x16] = Active;
                objArray2[0x17] = Archived;
                objArray2[0x18] = Deleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ExpenseMasterDataTable table = (CloudAccountDA.ExpenseMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ExpenseMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ExpenseMasterRow FindByExpenseID(int ExpenseID)
            {
                return (CloudAccountDA.ExpenseMasterRow) base.Rows.Find(new object[] { ExpenseID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ExpenseMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ExpenseMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnExpenseID = new DataColumn("ExpenseID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnExpenseID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnExpenseAmount = new DataColumn("ExpenseAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnExpenseAmount);
                this.columnExpenseDate = new DataColumn("ExpenseDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnExpenseDate);
                this.columnVendor = new DataColumn("Vendor", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnVendor);
                this.columnCategoryID = new DataColumn("CategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnSubCategoryID = new DataColumn("SubCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSubCategoryID);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnTaxes = new DataColumn("Taxes", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnTaxes);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTaxAmount1 = new DataColumn("TaxAmount1", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTaxAmount1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTaxAmount2 = new DataColumn("TaxAmount2", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTaxAmount2);
                this.columnRecurringExpense = new DataColumn("RecurringExpense", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringExpense);
                this.columnFrequencyID = new DataColumn("FrequencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFrequencyID);
                this.columnUntilTimePeriod = new DataColumn("UntilTimePeriod", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUntilTimePeriod);
                this.columnEndDate = new DataColumn("EndDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnAssignedToClient = new DataColumn("AssignedToClient", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAssignedToClient);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnAttachImage = new DataColumn("AttachImage", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAttachImage);
                this.columnImage = new DataColumn("Image", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.columnExpenseStatus = new DataColumn("ExpenseStatus", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnExpenseStatus);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnExpenseID }, true));
                this.columnExpenseID.AutoIncrement = true;
                this.columnExpenseID.AutoIncrementSeed = -1L;
                this.columnExpenseID.AutoIncrementStep = -1L;
                this.columnExpenseID.AllowDBNull = false;
                this.columnExpenseID.ReadOnly = true;
                this.columnExpenseID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnExpenseAmount.AllowDBNull = false;
                this.columnVendor.MaxLength = 250;
                this.columnNotes.MaxLength = 0x7fffffff;
                this.columnUntilTimePeriod.MaxLength = 50;
                this.columnExpenseStatus.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnExpenseID = base.Columns["ExpenseID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnExpenseAmount = base.Columns["ExpenseAmount"];
                this.columnExpenseDate = base.Columns["ExpenseDate"];
                this.columnVendor = base.Columns["Vendor"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnSubCategoryID = base.Columns["SubCategoryID"];
                this.columnNotes = base.Columns["Notes"];
                this.columnTaxes = base.Columns["Taxes"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTaxAmount1 = base.Columns["TaxAmount1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTaxAmount2 = base.Columns["TaxAmount2"];
                this.columnRecurringExpense = base.Columns["RecurringExpense"];
                this.columnFrequencyID = base.Columns["FrequencyID"];
                this.columnUntilTimePeriod = base.Columns["UntilTimePeriod"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnAssignedToClient = base.Columns["AssignedToClient"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnAttachImage = base.Columns["AttachImage"];
                this.columnImage = base.Columns["Image"];
                this.columnExpenseStatus = base.Columns["ExpenseStatus"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ExpenseMasterRow NewExpenseMasterRow()
            {
                return (CloudAccountDA.ExpenseMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ExpenseMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ExpenseMasterRowChanged != null)
                {
                    this.ExpenseMasterRowChanged(this, new CloudAccountDA.ExpenseMasterRowChangeEvent((CloudAccountDA.ExpenseMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ExpenseMasterRowChanging != null)
                {
                    this.ExpenseMasterRowChanging(this, new CloudAccountDA.ExpenseMasterRowChangeEvent((CloudAccountDA.ExpenseMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ExpenseMasterRowDeleted != null)
                {
                    this.ExpenseMasterRowDeleted(this, new CloudAccountDA.ExpenseMasterRowChangeEvent((CloudAccountDA.ExpenseMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ExpenseMasterRowDeleting != null)
                {
                    this.ExpenseMasterRowDeleting(this, new CloudAccountDA.ExpenseMasterRowChangeEvent((CloudAccountDA.ExpenseMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveExpenseMasterRow(CloudAccountDA.ExpenseMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AssignedToClientColumn
            {
                get
                {
                    return this.columnAssignedToClient;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AttachImageColumn
            {
                get
                {
                    return this.columnAttachImage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CategoryIDColumn
            {
                get
                {
                    return this.columnCategoryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EndDateColumn
            {
                get
                {
                    return this.columnEndDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ExpenseAmountColumn
            {
                get
                {
                    return this.columnExpenseAmount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ExpenseDateColumn
            {
                get
                {
                    return this.columnExpenseDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ExpenseIDColumn
            {
                get
                {
                    return this.columnExpenseID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ExpenseStatusColumn
            {
                get
                {
                    return this.columnExpenseStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FrequencyIDColumn
            {
                get
                {
                    return this.columnFrequencyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ImageColumn
            {
                get
                {
                    return this.columnImage;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ExpenseMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ExpenseMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RecurringExpenseColumn
            {
                get
                {
                    return this.columnRecurringExpense;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SubCategoryIDColumn
            {
                get
                {
                    return this.columnSubCategoryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaxAmount1Column
            {
                get
                {
                    return this.columnTaxAmount1;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaxAmount2Column
            {
                get
                {
                    return this.columnTaxAmount2;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaxesColumn
            {
                get
                {
                    return this.columnTaxes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UntilTimePeriodColumn
            {
                get
                {
                    return this.columnUntilTimePeriod;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn VendorColumn
            {
                get
                {
                    return this.columnVendor;
                }
            }
        }
        
        public class ExpenseMasterRow : DataRow
        {
            private CloudAccountDA.ExpenseMasterDataTable tableExpenseMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ExpenseMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableExpenseMaster = (CloudAccountDA.ExpenseMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableExpenseMaster.ActiveColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableExpenseMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAssignedToClientNull()
            {
                return base.IsNull(this.tableExpenseMaster.AssignedToClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAttachImageNull()
            {
                return base.IsNull(this.tableExpenseMaster.AttachImageColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCategoryIDNull()
            {
                return base.IsNull(this.tableExpenseMaster.CategoryIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClientIDNull()
            {
                return base.IsNull(this.tableExpenseMaster.ClientIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableExpenseMaster.DeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEndDateNull()
            {
                return base.IsNull(this.tableExpenseMaster.EndDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsExpenseDateNull()
            {
                return base.IsNull(this.tableExpenseMaster.ExpenseDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsExpenseStatusNull()
            {
                return base.IsNull(this.tableExpenseMaster.ExpenseStatusColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFrequencyIDNull()
            {
                return base.IsNull(this.tableExpenseMaster.FrequencyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsImageNull()
            {
                return base.IsNull(this.tableExpenseMaster.ImageColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableExpenseMaster.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurringExpenseNull()
            {
                return base.IsNull(this.tableExpenseMaster.RecurringExpenseColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSubCategoryIDNull()
            {
                return base.IsNull(this.tableExpenseMaster.SubCategoryIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableExpenseMaster.Tax1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableExpenseMaster.Tax2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaxAmount1Null()
            {
                return base.IsNull(this.tableExpenseMaster.TaxAmount1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaxAmount2Null()
            {
                return base.IsNull(this.tableExpenseMaster.TaxAmount2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaxesNull()
            {
                return base.IsNull(this.tableExpenseMaster.TaxesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUntilTimePeriodNull()
            {
                return base.IsNull(this.tableExpenseMaster.UntilTimePeriodColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVendorNull()
            {
                return base.IsNull(this.tableExpenseMaster.VendorColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetActiveNull()
            {
                base[this.tableExpenseMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetArchivedNull()
            {
                base[this.tableExpenseMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAssignedToClientNull()
            {
                base[this.tableExpenseMaster.AssignedToClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAttachImageNull()
            {
                base[this.tableExpenseMaster.AttachImageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCategoryIDNull()
            {
                base[this.tableExpenseMaster.CategoryIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetClientIDNull()
            {
                base[this.tableExpenseMaster.ClientIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDeletedNull()
            {
                base[this.tableExpenseMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEndDateNull()
            {
                base[this.tableExpenseMaster.EndDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetExpenseDateNull()
            {
                base[this.tableExpenseMaster.ExpenseDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetExpenseStatusNull()
            {
                base[this.tableExpenseMaster.ExpenseStatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFrequencyIDNull()
            {
                base[this.tableExpenseMaster.FrequencyIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetImageNull()
            {
                base[this.tableExpenseMaster.ImageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableExpenseMaster.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRecurringExpenseNull()
            {
                base[this.tableExpenseMaster.RecurringExpenseColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSubCategoryIDNull()
            {
                base[this.tableExpenseMaster.SubCategoryIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax1Null()
            {
                base[this.tableExpenseMaster.Tax1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax2Null()
            {
                base[this.tableExpenseMaster.Tax2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaxAmount1Null()
            {
                base[this.tableExpenseMaster.TaxAmount1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaxAmount2Null()
            {
                base[this.tableExpenseMaster.TaxAmount2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaxesNull()
            {
                base[this.tableExpenseMaster.TaxesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUntilTimePeriodNull()
            {
                base[this.tableExpenseMaster.UntilTimePeriodColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetVendorNull()
            {
                base[this.tableExpenseMaster.VendorColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableExpenseMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableExpenseMaster.ActiveColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableExpenseMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableExpenseMaster.ArchivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool AssignedToClient
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableExpenseMaster.AssignedToClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AssignedToClient' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableExpenseMaster.AssignedToClientColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool AttachImage
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableExpenseMaster.AttachImageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AttachImage' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableExpenseMaster.AttachImageColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CategoryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableExpenseMaster.CategoryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CategoryID' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.CategoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ClientID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableExpenseMaster.ClientIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ClientID' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableExpenseMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableExpenseMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableExpenseMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableExpenseMaster.DeletedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime EndDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableExpenseMaster.EndDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EndDate' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableExpenseMaster.EndDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ExpenseAmount
            {
                get
                {
                    return (decimal) base[this.tableExpenseMaster.ExpenseAmountColumn];
                }
                set
                {
                    base[this.tableExpenseMaster.ExpenseAmountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime ExpenseDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableExpenseMaster.ExpenseDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ExpenseDate' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableExpenseMaster.ExpenseDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ExpenseID
            {
                get
                {
                    return (int) base[this.tableExpenseMaster.ExpenseIDColumn];
                }
                set
                {
                    base[this.tableExpenseMaster.ExpenseIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ExpenseStatus
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableExpenseMaster.ExpenseStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ExpenseStatus' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableExpenseMaster.ExpenseStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FrequencyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableExpenseMaster.FrequencyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FrequencyID' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.FrequencyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public byte[] Image
            {
                get
                {
                    byte[] buffer;
                    try
                    {
                        buffer = (byte[]) base[this.tableExpenseMaster.ImageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Image' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return buffer;
                }
                set
                {
                    base[this.tableExpenseMaster.ImageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableExpenseMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableExpenseMaster.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool RecurringExpense
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableExpenseMaster.RecurringExpenseColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringExpense' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableExpenseMaster.RecurringExpenseColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SubCategoryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableExpenseMaster.SubCategoryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SubCategoryID' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.SubCategoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableExpenseMaster.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.Tax1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableExpenseMaster.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.Tax2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal TaxAmount1
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableExpenseMaster.TaxAmount1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxAmount1' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.TaxAmount1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal TaxAmount2
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableExpenseMaster.TaxAmount2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxAmount2' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableExpenseMaster.TaxAmount2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Taxes
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableExpenseMaster.TaxesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Taxes' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableExpenseMaster.TaxesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string UntilTimePeriod
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableExpenseMaster.UntilTimePeriodColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UntilTimePeriod' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableExpenseMaster.UntilTimePeriodColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Vendor
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableExpenseMaster.VendorColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Vendor' in table 'ExpenseMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableExpenseMaster.VendorColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ExpenseMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ExpenseMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExpenseMasterRowChangeEvent(CloudAccountDA.ExpenseMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ExpenseMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ExpenseMasterRowChangeEventHandler(object sender, CloudAccountDA.ExpenseMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FAQCategoryMasterDataTable : TypedTableBase<CloudAccountDA.FAQCategoryMasterRow>
        {
            private DataColumn columnFAQCategoryDesc;
            private DataColumn columnFAQCategoryID;
            private DataColumn columnFAQCategoryName;
            private DataColumn columnFAQCategoryStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQCategoryMasterRowChangeEventHandler FAQCategoryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQCategoryMasterRowChangeEventHandler FAQCategoryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQCategoryMasterRowChangeEventHandler FAQCategoryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQCategoryMasterRowChangeEventHandler FAQCategoryMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FAQCategoryMasterDataTable()
            {
                base.TableName = "FAQCategoryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FAQCategoryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected FAQCategoryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFAQCategoryMasterRow(CloudAccountDA.FAQCategoryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FAQCategoryMasterRow AddFAQCategoryMasterRow(string FAQCategoryName, string FAQCategoryDesc, bool FAQCategoryStatus)
            {
                CloudAccountDA.FAQCategoryMasterRow row = (CloudAccountDA.FAQCategoryMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = FAQCategoryName;
                objArray2[2] = FAQCategoryDesc;
                objArray2[3] = FAQCategoryStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.FAQCategoryMasterDataTable table = (CloudAccountDA.FAQCategoryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FAQCategoryMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FAQCategoryMasterRow FindByFAQCategoryID(int FAQCategoryID)
            {
                return (CloudAccountDA.FAQCategoryMasterRow) base.Rows.Find(new object[] { FAQCategoryID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FAQCategoryMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FAQCategoryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnFAQCategoryID = new DataColumn("FAQCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFAQCategoryID);
                this.columnFAQCategoryName = new DataColumn("FAQCategoryName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFAQCategoryName);
                this.columnFAQCategoryDesc = new DataColumn("FAQCategoryDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFAQCategoryDesc);
                this.columnFAQCategoryStatus = new DataColumn("FAQCategoryStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnFAQCategoryStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFAQCategoryID }, true));
                this.columnFAQCategoryID.AutoIncrement = true;
                this.columnFAQCategoryID.AutoIncrementSeed = -1L;
                this.columnFAQCategoryID.AutoIncrementStep = -1L;
                this.columnFAQCategoryID.AllowDBNull = false;
                this.columnFAQCategoryID.ReadOnly = true;
                this.columnFAQCategoryID.Unique = true;
                this.columnFAQCategoryName.MaxLength = 50;
                this.columnFAQCategoryDesc.MaxLength = 100;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFAQCategoryID = base.Columns["FAQCategoryID"];
                this.columnFAQCategoryName = base.Columns["FAQCategoryName"];
                this.columnFAQCategoryDesc = base.Columns["FAQCategoryDesc"];
                this.columnFAQCategoryStatus = base.Columns["FAQCategoryStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FAQCategoryMasterRow NewFAQCategoryMasterRow()
            {
                return (CloudAccountDA.FAQCategoryMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FAQCategoryMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FAQCategoryMasterRowChanged != null)
                {
                    this.FAQCategoryMasterRowChanged(this, new CloudAccountDA.FAQCategoryMasterRowChangeEvent((CloudAccountDA.FAQCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FAQCategoryMasterRowChanging != null)
                {
                    this.FAQCategoryMasterRowChanging(this, new CloudAccountDA.FAQCategoryMasterRowChangeEvent((CloudAccountDA.FAQCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FAQCategoryMasterRowDeleted != null)
                {
                    this.FAQCategoryMasterRowDeleted(this, new CloudAccountDA.FAQCategoryMasterRowChangeEvent((CloudAccountDA.FAQCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FAQCategoryMasterRowDeleting != null)
                {
                    this.FAQCategoryMasterRowDeleting(this, new CloudAccountDA.FAQCategoryMasterRowChangeEvent((CloudAccountDA.FAQCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFAQCategoryMasterRow(CloudAccountDA.FAQCategoryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FAQCategoryDescColumn
            {
                get
                {
                    return this.columnFAQCategoryDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FAQCategoryIDColumn
            {
                get
                {
                    return this.columnFAQCategoryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FAQCategoryNameColumn
            {
                get
                {
                    return this.columnFAQCategoryName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FAQCategoryStatusColumn
            {
                get
                {
                    return this.columnFAQCategoryStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FAQCategoryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FAQCategoryMasterRow) base.Rows[index];
                }
            }
        }
        
        public class FAQCategoryMasterRow : DataRow
        {
            private CloudAccountDA.FAQCategoryMasterDataTable tableFAQCategoryMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FAQCategoryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFAQCategoryMaster = (CloudAccountDA.FAQCategoryMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFAQCategoryDescNull()
            {
                return base.IsNull(this.tableFAQCategoryMaster.FAQCategoryDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFAQCategoryNameNull()
            {
                return base.IsNull(this.tableFAQCategoryMaster.FAQCategoryNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFAQCategoryStatusNull()
            {
                return base.IsNull(this.tableFAQCategoryMaster.FAQCategoryStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFAQCategoryDescNull()
            {
                base[this.tableFAQCategoryMaster.FAQCategoryDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFAQCategoryNameNull()
            {
                base[this.tableFAQCategoryMaster.FAQCategoryNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFAQCategoryStatusNull()
            {
                base[this.tableFAQCategoryMaster.FAQCategoryStatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FAQCategoryDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFAQCategoryMaster.FAQCategoryDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FAQCategoryDesc' in table 'FAQCategoryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFAQCategoryMaster.FAQCategoryDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FAQCategoryID
            {
                get
                {
                    return (int) base[this.tableFAQCategoryMaster.FAQCategoryIDColumn];
                }
                set
                {
                    base[this.tableFAQCategoryMaster.FAQCategoryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FAQCategoryName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFAQCategoryMaster.FAQCategoryNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FAQCategoryName' in table 'FAQCategoryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFAQCategoryMaster.FAQCategoryNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool FAQCategoryStatus
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFAQCategoryMaster.FAQCategoryStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FAQCategoryStatus' in table 'FAQCategoryMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFAQCategoryMaster.FAQCategoryStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FAQCategoryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FAQCategoryMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FAQCategoryMasterRowChangeEvent(CloudAccountDA.FAQCategoryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FAQCategoryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FAQCategoryMasterRowChangeEventHandler(object sender, CloudAccountDA.FAQCategoryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FAQMasterDataTable : TypedTableBase<CloudAccountDA.FAQMasterRow>
        {
            private DataColumn columnAnswer;
            private DataColumn columnFAQCategoryID;
            private DataColumn columnFAQID;
            private DataColumn columnQuestion;
            private DataColumn columnStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQMasterRowChangeEventHandler FAQMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQMasterRowChangeEventHandler FAQMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQMasterRowChangeEventHandler FAQMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FAQMasterRowChangeEventHandler FAQMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FAQMasterDataTable()
            {
                base.TableName = "FAQMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FAQMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FAQMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFAQMasterRow(CloudAccountDA.FAQMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FAQMasterRow AddFAQMasterRow(int FAQCategoryID, string Question, string Answer, bool Status)
            {
                CloudAccountDA.FAQMasterRow row = (CloudAccountDA.FAQMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = FAQCategoryID;
                objArray2[2] = Question;
                objArray2[3] = Answer;
                objArray2[4] = Status;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.FAQMasterDataTable table = (CloudAccountDA.FAQMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FAQMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FAQMasterRow FindByFAQID(int FAQID)
            {
                return (CloudAccountDA.FAQMasterRow) base.Rows.Find(new object[] { FAQID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FAQMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FAQMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnFAQID = new DataColumn("FAQID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFAQID);
                this.columnFAQCategoryID = new DataColumn("FAQCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFAQCategoryID);
                this.columnQuestion = new DataColumn("Question", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnQuestion);
                this.columnAnswer = new DataColumn("Answer", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAnswer);
                this.columnStatus = new DataColumn("Status", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFAQID }, true));
                this.columnFAQID.AutoIncrement = true;
                this.columnFAQID.AutoIncrementSeed = -1L;
                this.columnFAQID.AutoIncrementStep = -1L;
                this.columnFAQID.AllowDBNull = false;
                this.columnFAQID.ReadOnly = true;
                this.columnFAQID.Unique = true;
                this.columnQuestion.MaxLength = 500;
                this.columnAnswer.MaxLength = 0x3e8;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFAQID = base.Columns["FAQID"];
                this.columnFAQCategoryID = base.Columns["FAQCategoryID"];
                this.columnQuestion = base.Columns["Question"];
                this.columnAnswer = base.Columns["Answer"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FAQMasterRow NewFAQMasterRow()
            {
                return (CloudAccountDA.FAQMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FAQMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FAQMasterRowChanged != null)
                {
                    this.FAQMasterRowChanged(this, new CloudAccountDA.FAQMasterRowChangeEvent((CloudAccountDA.FAQMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FAQMasterRowChanging != null)
                {
                    this.FAQMasterRowChanging(this, new CloudAccountDA.FAQMasterRowChangeEvent((CloudAccountDA.FAQMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FAQMasterRowDeleted != null)
                {
                    this.FAQMasterRowDeleted(this, new CloudAccountDA.FAQMasterRowChangeEvent((CloudAccountDA.FAQMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FAQMasterRowDeleting != null)
                {
                    this.FAQMasterRowDeleting(this, new CloudAccountDA.FAQMasterRowChangeEvent((CloudAccountDA.FAQMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFAQMasterRow(CloudAccountDA.FAQMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AnswerColumn
            {
                get
                {
                    return this.columnAnswer;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FAQCategoryIDColumn
            {
                get
                {
                    return this.columnFAQCategoryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FAQIDColumn
            {
                get
                {
                    return this.columnFAQID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FAQMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FAQMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn QuestionColumn
            {
                get
                {
                    return this.columnQuestion;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
        }
        
        public class FAQMasterRow : DataRow
        {
            private CloudAccountDA.FAQMasterDataTable tableFAQMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FAQMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFAQMaster = (CloudAccountDA.FAQMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAnswerNull()
            {
                return base.IsNull(this.tableFAQMaster.AnswerColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFAQCategoryIDNull()
            {
                return base.IsNull(this.tableFAQMaster.FAQCategoryIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQuestionNull()
            {
                return base.IsNull(this.tableFAQMaster.QuestionColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStatusNull()
            {
                return base.IsNull(this.tableFAQMaster.StatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAnswerNull()
            {
                base[this.tableFAQMaster.AnswerColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFAQCategoryIDNull()
            {
                base[this.tableFAQMaster.FAQCategoryIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetQuestionNull()
            {
                base[this.tableFAQMaster.QuestionColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetStatusNull()
            {
                base[this.tableFAQMaster.StatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Answer
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFAQMaster.AnswerColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Answer' in table 'FAQMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFAQMaster.AnswerColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FAQCategoryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableFAQMaster.FAQCategoryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FAQCategoryID' in table 'FAQMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableFAQMaster.FAQCategoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FAQID
            {
                get
                {
                    return (int) base[this.tableFAQMaster.FAQIDColumn];
                }
                set
                {
                    base[this.tableFAQMaster.FAQIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Question
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFAQMaster.QuestionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Question' in table 'FAQMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFAQMaster.QuestionColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Status
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFAQMaster.StatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Status' in table 'FAQMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFAQMaster.StatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FAQMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FAQMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FAQMasterRowChangeEvent(CloudAccountDA.FAQMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FAQMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FAQMasterRowChangeEventHandler(object sender, CloudAccountDA.FAQMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FeatureCategoryMasterDataTable : TypedTableBase<CloudAccountDA.FeatureCategoryMasterRow>
        {
            private DataColumn columnDescription;
            private DataColumn columnFeatureCategoryID;
            private DataColumn columnFeatureCategoryName;
            private DataColumn columnShowOnHomePage;
            private DataColumn columnStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureCategoryMasterRowChangeEventHandler FeatureCategoryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureCategoryMasterRowChangeEventHandler FeatureCategoryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureCategoryMasterRowChangeEventHandler FeatureCategoryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureCategoryMasterRowChangeEventHandler FeatureCategoryMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FeatureCategoryMasterDataTable()
            {
                base.TableName = "FeatureCategoryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FeatureCategoryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FeatureCategoryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddFeatureCategoryMasterRow(CloudAccountDA.FeatureCategoryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureCategoryMasterRow AddFeatureCategoryMasterRow(string FeatureCategoryName, string Description, bool ShowOnHomePage, bool Status)
            {
                CloudAccountDA.FeatureCategoryMasterRow row = (CloudAccountDA.FeatureCategoryMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = FeatureCategoryName;
                objArray2[2] = Description;
                objArray2[3] = ShowOnHomePage;
                objArray2[4] = Status;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.FeatureCategoryMasterDataTable table = (CloudAccountDA.FeatureCategoryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FeatureCategoryMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureCategoryMasterRow FindByFeatureCategoryID(int FeatureCategoryID)
            {
                return (CloudAccountDA.FeatureCategoryMasterRow) base.Rows.Find(new object[] { FeatureCategoryID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FeatureCategoryMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FeatureCategoryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnFeatureCategoryID = new DataColumn("FeatureCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureCategoryID);
                this.columnFeatureCategoryName = new DataColumn("FeatureCategoryName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureCategoryName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnShowOnHomePage = new DataColumn("ShowOnHomePage", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnShowOnHomePage);
                this.columnStatus = new DataColumn("Status", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFeatureCategoryID }, true));
                this.columnFeatureCategoryID.AutoIncrement = true;
                this.columnFeatureCategoryID.AutoIncrementSeed = -1L;
                this.columnFeatureCategoryID.AutoIncrementStep = -1L;
                this.columnFeatureCategoryID.AllowDBNull = false;
                this.columnFeatureCategoryID.ReadOnly = true;
                this.columnFeatureCategoryID.Unique = true;
                this.columnFeatureCategoryName.AllowDBNull = false;
                this.columnFeatureCategoryName.MaxLength = 50;
                this.columnDescription.MaxLength = 500;
                this.columnShowOnHomePage.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFeatureCategoryID = base.Columns["FeatureCategoryID"];
                this.columnFeatureCategoryName = base.Columns["FeatureCategoryName"];
                this.columnDescription = base.Columns["Description"];
                this.columnShowOnHomePage = base.Columns["ShowOnHomePage"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureCategoryMasterRow NewFeatureCategoryMasterRow()
            {
                return (CloudAccountDA.FeatureCategoryMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FeatureCategoryMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FeatureCategoryMasterRowChanged != null)
                {
                    this.FeatureCategoryMasterRowChanged(this, new CloudAccountDA.FeatureCategoryMasterRowChangeEvent((CloudAccountDA.FeatureCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FeatureCategoryMasterRowChanging != null)
                {
                    this.FeatureCategoryMasterRowChanging(this, new CloudAccountDA.FeatureCategoryMasterRowChangeEvent((CloudAccountDA.FeatureCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FeatureCategoryMasterRowDeleted != null)
                {
                    this.FeatureCategoryMasterRowDeleted(this, new CloudAccountDA.FeatureCategoryMasterRowChangeEvent((CloudAccountDA.FeatureCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FeatureCategoryMasterRowDeleting != null)
                {
                    this.FeatureCategoryMasterRowDeleting(this, new CloudAccountDA.FeatureCategoryMasterRowChangeEvent((CloudAccountDA.FeatureCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFeatureCategoryMasterRow(CloudAccountDA.FeatureCategoryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FeatureCategoryIDColumn
            {
                get
                {
                    return this.columnFeatureCategoryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FeatureCategoryNameColumn
            {
                get
                {
                    return this.columnFeatureCategoryName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureCategoryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FeatureCategoryMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ShowOnHomePageColumn
            {
                get
                {
                    return this.columnShowOnHomePage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
        }
        
        public class FeatureCategoryMasterRow : DataRow
        {
            private CloudAccountDA.FeatureCategoryMasterDataTable tableFeatureCategoryMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FeatureCategoryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFeatureCategoryMaster = (CloudAccountDA.FeatureCategoryMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDescriptionNull()
            {
                return base.IsNull(this.tableFeatureCategoryMaster.DescriptionColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDescriptionNull()
            {
                base[this.tableFeatureCategoryMaster.DescriptionColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Description
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFeatureCategoryMaster.DescriptionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Description' in table 'FeatureCategoryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFeatureCategoryMaster.DescriptionColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FeatureCategoryID
            {
                get
                {
                    return (int) base[this.tableFeatureCategoryMaster.FeatureCategoryIDColumn];
                }
                set
                {
                    base[this.tableFeatureCategoryMaster.FeatureCategoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FeatureCategoryName
            {
                get
                {
                    return (string) base[this.tableFeatureCategoryMaster.FeatureCategoryNameColumn];
                }
                set
                {
                    base[this.tableFeatureCategoryMaster.FeatureCategoryNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowOnHomePage
            {
                get
                {
                    return (bool) base[this.tableFeatureCategoryMaster.ShowOnHomePageColumn];
                }
                set
                {
                    base[this.tableFeatureCategoryMaster.ShowOnHomePageColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Status
            {
                get
                {
                    return (bool) base[this.tableFeatureCategoryMaster.StatusColumn];
                }
                set
                {
                    base[this.tableFeatureCategoryMaster.StatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FeatureCategoryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FeatureCategoryMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FeatureCategoryMasterRowChangeEvent(CloudAccountDA.FeatureCategoryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FeatureCategoryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FeatureCategoryMasterRowChangeEventHandler(object sender, CloudAccountDA.FeatureCategoryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FeatureContentMasterDataTable : TypedTableBase<CloudAccountDA.FeatureContentMasterRow>
        {
            private DataColumn columnFeatureCategoryID;
            private DataColumn columnFeatureContent;
            private DataColumn columnFeatureContentID;
            private DataColumn columnStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureContentMasterRowChangeEventHandler FeatureContentMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureContentMasterRowChangeEventHandler FeatureContentMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureContentMasterRowChangeEventHandler FeatureContentMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureContentMasterRowChangeEventHandler FeatureContentMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FeatureContentMasterDataTable()
            {
                base.TableName = "FeatureContentMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FeatureContentMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FeatureContentMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFeatureContentMasterRow(CloudAccountDA.FeatureContentMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureContentMasterRow AddFeatureContentMasterRow(int FeatureCategoryID, string FeatureContent, bool Status)
            {
                CloudAccountDA.FeatureContentMasterRow row = (CloudAccountDA.FeatureContentMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = FeatureCategoryID;
                objArray2[2] = FeatureContent;
                objArray2[3] = Status;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.FeatureContentMasterDataTable table = (CloudAccountDA.FeatureContentMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FeatureContentMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureContentMasterRow FindByFeatureContentID(int FeatureContentID)
            {
                return (CloudAccountDA.FeatureContentMasterRow) base.Rows.Find(new object[] { FeatureContentID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FeatureContentMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FeatureContentMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnFeatureContentID = new DataColumn("FeatureContentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureContentID);
                this.columnFeatureCategoryID = new DataColumn("FeatureCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureCategoryID);
                this.columnFeatureContent = new DataColumn("FeatureContent", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureContent);
                this.columnStatus = new DataColumn("Status", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFeatureContentID }, true));
                this.columnFeatureContentID.AutoIncrement = true;
                this.columnFeatureContentID.AutoIncrementSeed = -1L;
                this.columnFeatureContentID.AutoIncrementStep = -1L;
                this.columnFeatureContentID.AllowDBNull = false;
                this.columnFeatureContentID.ReadOnly = true;
                this.columnFeatureContentID.Unique = true;
                this.columnFeatureCategoryID.AllowDBNull = false;
                this.columnFeatureContent.MaxLength = 500;
                this.columnStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFeatureContentID = base.Columns["FeatureContentID"];
                this.columnFeatureCategoryID = base.Columns["FeatureCategoryID"];
                this.columnFeatureContent = base.Columns["FeatureContent"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureContentMasterRow NewFeatureContentMasterRow()
            {
                return (CloudAccountDA.FeatureContentMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FeatureContentMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FeatureContentMasterRowChanged != null)
                {
                    this.FeatureContentMasterRowChanged(this, new CloudAccountDA.FeatureContentMasterRowChangeEvent((CloudAccountDA.FeatureContentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FeatureContentMasterRowChanging != null)
                {
                    this.FeatureContentMasterRowChanging(this, new CloudAccountDA.FeatureContentMasterRowChangeEvent((CloudAccountDA.FeatureContentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FeatureContentMasterRowDeleted != null)
                {
                    this.FeatureContentMasterRowDeleted(this, new CloudAccountDA.FeatureContentMasterRowChangeEvent((CloudAccountDA.FeatureContentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FeatureContentMasterRowDeleting != null)
                {
                    this.FeatureContentMasterRowDeleting(this, new CloudAccountDA.FeatureContentMasterRowChangeEvent((CloudAccountDA.FeatureContentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFeatureContentMasterRow(CloudAccountDA.FeatureContentMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FeatureCategoryIDColumn
            {
                get
                {
                    return this.columnFeatureCategoryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FeatureContentColumn
            {
                get
                {
                    return this.columnFeatureContent;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FeatureContentIDColumn
            {
                get
                {
                    return this.columnFeatureContentID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureContentMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FeatureContentMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
        }
        
        public class FeatureContentMasterRow : DataRow
        {
            private CloudAccountDA.FeatureContentMasterDataTable tableFeatureContentMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FeatureContentMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFeatureContentMaster = (CloudAccountDA.FeatureContentMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFeatureContentNull()
            {
                return base.IsNull(this.tableFeatureContentMaster.FeatureContentColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFeatureContentNull()
            {
                base[this.tableFeatureContentMaster.FeatureContentColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FeatureCategoryID
            {
                get
                {
                    return (int) base[this.tableFeatureContentMaster.FeatureCategoryIDColumn];
                }
                set
                {
                    base[this.tableFeatureContentMaster.FeatureCategoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FeatureContent
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFeatureContentMaster.FeatureContentColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FeatureContent' in table 'FeatureContentMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFeatureContentMaster.FeatureContentColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FeatureContentID
            {
                get
                {
                    return (int) base[this.tableFeatureContentMaster.FeatureContentIDColumn];
                }
                set
                {
                    base[this.tableFeatureContentMaster.FeatureContentIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Status
            {
                get
                {
                    return (bool) base[this.tableFeatureContentMaster.StatusColumn];
                }
                set
                {
                    base[this.tableFeatureContentMaster.StatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FeatureContentMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FeatureContentMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FeatureContentMasterRowChangeEvent(CloudAccountDA.FeatureContentMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FeatureContentMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FeatureContentMasterRowChangeEventHandler(object sender, CloudAccountDA.FeatureContentMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FeatureMasterDataTable : TypedTableBase<CloudAccountDA.FeatureMasterRow>
        {
            private DataColumn columnFeatureDesc;
            private DataColumn columnFeatureID;
            private DataColumn columnFeatureImage;
            private DataColumn columnFeatureName;
            private DataColumn columnFeatureStatus;
            private DataColumn columnShowOnHomePage;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureMasterRowChangeEventHandler FeatureMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureMasterRowChangeEventHandler FeatureMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureMasterRowChangeEventHandler FeatureMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FeatureMasterRowChangeEventHandler FeatureMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FeatureMasterDataTable()
            {
                base.TableName = "FeatureMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FeatureMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FeatureMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFeatureMasterRow(CloudAccountDA.FeatureMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureMasterRow AddFeatureMasterRow(string FeatureName, byte[] FeatureImage, string FeatureDesc, bool FeatureStatus, bool ShowOnHomePage)
            {
                CloudAccountDA.FeatureMasterRow row = (CloudAccountDA.FeatureMasterRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = FeatureName;
                objArray2[2] = FeatureImage;
                objArray2[3] = FeatureDesc;
                objArray2[4] = FeatureStatus;
                objArray2[5] = ShowOnHomePage;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.FeatureMasterDataTable table = (CloudAccountDA.FeatureMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FeatureMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureMasterRow FindByFeatureID(int FeatureID)
            {
                return (CloudAccountDA.FeatureMasterRow) base.Rows.Find(new object[] { FeatureID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FeatureMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FeatureMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnFeatureID = new DataColumn("FeatureID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureID);
                this.columnFeatureName = new DataColumn("FeatureName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureName);
                this.columnFeatureImage = new DataColumn("FeatureImage", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureImage);
                this.columnFeatureDesc = new DataColumn("FeatureDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureDesc);
                this.columnFeatureStatus = new DataColumn("FeatureStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnFeatureStatus);
                this.columnShowOnHomePage = new DataColumn("ShowOnHomePage", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnShowOnHomePage);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFeatureID }, true));
                this.columnFeatureID.AutoIncrement = true;
                this.columnFeatureID.AutoIncrementSeed = -1L;
                this.columnFeatureID.AutoIncrementStep = -1L;
                this.columnFeatureID.AllowDBNull = false;
                this.columnFeatureID.ReadOnly = true;
                this.columnFeatureID.Unique = true;
                this.columnFeatureName.AllowDBNull = false;
                this.columnFeatureName.MaxLength = 50;
                this.columnFeatureImage.AllowDBNull = false;
                this.columnFeatureDesc.MaxLength = 500;
                this.columnFeatureStatus.AllowDBNull = false;
                this.columnShowOnHomePage.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFeatureID = base.Columns["FeatureID"];
                this.columnFeatureName = base.Columns["FeatureName"];
                this.columnFeatureImage = base.Columns["FeatureImage"];
                this.columnFeatureDesc = base.Columns["FeatureDesc"];
                this.columnFeatureStatus = base.Columns["FeatureStatus"];
                this.columnShowOnHomePage = base.Columns["ShowOnHomePage"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FeatureMasterRow NewFeatureMasterRow()
            {
                return (CloudAccountDA.FeatureMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FeatureMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FeatureMasterRowChanged != null)
                {
                    this.FeatureMasterRowChanged(this, new CloudAccountDA.FeatureMasterRowChangeEvent((CloudAccountDA.FeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FeatureMasterRowChanging != null)
                {
                    this.FeatureMasterRowChanging(this, new CloudAccountDA.FeatureMasterRowChangeEvent((CloudAccountDA.FeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FeatureMasterRowDeleted != null)
                {
                    this.FeatureMasterRowDeleted(this, new CloudAccountDA.FeatureMasterRowChangeEvent((CloudAccountDA.FeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FeatureMasterRowDeleting != null)
                {
                    this.FeatureMasterRowDeleting(this, new CloudAccountDA.FeatureMasterRowChangeEvent((CloudAccountDA.FeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFeatureMasterRow(CloudAccountDA.FeatureMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FeatureDescColumn
            {
                get
                {
                    return this.columnFeatureDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FeatureIDColumn
            {
                get
                {
                    return this.columnFeatureID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FeatureImageColumn
            {
                get
                {
                    return this.columnFeatureImage;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FeatureNameColumn
            {
                get
                {
                    return this.columnFeatureName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FeatureStatusColumn
            {
                get
                {
                    return this.columnFeatureStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FeatureMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ShowOnHomePageColumn
            {
                get
                {
                    return this.columnShowOnHomePage;
                }
            }
        }
        
        public class FeatureMasterRow : DataRow
        {
            private CloudAccountDA.FeatureMasterDataTable tableFeatureMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FeatureMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFeatureMaster = (CloudAccountDA.FeatureMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFeatureDescNull()
            {
                return base.IsNull(this.tableFeatureMaster.FeatureDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFeatureDescNull()
            {
                base[this.tableFeatureMaster.FeatureDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FeatureDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFeatureMaster.FeatureDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FeatureDesc' in table 'FeatureMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFeatureMaster.FeatureDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FeatureID
            {
                get
                {
                    return (int) base[this.tableFeatureMaster.FeatureIDColumn];
                }
                set
                {
                    base[this.tableFeatureMaster.FeatureIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public byte[] FeatureImage
            {
                get
                {
                    return (byte[]) base[this.tableFeatureMaster.FeatureImageColumn];
                }
                set
                {
                    base[this.tableFeatureMaster.FeatureImageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FeatureName
            {
                get
                {
                    return (string) base[this.tableFeatureMaster.FeatureNameColumn];
                }
                set
                {
                    base[this.tableFeatureMaster.FeatureNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool FeatureStatus
            {
                get
                {
                    return (bool) base[this.tableFeatureMaster.FeatureStatusColumn];
                }
                set
                {
                    base[this.tableFeatureMaster.FeatureStatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowOnHomePage
            {
                get
                {
                    return (bool) base[this.tableFeatureMaster.ShowOnHomePageColumn];
                }
                set
                {
                    base[this.tableFeatureMaster.ShowOnHomePageColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FeatureMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FeatureMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FeatureMasterRowChangeEvent(CloudAccountDA.FeatureMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FeatureMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FeatureMasterRowChangeEventHandler(object sender, CloudAccountDA.FeatureMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FooterContentDataTable : TypedTableBase<CloudAccountDA.FooterContentRow>
        {
            private DataColumn columnFooterContent;
            private DataColumn columnFooterContentID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FooterContentRowChangeEventHandler FooterContentRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FooterContentRowChangeEventHandler FooterContentRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FooterContentRowChangeEventHandler FooterContentRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FooterContentRowChangeEventHandler FooterContentRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FooterContentDataTable()
            {
                base.TableName = "FooterContent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FooterContentDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FooterContentDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddFooterContentRow(CloudAccountDA.FooterContentRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FooterContentRow AddFooterContentRow(string FooterContent)
            {
                CloudAccountDA.FooterContentRow row = (CloudAccountDA.FooterContentRow) base.NewRow();
                object[] objArray2 = new object[2];
                objArray2[1] = FooterContent;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.FooterContentDataTable table = (CloudAccountDA.FooterContentDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FooterContentDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FooterContentRow FindByFooterContentID(int FooterContentID)
            {
                return (CloudAccountDA.FooterContentRow) base.Rows.Find(new object[] { FooterContentID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FooterContentRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FooterContentDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnFooterContentID = new DataColumn("FooterContentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFooterContentID);
                this.columnFooterContent = new DataColumn("FooterContent", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFooterContent);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFooterContentID }, true));
                this.columnFooterContentID.AutoIncrement = true;
                this.columnFooterContentID.AutoIncrementSeed = -1L;
                this.columnFooterContentID.AutoIncrementStep = -1L;
                this.columnFooterContentID.AllowDBNull = false;
                this.columnFooterContentID.ReadOnly = true;
                this.columnFooterContentID.Unique = true;
                this.columnFooterContent.AllowDBNull = false;
                this.columnFooterContent.MaxLength = 500;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFooterContentID = base.Columns["FooterContentID"];
                this.columnFooterContent = base.Columns["FooterContent"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FooterContentRow NewFooterContentRow()
            {
                return (CloudAccountDA.FooterContentRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FooterContentRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FooterContentRowChanged != null)
                {
                    this.FooterContentRowChanged(this, new CloudAccountDA.FooterContentRowChangeEvent((CloudAccountDA.FooterContentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FooterContentRowChanging != null)
                {
                    this.FooterContentRowChanging(this, new CloudAccountDA.FooterContentRowChangeEvent((CloudAccountDA.FooterContentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FooterContentRowDeleted != null)
                {
                    this.FooterContentRowDeleted(this, new CloudAccountDA.FooterContentRowChangeEvent((CloudAccountDA.FooterContentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FooterContentRowDeleting != null)
                {
                    this.FooterContentRowDeleting(this, new CloudAccountDA.FooterContentRowChangeEvent((CloudAccountDA.FooterContentRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFooterContentRow(CloudAccountDA.FooterContentRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FooterContentColumn
            {
                get
                {
                    return this.columnFooterContent;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FooterContentIDColumn
            {
                get
                {
                    return this.columnFooterContentID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FooterContentRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FooterContentRow) base.Rows[index];
                }
            }
        }
        
        public class FooterContentRow : DataRow
        {
            private CloudAccountDA.FooterContentDataTable tableFooterContent;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FooterContentRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFooterContent = (CloudAccountDA.FooterContentDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FooterContent
            {
                get
                {
                    return (string) base[this.tableFooterContent.FooterContentColumn];
                }
                set
                {
                    base[this.tableFooterContent.FooterContentColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FooterContentID
            {
                get
                {
                    return (int) base[this.tableFooterContent.FooterContentIDColumn];
                }
                set
                {
                    base[this.tableFooterContent.FooterContentIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FooterContentRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FooterContentRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FooterContentRowChangeEvent(CloudAccountDA.FooterContentRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FooterContentRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FooterContentRowChangeEventHandler(object sender, CloudAccountDA.FooterContentRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FormGridCompanyAdminMasterDataTable : TypedTableBase<CloudAccountDA.FormGridCompanyAdminMasterRow>
        {
            private DataColumn columnAddMode;
            private DataColumn columnCompanyAdminRightsID;
            private DataColumn columnDeleteMode;
            private DataColumn columnEditMode;
            private DataColumn columnFormID;
            private DataColumn columnModuleFormName;
            private DataColumn columnModuleID;
            private DataColumn columnViewMode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridCompanyAdminMasterRowChangeEventHandler FormGridCompanyAdminMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridCompanyAdminMasterRowChangeEventHandler FormGridCompanyAdminMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridCompanyAdminMasterRowChangeEventHandler FormGridCompanyAdminMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridCompanyAdminMasterRowChangeEventHandler FormGridCompanyAdminMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FormGridCompanyAdminMasterDataTable()
            {
                base.TableName = "FormGridCompanyAdminMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FormGridCompanyAdminMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FormGridCompanyAdminMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFormGridCompanyAdminMasterRow(CloudAccountDA.FormGridCompanyAdminMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormGridCompanyAdminMasterRow AddFormGridCompanyAdminMasterRow(int FormID, int ModuleID, string ModuleFormName, bool AddMode, bool EditMode, bool DeleteMode, bool ViewMode)
            {
                CloudAccountDA.FormGridCompanyAdminMasterRow row = (CloudAccountDA.FormGridCompanyAdminMasterRow) base.NewRow();
                object[] objArray2 = new object[8];
                objArray2[0] = FormID;
                objArray2[1] = ModuleID;
                objArray2[2] = ModuleFormName;
                objArray2[4] = AddMode;
                objArray2[5] = EditMode;
                objArray2[6] = DeleteMode;
                objArray2[7] = ViewMode;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.FormGridCompanyAdminMasterDataTable table = (CloudAccountDA.FormGridCompanyAdminMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FormGridCompanyAdminMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FormGridCompanyAdminMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FormGridCompanyAdminMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnFormID = new DataColumn("FormID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnModuleID = new DataColumn("ModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnModuleFormName = new DataColumn("ModuleFormName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnModuleFormName);
                this.columnCompanyAdminRightsID = new DataColumn("CompanyAdminRightsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyAdminRightsID);
                this.columnAddMode = new DataColumn("AddMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAddMode);
                this.columnEditMode = new DataColumn("EditMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEditMode);
                this.columnDeleteMode = new DataColumn("DeleteMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleteMode);
                this.columnViewMode = new DataColumn("ViewMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnViewMode);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFormID }, false));
                this.columnFormID.AllowDBNull = false;
                this.columnFormID.Unique = true;
                this.columnModuleFormName.MaxLength = 100;
                this.columnCompanyAdminRightsID.AutoIncrement = true;
                this.columnCompanyAdminRightsID.AutoIncrementSeed = -1L;
                this.columnCompanyAdminRightsID.AutoIncrementStep = -1L;
                this.columnCompanyAdminRightsID.ReadOnly = true;
                this.columnAddMode.ReadOnly = true;
                this.columnEditMode.ReadOnly = true;
                this.columnDeleteMode.ReadOnly = true;
                this.columnViewMode.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFormID = base.Columns["FormID"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnModuleFormName = base.Columns["ModuleFormName"];
                this.columnCompanyAdminRightsID = base.Columns["CompanyAdminRightsID"];
                this.columnAddMode = base.Columns["AddMode"];
                this.columnEditMode = base.Columns["EditMode"];
                this.columnDeleteMode = base.Columns["DeleteMode"];
                this.columnViewMode = base.Columns["ViewMode"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormGridCompanyAdminMasterRow NewFormGridCompanyAdminMasterRow()
            {
                return (CloudAccountDA.FormGridCompanyAdminMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FormGridCompanyAdminMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FormGridCompanyAdminMasterRowChanged != null)
                {
                    this.FormGridCompanyAdminMasterRowChanged(this, new CloudAccountDA.FormGridCompanyAdminMasterRowChangeEvent((CloudAccountDA.FormGridCompanyAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FormGridCompanyAdminMasterRowChanging != null)
                {
                    this.FormGridCompanyAdminMasterRowChanging(this, new CloudAccountDA.FormGridCompanyAdminMasterRowChangeEvent((CloudAccountDA.FormGridCompanyAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FormGridCompanyAdminMasterRowDeleted != null)
                {
                    this.FormGridCompanyAdminMasterRowDeleted(this, new CloudAccountDA.FormGridCompanyAdminMasterRowChangeEvent((CloudAccountDA.FormGridCompanyAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FormGridCompanyAdminMasterRowDeleting != null)
                {
                    this.FormGridCompanyAdminMasterRowDeleting(this, new CloudAccountDA.FormGridCompanyAdminMasterRowChangeEvent((CloudAccountDA.FormGridCompanyAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFormGridCompanyAdminMasterRow(CloudAccountDA.FormGridCompanyAdminMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AddModeColumn
            {
                get
                {
                    return this.columnAddMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyAdminRightsIDColumn
            {
                get
                {
                    return this.columnCompanyAdminRightsID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeleteModeColumn
            {
                get
                {
                    return this.columnDeleteMode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EditModeColumn
            {
                get
                {
                    return this.columnEditMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FormIDColumn
            {
                get
                {
                    return this.columnFormID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FormGridCompanyAdminMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FormGridCompanyAdminMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleFormNameColumn
            {
                get
                {
                    return this.columnModuleFormName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleIDColumn
            {
                get
                {
                    return this.columnModuleID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ViewModeColumn
            {
                get
                {
                    return this.columnViewMode;
                }
            }
        }
        
        public class FormGridCompanyAdminMasterRow : DataRow
        {
            private CloudAccountDA.FormGridCompanyAdminMasterDataTable tableFormGridCompanyAdminMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FormGridCompanyAdminMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFormGridCompanyAdminMaster = (CloudAccountDA.FormGridCompanyAdminMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAddModeNull()
            {
                return base.IsNull(this.tableFormGridCompanyAdminMaster.AddModeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyAdminRightsIDNull()
            {
                return base.IsNull(this.tableFormGridCompanyAdminMaster.CompanyAdminRightsIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeleteModeNull()
            {
                return base.IsNull(this.tableFormGridCompanyAdminMaster.DeleteModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEditModeNull()
            {
                return base.IsNull(this.tableFormGridCompanyAdminMaster.EditModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsModuleFormNameNull()
            {
                return base.IsNull(this.tableFormGridCompanyAdminMaster.ModuleFormNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModuleIDNull()
            {
                return base.IsNull(this.tableFormGridCompanyAdminMaster.ModuleIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsViewModeNull()
            {
                return base.IsNull(this.tableFormGridCompanyAdminMaster.ViewModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddModeNull()
            {
                base[this.tableFormGridCompanyAdminMaster.AddModeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyAdminRightsIDNull()
            {
                base[this.tableFormGridCompanyAdminMaster.CompanyAdminRightsIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDeleteModeNull()
            {
                base[this.tableFormGridCompanyAdminMaster.DeleteModeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEditModeNull()
            {
                base[this.tableFormGridCompanyAdminMaster.EditModeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetModuleFormNameNull()
            {
                base[this.tableFormGridCompanyAdminMaster.ModuleFormNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetModuleIDNull()
            {
                base[this.tableFormGridCompanyAdminMaster.ModuleIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetViewModeNull()
            {
                base[this.tableFormGridCompanyAdminMaster.ViewModeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool AddMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridCompanyAdminMaster.AddModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AddMode' in table 'FormGridCompanyAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.AddModeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyAdminRightsID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableFormGridCompanyAdminMaster.CompanyAdminRightsIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyAdminRightsID' in table 'FormGridCompanyAdminMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.CompanyAdminRightsIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool DeleteMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridCompanyAdminMaster.DeleteModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DeleteMode' in table 'FormGridCompanyAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.DeleteModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool EditMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridCompanyAdminMaster.EditModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EditMode' in table 'FormGridCompanyAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.EditModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FormID
            {
                get
                {
                    return (int) base[this.tableFormGridCompanyAdminMaster.FormIDColumn];
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.FormIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ModuleFormName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFormGridCompanyAdminMaster.ModuleFormNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleFormName' in table 'FormGridCompanyAdminMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.ModuleFormNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ModuleID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableFormGridCompanyAdminMaster.ModuleIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleID' in table 'FormGridCompanyAdminMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.ModuleIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ViewMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridCompanyAdminMaster.ViewModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ViewMode' in table 'FormGridCompanyAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridCompanyAdminMaster.ViewModeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FormGridCompanyAdminMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FormGridCompanyAdminMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FormGridCompanyAdminMasterRowChangeEvent(CloudAccountDA.FormGridCompanyAdminMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormGridCompanyAdminMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FormGridCompanyAdminMasterRowChangeEventHandler(object sender, CloudAccountDA.FormGridCompanyAdminMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FormGridMasterAdminMasterDataTable : TypedTableBase<CloudAccountDA.FormGridMasterAdminMasterRow>
        {
            private DataColumn columnAddMode;
            private DataColumn columnDeleteMode;
            private DataColumn columnEditMode;
            private DataColumn columnFormID;
            private DataColumn columnMasterAdminRightsID;
            private DataColumn columnModuleFormName;
            private DataColumn columnModuleID;
            private DataColumn columnViewMode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridMasterAdminMasterRowChangeEventHandler FormGridMasterAdminMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridMasterAdminMasterRowChangeEventHandler FormGridMasterAdminMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridMasterAdminMasterRowChangeEventHandler FormGridMasterAdminMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormGridMasterAdminMasterRowChangeEventHandler FormGridMasterAdminMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FormGridMasterAdminMasterDataTable()
            {
                base.TableName = "FormGridMasterAdminMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FormGridMasterAdminMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected FormGridMasterAdminMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddFormGridMasterAdminMasterRow(CloudAccountDA.FormGridMasterAdminMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormGridMasterAdminMasterRow AddFormGridMasterAdminMasterRow(int FormID, int ModuleID, string ModuleFormName, bool AddMode, bool EditMode, bool DeleteMode, bool ViewMode)
            {
                CloudAccountDA.FormGridMasterAdminMasterRow row = (CloudAccountDA.FormGridMasterAdminMasterRow) base.NewRow();
                object[] objArray2 = new object[8];
                objArray2[0] = FormID;
                objArray2[1] = ModuleID;
                objArray2[2] = ModuleFormName;
                objArray2[4] = AddMode;
                objArray2[5] = EditMode;
                objArray2[6] = DeleteMode;
                objArray2[7] = ViewMode;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.FormGridMasterAdminMasterDataTable table = (CloudAccountDA.FormGridMasterAdminMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FormGridMasterAdminMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FormGridMasterAdminMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FormGridMasterAdminMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnFormID = new DataColumn("FormID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnModuleID = new DataColumn("ModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnModuleFormName = new DataColumn("ModuleFormName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnModuleFormName);
                this.columnMasterAdminRightsID = new DataColumn("MasterAdminRightsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnMasterAdminRightsID);
                this.columnAddMode = new DataColumn("AddMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAddMode);
                this.columnEditMode = new DataColumn("EditMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEditMode);
                this.columnDeleteMode = new DataColumn("DeleteMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleteMode);
                this.columnViewMode = new DataColumn("ViewMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnViewMode);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFormID }, false));
                this.columnFormID.Unique = true;
                this.columnModuleFormName.MaxLength = 100;
                this.columnMasterAdminRightsID.AutoIncrement = true;
                this.columnMasterAdminRightsID.AutoIncrementSeed = -1L;
                this.columnMasterAdminRightsID.AutoIncrementStep = -1L;
                this.columnMasterAdminRightsID.ReadOnly = true;
                this.columnAddMode.ReadOnly = true;
                this.columnEditMode.ReadOnly = true;
                this.columnDeleteMode.ReadOnly = true;
                this.columnViewMode.ReadOnly = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnFormID = base.Columns["FormID"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnModuleFormName = base.Columns["ModuleFormName"];
                this.columnMasterAdminRightsID = base.Columns["MasterAdminRightsID"];
                this.columnAddMode = base.Columns["AddMode"];
                this.columnEditMode = base.Columns["EditMode"];
                this.columnDeleteMode = base.Columns["DeleteMode"];
                this.columnViewMode = base.Columns["ViewMode"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FormGridMasterAdminMasterRow NewFormGridMasterAdminMasterRow()
            {
                return (CloudAccountDA.FormGridMasterAdminMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FormGridMasterAdminMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FormGridMasterAdminMasterRowChanged != null)
                {
                    this.FormGridMasterAdminMasterRowChanged(this, new CloudAccountDA.FormGridMasterAdminMasterRowChangeEvent((CloudAccountDA.FormGridMasterAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FormGridMasterAdminMasterRowChanging != null)
                {
                    this.FormGridMasterAdminMasterRowChanging(this, new CloudAccountDA.FormGridMasterAdminMasterRowChangeEvent((CloudAccountDA.FormGridMasterAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FormGridMasterAdminMasterRowDeleted != null)
                {
                    this.FormGridMasterAdminMasterRowDeleted(this, new CloudAccountDA.FormGridMasterAdminMasterRowChangeEvent((CloudAccountDA.FormGridMasterAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FormGridMasterAdminMasterRowDeleting != null)
                {
                    this.FormGridMasterAdminMasterRowDeleting(this, new CloudAccountDA.FormGridMasterAdminMasterRowChangeEvent((CloudAccountDA.FormGridMasterAdminMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFormGridMasterAdminMasterRow(CloudAccountDA.FormGridMasterAdminMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn AddModeColumn
            {
                get
                {
                    return this.columnAddMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeleteModeColumn
            {
                get
                {
                    return this.columnDeleteMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EditModeColumn
            {
                get
                {
                    return this.columnEditMode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FormIDColumn
            {
                get
                {
                    return this.columnFormID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormGridMasterAdminMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FormGridMasterAdminMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MasterAdminRightsIDColumn
            {
                get
                {
                    return this.columnMasterAdminRightsID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ModuleFormNameColumn
            {
                get
                {
                    return this.columnModuleFormName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ModuleIDColumn
            {
                get
                {
                    return this.columnModuleID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ViewModeColumn
            {
                get
                {
                    return this.columnViewMode;
                }
            }
        }
        
        public class FormGridMasterAdminMasterRow : DataRow
        {
            private CloudAccountDA.FormGridMasterAdminMasterDataTable tableFormGridMasterAdminMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FormGridMasterAdminMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFormGridMasterAdminMaster = (CloudAccountDA.FormGridMasterAdminMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddModeNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.AddModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDeleteModeNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.DeleteModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEditModeNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.EditModeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFormIDNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.FormIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsMasterAdminRightsIDNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.MasterAdminRightsIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsModuleFormNameNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.ModuleFormNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModuleIDNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.ModuleIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsViewModeNull()
            {
                return base.IsNull(this.tableFormGridMasterAdminMaster.ViewModeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddModeNull()
            {
                base[this.tableFormGridMasterAdminMaster.AddModeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDeleteModeNull()
            {
                base[this.tableFormGridMasterAdminMaster.DeleteModeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEditModeNull()
            {
                base[this.tableFormGridMasterAdminMaster.EditModeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFormIDNull()
            {
                base[this.tableFormGridMasterAdminMaster.FormIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMasterAdminRightsIDNull()
            {
                base[this.tableFormGridMasterAdminMaster.MasterAdminRightsIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModuleFormNameNull()
            {
                base[this.tableFormGridMasterAdminMaster.ModuleFormNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetModuleIDNull()
            {
                base[this.tableFormGridMasterAdminMaster.ModuleIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetViewModeNull()
            {
                base[this.tableFormGridMasterAdminMaster.ViewModeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool AddMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridMasterAdminMaster.AddModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AddMode' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.AddModeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool DeleteMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridMasterAdminMaster.DeleteModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DeleteMode' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.DeleteModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool EditMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridMasterAdminMaster.EditModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EditMode' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.EditModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FormID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableFormGridMasterAdminMaster.FormIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FormID' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.FormIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MasterAdminRightsID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableFormGridMasterAdminMaster.MasterAdminRightsIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'MasterAdminRightsID' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.MasterAdminRightsIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ModuleFormName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFormGridMasterAdminMaster.ModuleFormNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleFormName' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.ModuleFormNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ModuleID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableFormGridMasterAdminMaster.ModuleIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleID' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.ModuleIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ViewMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableFormGridMasterAdminMaster.ViewModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ViewMode' in table 'FormGridMasterAdminMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableFormGridMasterAdminMaster.ViewModeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FormGridMasterAdminMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FormGridMasterAdminMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FormGridMasterAdminMasterRowChangeEvent(CloudAccountDA.FormGridMasterAdminMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FormGridMasterAdminMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FormGridMasterAdminMasterRowChangeEventHandler(object sender, CloudAccountDA.FormGridMasterAdminMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FormMasterDataTable : TypedTableBase<CloudAccountDA.FormMasterRow>
        {
            private DataColumn columnFormID;
            private DataColumn columnFormName;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormMasterRowChangeEventHandler FormMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormMasterRowChangeEventHandler FormMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormMasterRowChangeEventHandler FormMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FormMasterRowChangeEventHandler FormMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FormMasterDataTable()
            {
                base.TableName = "FormMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FormMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected FormMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFormMasterRow(CloudAccountDA.FormMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormMasterRow AddFormMasterRow(string FormName)
            {
                CloudAccountDA.FormMasterRow row = (CloudAccountDA.FormMasterRow) base.NewRow();
                object[] objArray2 = new object[2];
                objArray2[1] = FormName;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.FormMasterDataTable table = (CloudAccountDA.FormMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FormMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FormMasterRow FindByFormID(int FormID)
            {
                return (CloudAccountDA.FormMasterRow) base.Rows.Find(new object[] { FormID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FormMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FormMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnFormID = new DataColumn("FormID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnFormName = new DataColumn("FormName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFormName);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFormID }, true));
                this.columnFormID.AutoIncrement = true;
                this.columnFormID.AutoIncrementSeed = -1L;
                this.columnFormID.AutoIncrementStep = -1L;
                this.columnFormID.AllowDBNull = false;
                this.columnFormID.ReadOnly = true;
                this.columnFormID.Unique = true;
                this.columnFormName.AllowDBNull = false;
                this.columnFormName.MaxLength = 100;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFormID = base.Columns["FormID"];
                this.columnFormName = base.Columns["FormName"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormMasterRow NewFormMasterRow()
            {
                return (CloudAccountDA.FormMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FormMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FormMasterRowChanged != null)
                {
                    this.FormMasterRowChanged(this, new CloudAccountDA.FormMasterRowChangeEvent((CloudAccountDA.FormMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FormMasterRowChanging != null)
                {
                    this.FormMasterRowChanging(this, new CloudAccountDA.FormMasterRowChangeEvent((CloudAccountDA.FormMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FormMasterRowDeleted != null)
                {
                    this.FormMasterRowDeleted(this, new CloudAccountDA.FormMasterRowChangeEvent((CloudAccountDA.FormMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FormMasterRowDeleting != null)
                {
                    this.FormMasterRowDeleting(this, new CloudAccountDA.FormMasterRowChangeEvent((CloudAccountDA.FormMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFormMasterRow(CloudAccountDA.FormMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FormIDColumn
            {
                get
                {
                    return this.columnFormID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FormNameColumn
            {
                get
                {
                    return this.columnFormName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FormMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FormMasterRow) base.Rows[index];
                }
            }
        }
        
        public class FormMasterRow : DataRow
        {
            private CloudAccountDA.FormMasterDataTable tableFormMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal FormMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFormMaster = (CloudAccountDA.FormMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FormID
            {
                get
                {
                    return (int) base[this.tableFormMaster.FormIDColumn];
                }
                set
                {
                    base[this.tableFormMaster.FormIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FormName
            {
                get
                {
                    return (string) base[this.tableFormMaster.FormNameColumn];
                }
                set
                {
                    base[this.tableFormMaster.FormNameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FormMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FormMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FormMasterRowChangeEvent(CloudAccountDA.FormMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FormMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FormMasterRowChangeEventHandler(object sender, CloudAccountDA.FormMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FreePackageSettingsDataTable : TypedTableBase<CloudAccountDA.FreePackageSettingsRow>
        {
            private DataColumn columnFreePackageDays;
            private DataColumn columnFreePackageSettingID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FreePackageSettingsRowChangeEventHandler FreePackageSettingsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FreePackageSettingsRowChangeEventHandler FreePackageSettingsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FreePackageSettingsRowChangeEventHandler FreePackageSettingsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FreePackageSettingsRowChangeEventHandler FreePackageSettingsRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FreePackageSettingsDataTable()
            {
                base.TableName = "FreePackageSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FreePackageSettingsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected FreePackageSettingsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFreePackageSettingsRow(CloudAccountDA.FreePackageSettingsRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FreePackageSettingsRow AddFreePackageSettingsRow(int FreePackageDays)
            {
                CloudAccountDA.FreePackageSettingsRow row = (CloudAccountDA.FreePackageSettingsRow) base.NewRow();
                object[] objArray2 = new object[2];
                objArray2[1] = FreePackageDays;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.FreePackageSettingsDataTable table = (CloudAccountDA.FreePackageSettingsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FreePackageSettingsDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FreePackageSettingsRow FindByFreePackageSettingID(int FreePackageSettingID)
            {
                return (CloudAccountDA.FreePackageSettingsRow) base.Rows.Find(new object[] { FreePackageSettingID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FreePackageSettingsRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FreePackageSettingsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnFreePackageSettingID = new DataColumn("FreePackageSettingID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFreePackageSettingID);
                this.columnFreePackageDays = new DataColumn("FreePackageDays", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFreePackageDays);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFreePackageSettingID }, true));
                this.columnFreePackageSettingID.AutoIncrement = true;
                this.columnFreePackageSettingID.AutoIncrementSeed = -1L;
                this.columnFreePackageSettingID.AutoIncrementStep = -1L;
                this.columnFreePackageSettingID.AllowDBNull = false;
                this.columnFreePackageSettingID.ReadOnly = true;
                this.columnFreePackageSettingID.Unique = true;
                this.columnFreePackageDays.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFreePackageSettingID = base.Columns["FreePackageSettingID"];
                this.columnFreePackageDays = base.Columns["FreePackageDays"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FreePackageSettingsRow NewFreePackageSettingsRow()
            {
                return (CloudAccountDA.FreePackageSettingsRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FreePackageSettingsRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FreePackageSettingsRowChanged != null)
                {
                    this.FreePackageSettingsRowChanged(this, new CloudAccountDA.FreePackageSettingsRowChangeEvent((CloudAccountDA.FreePackageSettingsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FreePackageSettingsRowChanging != null)
                {
                    this.FreePackageSettingsRowChanging(this, new CloudAccountDA.FreePackageSettingsRowChangeEvent((CloudAccountDA.FreePackageSettingsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FreePackageSettingsRowDeleted != null)
                {
                    this.FreePackageSettingsRowDeleted(this, new CloudAccountDA.FreePackageSettingsRowChangeEvent((CloudAccountDA.FreePackageSettingsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FreePackageSettingsRowDeleting != null)
                {
                    this.FreePackageSettingsRowDeleting(this, new CloudAccountDA.FreePackageSettingsRowChangeEvent((CloudAccountDA.FreePackageSettingsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveFreePackageSettingsRow(CloudAccountDA.FreePackageSettingsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FreePackageDaysColumn
            {
                get
                {
                    return this.columnFreePackageDays;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FreePackageSettingIDColumn
            {
                get
                {
                    return this.columnFreePackageSettingID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FreePackageSettingsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FreePackageSettingsRow) base.Rows[index];
                }
            }
        }
        
        public class FreePackageSettingsRow : DataRow
        {
            private CloudAccountDA.FreePackageSettingsDataTable tableFreePackageSettings;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FreePackageSettingsRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFreePackageSettings = (CloudAccountDA.FreePackageSettingsDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FreePackageDays
            {
                get
                {
                    return (int) base[this.tableFreePackageSettings.FreePackageDaysColumn];
                }
                set
                {
                    base[this.tableFreePackageSettings.FreePackageDaysColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FreePackageSettingID
            {
                get
                {
                    return (int) base[this.tableFreePackageSettings.FreePackageSettingIDColumn];
                }
                set
                {
                    base[this.tableFreePackageSettings.FreePackageSettingIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FreePackageSettingsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FreePackageSettingsRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FreePackageSettingsRowChangeEvent(CloudAccountDA.FreePackageSettingsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FreePackageSettingsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FreePackageSettingsRowChangeEventHandler(object sender, CloudAccountDA.FreePackageSettingsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class FrequencyMasterDataTable : TypedTableBase<CloudAccountDA.FrequencyMasterRow>
        {
            private DataColumn columnFrequencyDesc;
            private DataColumn columnFrequencyID;
            private DataColumn columnFrequencyName;
            private DataColumn columnFrequencyStatus;
            private DataColumn columnNoOfDays;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FrequencyMasterRowChangeEventHandler FrequencyMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FrequencyMasterRowChangeEventHandler FrequencyMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FrequencyMasterRowChangeEventHandler FrequencyMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.FrequencyMasterRowChangeEventHandler FrequencyMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public FrequencyMasterDataTable()
            {
                base.TableName = "FrequencyMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FrequencyMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected FrequencyMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddFrequencyMasterRow(CloudAccountDA.FrequencyMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FrequencyMasterRow AddFrequencyMasterRow(string FrequencyName, int NoOfDays, string FrequencyDesc, bool FrequencyStatus)
            {
                CloudAccountDA.FrequencyMasterRow row = (CloudAccountDA.FrequencyMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = FrequencyName;
                objArray2[2] = NoOfDays;
                objArray2[3] = FrequencyDesc;
                objArray2[4] = FrequencyStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.FrequencyMasterDataTable table = (CloudAccountDA.FrequencyMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.FrequencyMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FrequencyMasterRow FindByFrequencyID(int FrequencyID)
            {
                return (CloudAccountDA.FrequencyMasterRow) base.Rows.Find(new object[] { FrequencyID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.FrequencyMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "FrequencyMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnFrequencyID = new DataColumn("FrequencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFrequencyID);
                this.columnFrequencyName = new DataColumn("FrequencyName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFrequencyName);
                this.columnNoOfDays = new DataColumn("NoOfDays", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNoOfDays);
                this.columnFrequencyDesc = new DataColumn("FrequencyDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFrequencyDesc);
                this.columnFrequencyStatus = new DataColumn("FrequencyStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnFrequencyStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnFrequencyID }, true));
                this.columnFrequencyID.AutoIncrement = true;
                this.columnFrequencyID.AutoIncrementSeed = -1L;
                this.columnFrequencyID.AutoIncrementStep = -1L;
                this.columnFrequencyID.AllowDBNull = false;
                this.columnFrequencyID.ReadOnly = true;
                this.columnFrequencyID.Unique = true;
                this.columnFrequencyName.AllowDBNull = false;
                this.columnFrequencyName.MaxLength = 50;
                this.columnNoOfDays.AllowDBNull = false;
                this.columnFrequencyDesc.MaxLength = 500;
                this.columnFrequencyStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnFrequencyID = base.Columns["FrequencyID"];
                this.columnFrequencyName = base.Columns["FrequencyName"];
                this.columnNoOfDays = base.Columns["NoOfDays"];
                this.columnFrequencyDesc = base.Columns["FrequencyDesc"];
                this.columnFrequencyStatus = base.Columns["FrequencyStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FrequencyMasterRow NewFrequencyMasterRow()
            {
                return (CloudAccountDA.FrequencyMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.FrequencyMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.FrequencyMasterRowChanged != null)
                {
                    this.FrequencyMasterRowChanged(this, new CloudAccountDA.FrequencyMasterRowChangeEvent((CloudAccountDA.FrequencyMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.FrequencyMasterRowChanging != null)
                {
                    this.FrequencyMasterRowChanging(this, new CloudAccountDA.FrequencyMasterRowChangeEvent((CloudAccountDA.FrequencyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.FrequencyMasterRowDeleted != null)
                {
                    this.FrequencyMasterRowDeleted(this, new CloudAccountDA.FrequencyMasterRowChangeEvent((CloudAccountDA.FrequencyMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.FrequencyMasterRowDeleting != null)
                {
                    this.FrequencyMasterRowDeleting(this, new CloudAccountDA.FrequencyMasterRowChangeEvent((CloudAccountDA.FrequencyMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFrequencyMasterRow(CloudAccountDA.FrequencyMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FrequencyDescColumn
            {
                get
                {
                    return this.columnFrequencyDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FrequencyIDColumn
            {
                get
                {
                    return this.columnFrequencyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FrequencyNameColumn
            {
                get
                {
                    return this.columnFrequencyName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FrequencyStatusColumn
            {
                get
                {
                    return this.columnFrequencyStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.FrequencyMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.FrequencyMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NoOfDaysColumn
            {
                get
                {
                    return this.columnNoOfDays;
                }
            }
        }
        
        public class FrequencyMasterRow : DataRow
        {
            private CloudAccountDA.FrequencyMasterDataTable tableFrequencyMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FrequencyMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableFrequencyMaster = (CloudAccountDA.FrequencyMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFrequencyDescNull()
            {
                return base.IsNull(this.tableFrequencyMaster.FrequencyDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFrequencyDescNull()
            {
                base[this.tableFrequencyMaster.FrequencyDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FrequencyDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableFrequencyMaster.FrequencyDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FrequencyDesc' in table 'FrequencyMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableFrequencyMaster.FrequencyDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FrequencyID
            {
                get
                {
                    return (int) base[this.tableFrequencyMaster.FrequencyIDColumn];
                }
                set
                {
                    base[this.tableFrequencyMaster.FrequencyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FrequencyName
            {
                get
                {
                    return (string) base[this.tableFrequencyMaster.FrequencyNameColumn];
                }
                set
                {
                    base[this.tableFrequencyMaster.FrequencyNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool FrequencyStatus
            {
                get
                {
                    return (bool) base[this.tableFrequencyMaster.FrequencyStatusColumn];
                }
                set
                {
                    base[this.tableFrequencyMaster.FrequencyStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int NoOfDays
            {
                get
                {
                    return (int) base[this.tableFrequencyMaster.NoOfDaysColumn];
                }
                set
                {
                    base[this.tableFrequencyMaster.NoOfDaysColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FrequencyMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.FrequencyMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FrequencyMasterRowChangeEvent(CloudAccountDA.FrequencyMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.FrequencyMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FrequencyMasterRowChangeEventHandler(object sender, CloudAccountDA.FrequencyMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class HomeMasterDataTable : TypedTableBase<CloudAccountDA.HomeMasterRow>
        {
            private DataColumn columnHomeContent;
            private DataColumn columnHomeDesc;
            private DataColumn columnHomeID;
            private DataColumn columnHomeStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomeMasterRowChangeEventHandler HomeMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomeMasterRowChangeEventHandler HomeMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomeMasterRowChangeEventHandler HomeMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomeMasterRowChangeEventHandler HomeMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public HomeMasterDataTable()
            {
                base.TableName = "HomeMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal HomeMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected HomeMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddHomeMasterRow(CloudAccountDA.HomeMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.HomeMasterRow AddHomeMasterRow(string HomeContent, string HomeDesc, bool HomeStatus)
            {
                CloudAccountDA.HomeMasterRow row = (CloudAccountDA.HomeMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = HomeContent;
                objArray2[2] = HomeDesc;
                objArray2[3] = HomeStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.HomeMasterDataTable table = (CloudAccountDA.HomeMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.HomeMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.HomeMasterRow FindByHomeID(int HomeID)
            {
                return (CloudAccountDA.HomeMasterRow) base.Rows.Find(new object[] { HomeID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.HomeMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "HomeMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnHomeID = new DataColumn("HomeID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnHomeID);
                this.columnHomeContent = new DataColumn("HomeContent", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHomeContent);
                this.columnHomeDesc = new DataColumn("HomeDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHomeDesc);
                this.columnHomeStatus = new DataColumn("HomeStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnHomeStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnHomeID }, true));
                this.columnHomeID.AutoIncrement = true;
                this.columnHomeID.AutoIncrementSeed = -1L;
                this.columnHomeID.AutoIncrementStep = -1L;
                this.columnHomeID.AllowDBNull = false;
                this.columnHomeID.ReadOnly = true;
                this.columnHomeID.Unique = true;
                this.columnHomeContent.MaxLength = 0x7fffffff;
                this.columnHomeDesc.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnHomeID = base.Columns["HomeID"];
                this.columnHomeContent = base.Columns["HomeContent"];
                this.columnHomeDesc = base.Columns["HomeDesc"];
                this.columnHomeStatus = base.Columns["HomeStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.HomeMasterRow NewHomeMasterRow()
            {
                return (CloudAccountDA.HomeMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.HomeMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.HomeMasterRowChanged != null)
                {
                    this.HomeMasterRowChanged(this, new CloudAccountDA.HomeMasterRowChangeEvent((CloudAccountDA.HomeMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.HomeMasterRowChanging != null)
                {
                    this.HomeMasterRowChanging(this, new CloudAccountDA.HomeMasterRowChangeEvent((CloudAccountDA.HomeMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.HomeMasterRowDeleted != null)
                {
                    this.HomeMasterRowDeleted(this, new CloudAccountDA.HomeMasterRowChangeEvent((CloudAccountDA.HomeMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.HomeMasterRowDeleting != null)
                {
                    this.HomeMasterRowDeleting(this, new CloudAccountDA.HomeMasterRowChangeEvent((CloudAccountDA.HomeMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveHomeMasterRow(CloudAccountDA.HomeMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HomeContentColumn
            {
                get
                {
                    return this.columnHomeContent;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HomeDescColumn
            {
                get
                {
                    return this.columnHomeDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HomeIDColumn
            {
                get
                {
                    return this.columnHomeID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HomeStatusColumn
            {
                get
                {
                    return this.columnHomeStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.HomeMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.HomeMasterRow) base.Rows[index];
                }
            }
        }
        
        public class HomeMasterRow : DataRow
        {
            private CloudAccountDA.HomeMasterDataTable tableHomeMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal HomeMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableHomeMaster = (CloudAccountDA.HomeMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHomeContentNull()
            {
                return base.IsNull(this.tableHomeMaster.HomeContentColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHomeDescNull()
            {
                return base.IsNull(this.tableHomeMaster.HomeDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHomeStatusNull()
            {
                return base.IsNull(this.tableHomeMaster.HomeStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHomeContentNull()
            {
                base[this.tableHomeMaster.HomeContentColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHomeDescNull()
            {
                base[this.tableHomeMaster.HomeDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHomeStatusNull()
            {
                base[this.tableHomeMaster.HomeStatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HomeContent
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableHomeMaster.HomeContentColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HomeContent' in table 'HomeMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableHomeMaster.HomeContentColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HomeDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableHomeMaster.HomeDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HomeDesc' in table 'HomeMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableHomeMaster.HomeDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int HomeID
            {
                get
                {
                    return (int) base[this.tableHomeMaster.HomeIDColumn];
                }
                set
                {
                    base[this.tableHomeMaster.HomeIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool HomeStatus
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableHomeMaster.HomeStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HomeStatus' in table 'HomeMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableHomeMaster.HomeStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class HomeMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.HomeMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public HomeMasterRowChangeEvent(CloudAccountDA.HomeMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.HomeMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void HomeMasterRowChangeEventHandler(object sender, CloudAccountDA.HomeMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class HomePageSliderDataTable : TypedTableBase<CloudAccountDA.HomePageSliderRow>
        {
            private DataColumn columnHomePageSliderID;
            private DataColumn columnSlider1;
            private DataColumn columnSlider2;
            private DataColumn columnSliderContent1;
            private DataColumn columnSliderContent2;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomePageSliderRowChangeEventHandler HomePageSliderRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomePageSliderRowChangeEventHandler HomePageSliderRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomePageSliderRowChangeEventHandler HomePageSliderRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.HomePageSliderRowChangeEventHandler HomePageSliderRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public HomePageSliderDataTable()
            {
                base.TableName = "HomePageSlider";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal HomePageSliderDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected HomePageSliderDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddHomePageSliderRow(CloudAccountDA.HomePageSliderRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.HomePageSliderRow AddHomePageSliderRow(byte[] Slider1, string SliderContent1, byte[] Slider2, string SliderContent2)
            {
                CloudAccountDA.HomePageSliderRow row = (CloudAccountDA.HomePageSliderRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = Slider1;
                objArray2[2] = SliderContent1;
                objArray2[3] = Slider2;
                objArray2[4] = SliderContent2;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.HomePageSliderDataTable table = (CloudAccountDA.HomePageSliderDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.HomePageSliderDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.HomePageSliderRow FindByHomePageSliderID(int HomePageSliderID)
            {
                return (CloudAccountDA.HomePageSliderRow) base.Rows.Find(new object[] { HomePageSliderID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.HomePageSliderRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "HomePageSliderDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnHomePageSliderID = new DataColumn("HomePageSliderID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnHomePageSliderID);
                this.columnSlider1 = new DataColumn("Slider1", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnSlider1);
                this.columnSliderContent1 = new DataColumn("SliderContent1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSliderContent1);
                this.columnSlider2 = new DataColumn("Slider2", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnSlider2);
                this.columnSliderContent2 = new DataColumn("SliderContent2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSliderContent2);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnHomePageSliderID }, true));
                this.columnHomePageSliderID.AutoIncrement = true;
                this.columnHomePageSliderID.AutoIncrementSeed = -1L;
                this.columnHomePageSliderID.AutoIncrementStep = -1L;
                this.columnHomePageSliderID.AllowDBNull = false;
                this.columnHomePageSliderID.ReadOnly = true;
                this.columnHomePageSliderID.Unique = true;
                this.columnSliderContent1.MaxLength = 0x7fffffff;
                this.columnSliderContent2.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnHomePageSliderID = base.Columns["HomePageSliderID"];
                this.columnSlider1 = base.Columns["Slider1"];
                this.columnSliderContent1 = base.Columns["SliderContent1"];
                this.columnSlider2 = base.Columns["Slider2"];
                this.columnSliderContent2 = base.Columns["SliderContent2"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.HomePageSliderRow NewHomePageSliderRow()
            {
                return (CloudAccountDA.HomePageSliderRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.HomePageSliderRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.HomePageSliderRowChanged != null)
                {
                    this.HomePageSliderRowChanged(this, new CloudAccountDA.HomePageSliderRowChangeEvent((CloudAccountDA.HomePageSliderRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.HomePageSliderRowChanging != null)
                {
                    this.HomePageSliderRowChanging(this, new CloudAccountDA.HomePageSliderRowChangeEvent((CloudAccountDA.HomePageSliderRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.HomePageSliderRowDeleted != null)
                {
                    this.HomePageSliderRowDeleted(this, new CloudAccountDA.HomePageSliderRowChangeEvent((CloudAccountDA.HomePageSliderRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.HomePageSliderRowDeleting != null)
                {
                    this.HomePageSliderRowDeleting(this, new CloudAccountDA.HomePageSliderRowChangeEvent((CloudAccountDA.HomePageSliderRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveHomePageSliderRow(CloudAccountDA.HomePageSliderRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HomePageSliderIDColumn
            {
                get
                {
                    return this.columnHomePageSliderID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.HomePageSliderRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.HomePageSliderRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Slider1Column
            {
                get
                {
                    return this.columnSlider1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Slider2Column
            {
                get
                {
                    return this.columnSlider2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SliderContent1Column
            {
                get
                {
                    return this.columnSliderContent1;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SliderContent2Column
            {
                get
                {
                    return this.columnSliderContent2;
                }
            }
        }
        
        public class HomePageSliderRow : DataRow
        {
            private CloudAccountDA.HomePageSliderDataTable tableHomePageSlider;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal HomePageSliderRow(DataRowBuilder rb) : base(rb)
            {
                this.tableHomePageSlider = (CloudAccountDA.HomePageSliderDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSlider1Null()
            {
                return base.IsNull(this.tableHomePageSlider.Slider1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSlider2Null()
            {
                return base.IsNull(this.tableHomePageSlider.Slider2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSliderContent1Null()
            {
                return base.IsNull(this.tableHomePageSlider.SliderContent1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSliderContent2Null()
            {
                return base.IsNull(this.tableHomePageSlider.SliderContent2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSlider1Null()
            {
                base[this.tableHomePageSlider.Slider1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSlider2Null()
            {
                base[this.tableHomePageSlider.Slider2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSliderContent1Null()
            {
                base[this.tableHomePageSlider.SliderContent1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSliderContent2Null()
            {
                base[this.tableHomePageSlider.SliderContent2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int HomePageSliderID
            {
                get
                {
                    return (int) base[this.tableHomePageSlider.HomePageSliderIDColumn];
                }
                set
                {
                    base[this.tableHomePageSlider.HomePageSliderIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] Slider1
            {
                get
                {
                    byte[] buffer;
                    try
                    {
                        buffer = (byte[]) base[this.tableHomePageSlider.Slider1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Slider1' in table 'HomePageSlider' is DBNull.", exception);
                    }
                    return buffer;
                }
                set
                {
                    base[this.tableHomePageSlider.Slider1Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] Slider2
            {
                get
                {
                    byte[] buffer;
                    try
                    {
                        buffer = (byte[]) base[this.tableHomePageSlider.Slider2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Slider2' in table 'HomePageSlider' is DBNull.", exception);
                    }
                    return buffer;
                }
                set
                {
                    base[this.tableHomePageSlider.Slider2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SliderContent1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableHomePageSlider.SliderContent1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SliderContent1' in table 'HomePageSlider' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableHomePageSlider.SliderContent1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SliderContent2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableHomePageSlider.SliderContent2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SliderContent2' in table 'HomePageSlider' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableHomePageSlider.SliderContent2Column] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class HomePageSliderRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.HomePageSliderRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public HomePageSliderRowChangeEvent(CloudAccountDA.HomePageSliderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.HomePageSliderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void HomePageSliderRowChangeEventHandler(object sender, CloudAccountDA.HomePageSliderRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class IndustryMasterDataTable : TypedTableBase<CloudAccountDA.IndustryMasterRow>
        {
            private DataColumn columnIndustryDesc;
            private DataColumn columnIndustryID;
            private DataColumn columnIndustryName;
            private DataColumn columnIndustryStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.IndustryMasterRowChangeEventHandler IndustryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.IndustryMasterRowChangeEventHandler IndustryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.IndustryMasterRowChangeEventHandler IndustryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.IndustryMasterRowChangeEventHandler IndustryMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public IndustryMasterDataTable()
            {
                base.TableName = "IndustryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal IndustryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected IndustryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddIndustryMasterRow(CloudAccountDA.IndustryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.IndustryMasterRow AddIndustryMasterRow(string IndustryName, string IndustryDesc, bool IndustryStatus)
            {
                CloudAccountDA.IndustryMasterRow row = (CloudAccountDA.IndustryMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = IndustryName;
                objArray2[2] = IndustryDesc;
                objArray2[3] = IndustryStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.IndustryMasterDataTable table = (CloudAccountDA.IndustryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.IndustryMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.IndustryMasterRow FindByIndustryID(int IndustryID)
            {
                return (CloudAccountDA.IndustryMasterRow) base.Rows.Find(new object[] { IndustryID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.IndustryMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "IndustryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnIndustryID = new DataColumn("IndustryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnIndustryID);
                this.columnIndustryName = new DataColumn("IndustryName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIndustryName);
                this.columnIndustryDesc = new DataColumn("IndustryDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnIndustryDesc);
                this.columnIndustryStatus = new DataColumn("IndustryStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnIndustryStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnIndustryID }, true));
                this.columnIndustryID.AutoIncrement = true;
                this.columnIndustryID.AutoIncrementSeed = -1L;
                this.columnIndustryID.AutoIncrementStep = -1L;
                this.columnIndustryID.AllowDBNull = false;
                this.columnIndustryID.ReadOnly = true;
                this.columnIndustryID.Unique = true;
                this.columnIndustryName.AllowDBNull = false;
                this.columnIndustryName.MaxLength = 100;
                this.columnIndustryDesc.MaxLength = 500;
                this.columnIndustryStatus.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnIndustryID = base.Columns["IndustryID"];
                this.columnIndustryName = base.Columns["IndustryName"];
                this.columnIndustryDesc = base.Columns["IndustryDesc"];
                this.columnIndustryStatus = base.Columns["IndustryStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.IndustryMasterRow NewIndustryMasterRow()
            {
                return (CloudAccountDA.IndustryMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.IndustryMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.IndustryMasterRowChanged != null)
                {
                    this.IndustryMasterRowChanged(this, new CloudAccountDA.IndustryMasterRowChangeEvent((CloudAccountDA.IndustryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.IndustryMasterRowChanging != null)
                {
                    this.IndustryMasterRowChanging(this, new CloudAccountDA.IndustryMasterRowChangeEvent((CloudAccountDA.IndustryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.IndustryMasterRowDeleted != null)
                {
                    this.IndustryMasterRowDeleted(this, new CloudAccountDA.IndustryMasterRowChangeEvent((CloudAccountDA.IndustryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.IndustryMasterRowDeleting != null)
                {
                    this.IndustryMasterRowDeleting(this, new CloudAccountDA.IndustryMasterRowChangeEvent((CloudAccountDA.IndustryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveIndustryMasterRow(CloudAccountDA.IndustryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IndustryDescColumn
            {
                get
                {
                    return this.columnIndustryDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn IndustryIDColumn
            {
                get
                {
                    return this.columnIndustryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IndustryNameColumn
            {
                get
                {
                    return this.columnIndustryName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn IndustryStatusColumn
            {
                get
                {
                    return this.columnIndustryStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.IndustryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.IndustryMasterRow) base.Rows[index];
                }
            }
        }
        
        public class IndustryMasterRow : DataRow
        {
            private CloudAccountDA.IndustryMasterDataTable tableIndustryMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal IndustryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableIndustryMaster = (CloudAccountDA.IndustryMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIndustryDescNull()
            {
                return base.IsNull(this.tableIndustryMaster.IndustryDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIndustryDescNull()
            {
                base[this.tableIndustryMaster.IndustryDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string IndustryDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableIndustryMaster.IndustryDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'IndustryDesc' in table 'IndustryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableIndustryMaster.IndustryDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int IndustryID
            {
                get
                {
                    return (int) base[this.tableIndustryMaster.IndustryIDColumn];
                }
                set
                {
                    base[this.tableIndustryMaster.IndustryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IndustryName
            {
                get
                {
                    return (string) base[this.tableIndustryMaster.IndustryNameColumn];
                }
                set
                {
                    base[this.tableIndustryMaster.IndustryNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IndustryStatus
            {
                get
                {
                    return (bool) base[this.tableIndustryMaster.IndustryStatusColumn];
                }
                set
                {
                    base[this.tableIndustryMaster.IndustryStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class IndustryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.IndustryMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public IndustryMasterRowChangeEvent(CloudAccountDA.IndustryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.IndustryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void IndustryMasterRowChangeEventHandler(object sender, CloudAccountDA.IndustryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class InquiryMasterDataTable : TypedTableBase<CloudAccountDA.InquiryMasterRow>
        {
            private DataColumn columnContactNo;
            private DataColumn columnEmail;
            private DataColumn columnInquiryID;
            private DataColumn columnLocation;
            private DataColumn columnMessage;
            private DataColumn columnName;
            private DataColumn columnstatus;
            private DataColumn columnSubject;
            private DataColumn columnWebsite;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InquiryMasterRowChangeEventHandler InquiryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InquiryMasterRowChangeEventHandler InquiryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InquiryMasterRowChangeEventHandler InquiryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InquiryMasterRowChangeEventHandler InquiryMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public InquiryMasterDataTable()
            {
                base.TableName = "InquiryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal InquiryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected InquiryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInquiryMasterRow(CloudAccountDA.InquiryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InquiryMasterRow AddInquiryMasterRow(string Name, string Email, string ContactNo, string Subject, string Location, string Website, string Message, bool status)
            {
                CloudAccountDA.InquiryMasterRow row = (CloudAccountDA.InquiryMasterRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = Name;
                objArray2[2] = Email;
                objArray2[3] = ContactNo;
                objArray2[4] = Subject;
                objArray2[5] = Location;
                objArray2[6] = Website;
                objArray2[7] = Message;
                objArray2[8] = status;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.InquiryMasterDataTable table = (CloudAccountDA.InquiryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.InquiryMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InquiryMasterRow FindByInquiryID(int InquiryID)
            {
                return (CloudAccountDA.InquiryMasterRow) base.Rows.Find(new object[] { InquiryID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.InquiryMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "InquiryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnInquiryID = new DataColumn("InquiryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInquiryID);
                this.columnName = new DataColumn("Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnEmail = new DataColumn("Email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnContactNo = new DataColumn("ContactNo", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnContactNo);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnLocation = new DataColumn("Location", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnWebsite = new DataColumn("Website", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnWebsite);
                this.columnMessage = new DataColumn("Message", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMessage);
                this.columnstatus = new DataColumn("status", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnstatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnInquiryID }, true));
                this.columnInquiryID.AutoIncrement = true;
                this.columnInquiryID.AutoIncrementSeed = -1L;
                this.columnInquiryID.AutoIncrementStep = -1L;
                this.columnInquiryID.AllowDBNull = false;
                this.columnInquiryID.ReadOnly = true;
                this.columnInquiryID.Unique = true;
                this.columnName.MaxLength = 50;
                this.columnEmail.MaxLength = 50;
                this.columnContactNo.MaxLength = 50;
                this.columnSubject.MaxLength = 50;
                this.columnLocation.MaxLength = 50;
                this.columnWebsite.MaxLength = 50;
                this.columnMessage.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnInquiryID = base.Columns["InquiryID"];
                this.columnName = base.Columns["Name"];
                this.columnEmail = base.Columns["Email"];
                this.columnContactNo = base.Columns["ContactNo"];
                this.columnSubject = base.Columns["Subject"];
                this.columnLocation = base.Columns["Location"];
                this.columnWebsite = base.Columns["Website"];
                this.columnMessage = base.Columns["Message"];
                this.columnstatus = base.Columns["status"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InquiryMasterRow NewInquiryMasterRow()
            {
                return (CloudAccountDA.InquiryMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.InquiryMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.InquiryMasterRowChanged != null)
                {
                    this.InquiryMasterRowChanged(this, new CloudAccountDA.InquiryMasterRowChangeEvent((CloudAccountDA.InquiryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.InquiryMasterRowChanging != null)
                {
                    this.InquiryMasterRowChanging(this, new CloudAccountDA.InquiryMasterRowChangeEvent((CloudAccountDA.InquiryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.InquiryMasterRowDeleted != null)
                {
                    this.InquiryMasterRowDeleted(this, new CloudAccountDA.InquiryMasterRowChangeEvent((CloudAccountDA.InquiryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.InquiryMasterRowDeleting != null)
                {
                    this.InquiryMasterRowDeleting(this, new CloudAccountDA.InquiryMasterRowChangeEvent((CloudAccountDA.InquiryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveInquiryMasterRow(CloudAccountDA.InquiryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ContactNoColumn
            {
                get
                {
                    return this.columnContactNo;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailColumn
            {
                get
                {
                    return this.columnEmail;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InquiryIDColumn
            {
                get
                {
                    return this.columnInquiryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InquiryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.InquiryMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LocationColumn
            {
                get
                {
                    return this.columnLocation;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MessageColumn
            {
                get
                {
                    return this.columnMessage;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn statusColumn
            {
                get
                {
                    return this.columnstatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SubjectColumn
            {
                get
                {
                    return this.columnSubject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn WebsiteColumn
            {
                get
                {
                    return this.columnWebsite;
                }
            }
        }
        
        public class InquiryMasterRow : DataRow
        {
            private CloudAccountDA.InquiryMasterDataTable tableInquiryMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InquiryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableInquiryMaster = (CloudAccountDA.InquiryMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsContactNoNull()
            {
                return base.IsNull(this.tableInquiryMaster.ContactNoColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEmailNull()
            {
                return base.IsNull(this.tableInquiryMaster.EmailColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLocationNull()
            {
                return base.IsNull(this.tableInquiryMaster.LocationColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMessageNull()
            {
                return base.IsNull(this.tableInquiryMaster.MessageColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNameNull()
            {
                return base.IsNull(this.tableInquiryMaster.NameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsstatusNull()
            {
                return base.IsNull(this.tableInquiryMaster.statusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSubjectNull()
            {
                return base.IsNull(this.tableInquiryMaster.SubjectColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWebsiteNull()
            {
                return base.IsNull(this.tableInquiryMaster.WebsiteColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetContactNoNull()
            {
                base[this.tableInquiryMaster.ContactNoColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEmailNull()
            {
                base[this.tableInquiryMaster.EmailColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetLocationNull()
            {
                base[this.tableInquiryMaster.LocationColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMessageNull()
            {
                base[this.tableInquiryMaster.MessageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull()
            {
                base[this.tableInquiryMaster.NameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetstatusNull()
            {
                base[this.tableInquiryMaster.statusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSubjectNull()
            {
                base[this.tableInquiryMaster.SubjectColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetWebsiteNull()
            {
                base[this.tableInquiryMaster.WebsiteColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ContactNo
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInquiryMaster.ContactNoColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ContactNo' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInquiryMaster.ContactNoColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Email
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInquiryMaster.EmailColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Email' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInquiryMaster.EmailColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InquiryID
            {
                get
                {
                    return (int) base[this.tableInquiryMaster.InquiryIDColumn];
                }
                set
                {
                    base[this.tableInquiryMaster.InquiryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Location
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInquiryMaster.LocationColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Location' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInquiryMaster.LocationColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Message
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInquiryMaster.MessageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Message' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInquiryMaster.MessageColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInquiryMaster.NameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Name' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInquiryMaster.NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool status
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInquiryMaster.statusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'status' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInquiryMaster.statusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Subject
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInquiryMaster.SubjectColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Subject' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInquiryMaster.SubjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Website
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInquiryMaster.WebsiteColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Website' in table 'InquiryMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInquiryMaster.WebsiteColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InquiryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.InquiryMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public InquiryMasterRowChangeEvent(CloudAccountDA.InquiryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InquiryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InquiryMasterRowChangeEventHandler(object sender, CloudAccountDA.InquiryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class InvoiceDefaultTermsMasterDataTable : TypedTableBase<CloudAccountDA.InvoiceDefaultTermsMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnDefaultTerms;
            private DataColumn columnInvoiceDefaultTermsID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEventHandler InvoiceDefaultTermsMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEventHandler InvoiceDefaultTermsMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEventHandler InvoiceDefaultTermsMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEventHandler InvoiceDefaultTermsMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InvoiceDefaultTermsMasterDataTable()
            {
                base.TableName = "InvoiceDefaultTermsMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InvoiceDefaultTermsMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected InvoiceDefaultTermsMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddInvoiceDefaultTermsMasterRow(CloudAccountDA.InvoiceDefaultTermsMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceDefaultTermsMasterRow AddInvoiceDefaultTermsMasterRow(int CompanyID, string DefaultTerms)
            {
                CloudAccountDA.InvoiceDefaultTermsMasterRow row = (CloudAccountDA.InvoiceDefaultTermsMasterRow) base.NewRow();
                object[] objArray2 = new object[3];
                objArray2[1] = CompanyID;
                objArray2[2] = DefaultTerms;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.InvoiceDefaultTermsMasterDataTable table = (CloudAccountDA.InvoiceDefaultTermsMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.InvoiceDefaultTermsMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceDefaultTermsMasterRow FindByInvoiceDefaultTermsID(int InvoiceDefaultTermsID)
            {
                return (CloudAccountDA.InvoiceDefaultTermsMasterRow) base.Rows.Find(new object[] { InvoiceDefaultTermsID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.InvoiceDefaultTermsMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "InvoiceDefaultTermsMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnInvoiceDefaultTermsID = new DataColumn("InvoiceDefaultTermsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDefaultTermsID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnDefaultTerms = new DataColumn("DefaultTerms", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDefaultTerms);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnInvoiceDefaultTermsID }, true));
                this.columnInvoiceDefaultTermsID.AutoIncrement = true;
                this.columnInvoiceDefaultTermsID.AutoIncrementSeed = -1L;
                this.columnInvoiceDefaultTermsID.AutoIncrementStep = -1L;
                this.columnInvoiceDefaultTermsID.AllowDBNull = false;
                this.columnInvoiceDefaultTermsID.ReadOnly = true;
                this.columnInvoiceDefaultTermsID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnDefaultTerms.MaxLength = 0x7fffffff;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnInvoiceDefaultTermsID = base.Columns["InvoiceDefaultTermsID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnDefaultTerms = base.Columns["DefaultTerms"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceDefaultTermsMasterRow NewInvoiceDefaultTermsMasterRow()
            {
                return (CloudAccountDA.InvoiceDefaultTermsMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.InvoiceDefaultTermsMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.InvoiceDefaultTermsMasterRowChanged != null)
                {
                    this.InvoiceDefaultTermsMasterRowChanged(this, new CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEvent((CloudAccountDA.InvoiceDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.InvoiceDefaultTermsMasterRowChanging != null)
                {
                    this.InvoiceDefaultTermsMasterRowChanging(this, new CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEvent((CloudAccountDA.InvoiceDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.InvoiceDefaultTermsMasterRowDeleted != null)
                {
                    this.InvoiceDefaultTermsMasterRowDeleted(this, new CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEvent((CloudAccountDA.InvoiceDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.InvoiceDefaultTermsMasterRowDeleting != null)
                {
                    this.InvoiceDefaultTermsMasterRowDeleting(this, new CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEvent((CloudAccountDA.InvoiceDefaultTermsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveInvoiceDefaultTermsMasterRow(CloudAccountDA.InvoiceDefaultTermsMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DefaultTermsColumn
            {
                get
                {
                    return this.columnDefaultTerms;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceDefaultTermsIDColumn
            {
                get
                {
                    return this.columnInvoiceDefaultTermsID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceDefaultTermsMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.InvoiceDefaultTermsMasterRow) base.Rows[index];
                }
            }
        }
        
        public class InvoiceDefaultTermsMasterRow : DataRow
        {
            private CloudAccountDA.InvoiceDefaultTermsMasterDataTable tableInvoiceDefaultTermsMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal InvoiceDefaultTermsMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableInvoiceDefaultTermsMaster = (CloudAccountDA.InvoiceDefaultTermsMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDefaultTermsNull()
            {
                return base.IsNull(this.tableInvoiceDefaultTermsMaster.DefaultTermsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDefaultTermsNull()
            {
                base[this.tableInvoiceDefaultTermsMaster.DefaultTermsColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableInvoiceDefaultTermsMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableInvoiceDefaultTermsMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultTerms
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceDefaultTermsMaster.DefaultTermsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DefaultTerms' in table 'InvoiceDefaultTermsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceDefaultTermsMaster.DefaultTermsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int InvoiceDefaultTermsID
            {
                get
                {
                    return (int) base[this.tableInvoiceDefaultTermsMaster.InvoiceDefaultTermsIDColumn];
                }
                set
                {
                    base[this.tableInvoiceDefaultTermsMaster.InvoiceDefaultTermsIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InvoiceDefaultTermsMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.InvoiceDefaultTermsMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InvoiceDefaultTermsMasterRowChangeEvent(CloudAccountDA.InvoiceDefaultTermsMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceDefaultTermsMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InvoiceDefaultTermsMasterRowChangeEventHandler(object sender, CloudAccountDA.InvoiceDefaultTermsMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class InvoiceDisputeHistoryDataTable : TypedTableBase<CloudAccountDA.InvoiceDisputeHistoryRow>
        {
            private DataColumn columnInvoiceDisputeCommentDate;
            private DataColumn columnInvoiceDisputeComments;
            private DataColumn columnInvoiceDisputeCreatedBy;
            private DataColumn columnInvoiceDisputeCreatedID;
            private DataColumn columnInvoiceDisputeHistoryID;
            private DataColumn columnInvoiceID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDisputeHistoryRowChangeEventHandler InvoiceDisputeHistoryRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDisputeHistoryRowChangeEventHandler InvoiceDisputeHistoryRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDisputeHistoryRowChangeEventHandler InvoiceDisputeHistoryRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceDisputeHistoryRowChangeEventHandler InvoiceDisputeHistoryRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InvoiceDisputeHistoryDataTable()
            {
                base.TableName = "InvoiceDisputeHistory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InvoiceDisputeHistoryDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected InvoiceDisputeHistoryDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInvoiceDisputeHistoryRow(CloudAccountDA.InvoiceDisputeHistoryRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceDisputeHistoryRow AddInvoiceDisputeHistoryRow(int InvoiceID, string InvoiceDisputeCreatedBy, int InvoiceDisputeCreatedID, string InvoiceDisputeComments, DateTime InvoiceDisputeCommentDate)
            {
                CloudAccountDA.InvoiceDisputeHistoryRow row = (CloudAccountDA.InvoiceDisputeHistoryRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = InvoiceID;
                objArray2[2] = InvoiceDisputeCreatedBy;
                objArray2[3] = InvoiceDisputeCreatedID;
                objArray2[4] = InvoiceDisputeComments;
                objArray2[5] = InvoiceDisputeCommentDate;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.InvoiceDisputeHistoryDataTable table = (CloudAccountDA.InvoiceDisputeHistoryDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.InvoiceDisputeHistoryDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceDisputeHistoryRow FindByInvoiceDisputeHistoryID(int InvoiceDisputeHistoryID)
            {
                return (CloudAccountDA.InvoiceDisputeHistoryRow) base.Rows.Find(new object[] { InvoiceDisputeHistoryID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.InvoiceDisputeHistoryRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "InvoiceDisputeHistoryDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnInvoiceDisputeHistoryID = new DataColumn("InvoiceDisputeHistoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDisputeHistoryID);
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceID);
                this.columnInvoiceDisputeCreatedBy = new DataColumn("InvoiceDisputeCreatedBy", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDisputeCreatedBy);
                this.columnInvoiceDisputeCreatedID = new DataColumn("InvoiceDisputeCreatedID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDisputeCreatedID);
                this.columnInvoiceDisputeComments = new DataColumn("InvoiceDisputeComments", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDisputeComments);
                this.columnInvoiceDisputeCommentDate = new DataColumn("InvoiceDisputeCommentDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDisputeCommentDate);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnInvoiceDisputeHistoryID }, true));
                this.columnInvoiceDisputeHistoryID.AutoIncrement = true;
                this.columnInvoiceDisputeHistoryID.AutoIncrementSeed = -1L;
                this.columnInvoiceDisputeHistoryID.AutoIncrementStep = -1L;
                this.columnInvoiceDisputeHistoryID.AllowDBNull = false;
                this.columnInvoiceDisputeHistoryID.ReadOnly = true;
                this.columnInvoiceDisputeHistoryID.Unique = true;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnInvoiceDisputeCreatedBy.MaxLength = 50;
                this.columnInvoiceDisputeComments.MaxLength = 500;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnInvoiceDisputeHistoryID = base.Columns["InvoiceDisputeHistoryID"];
                this.columnInvoiceID = base.Columns["InvoiceID"];
                this.columnInvoiceDisputeCreatedBy = base.Columns["InvoiceDisputeCreatedBy"];
                this.columnInvoiceDisputeCreatedID = base.Columns["InvoiceDisputeCreatedID"];
                this.columnInvoiceDisputeComments = base.Columns["InvoiceDisputeComments"];
                this.columnInvoiceDisputeCommentDate = base.Columns["InvoiceDisputeCommentDate"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceDisputeHistoryRow NewInvoiceDisputeHistoryRow()
            {
                return (CloudAccountDA.InvoiceDisputeHistoryRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.InvoiceDisputeHistoryRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.InvoiceDisputeHistoryRowChanged != null)
                {
                    this.InvoiceDisputeHistoryRowChanged(this, new CloudAccountDA.InvoiceDisputeHistoryRowChangeEvent((CloudAccountDA.InvoiceDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.InvoiceDisputeHistoryRowChanging != null)
                {
                    this.InvoiceDisputeHistoryRowChanging(this, new CloudAccountDA.InvoiceDisputeHistoryRowChangeEvent((CloudAccountDA.InvoiceDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.InvoiceDisputeHistoryRowDeleted != null)
                {
                    this.InvoiceDisputeHistoryRowDeleted(this, new CloudAccountDA.InvoiceDisputeHistoryRowChangeEvent((CloudAccountDA.InvoiceDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.InvoiceDisputeHistoryRowDeleting != null)
                {
                    this.InvoiceDisputeHistoryRowDeleting(this, new CloudAccountDA.InvoiceDisputeHistoryRowChangeEvent((CloudAccountDA.InvoiceDisputeHistoryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveInvoiceDisputeHistoryRow(CloudAccountDA.InvoiceDisputeHistoryRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceDisputeCommentDateColumn
            {
                get
                {
                    return this.columnInvoiceDisputeCommentDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceDisputeCommentsColumn
            {
                get
                {
                    return this.columnInvoiceDisputeComments;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceDisputeCreatedByColumn
            {
                get
                {
                    return this.columnInvoiceDisputeCreatedBy;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceDisputeCreatedIDColumn
            {
                get
                {
                    return this.columnInvoiceDisputeCreatedID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceDisputeHistoryIDColumn
            {
                get
                {
                    return this.columnInvoiceDisputeHistoryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceIDColumn
            {
                get
                {
                    return this.columnInvoiceID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceDisputeHistoryRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.InvoiceDisputeHistoryRow) base.Rows[index];
                }
            }
        }
        
        public class InvoiceDisputeHistoryRow : DataRow
        {
            private CloudAccountDA.InvoiceDisputeHistoryDataTable tableInvoiceDisputeHistory;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal InvoiceDisputeHistoryRow(DataRowBuilder rb) : base(rb)
            {
                this.tableInvoiceDisputeHistory = (CloudAccountDA.InvoiceDisputeHistoryDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInvoiceDisputeCommentDateNull()
            {
                return base.IsNull(this.tableInvoiceDisputeHistory.InvoiceDisputeCommentDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceDisputeCommentsNull()
            {
                return base.IsNull(this.tableInvoiceDisputeHistory.InvoiceDisputeCommentsColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInvoiceDisputeCreatedByNull()
            {
                return base.IsNull(this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedByColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInvoiceDisputeCreatedIDNull()
            {
                return base.IsNull(this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoiceDisputeCommentDateNull()
            {
                base[this.tableInvoiceDisputeHistory.InvoiceDisputeCommentDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoiceDisputeCommentsNull()
            {
                base[this.tableInvoiceDisputeHistory.InvoiceDisputeCommentsColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoiceDisputeCreatedByNull()
            {
                base[this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedByColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoiceDisputeCreatedIDNull()
            {
                base[this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime InvoiceDisputeCommentDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableInvoiceDisputeHistory.InvoiceDisputeCommentDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceDisputeCommentDate' in table 'InvoiceDisputeHistory' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableInvoiceDisputeHistory.InvoiceDisputeCommentDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string InvoiceDisputeComments
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceDisputeHistory.InvoiceDisputeCommentsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceDisputeComments' in table 'InvoiceDisputeHistory' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceDisputeHistory.InvoiceDisputeCommentsColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string InvoiceDisputeCreatedBy
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedByColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceDisputeCreatedBy' in table 'InvoiceDisputeHistory' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedByColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceDisputeCreatedID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceDisputeCreatedID' in table 'InvoiceDisputeHistory' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceDisputeHistory.InvoiceDisputeCreatedIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int InvoiceDisputeHistoryID
            {
                get
                {
                    return (int) base[this.tableInvoiceDisputeHistory.InvoiceDisputeHistoryIDColumn];
                }
                set
                {
                    base[this.tableInvoiceDisputeHistory.InvoiceDisputeHistoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceID
            {
                get
                {
                    return (int) base[this.tableInvoiceDisputeHistory.InvoiceIDColumn];
                }
                set
                {
                    base[this.tableInvoiceDisputeHistory.InvoiceIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InvoiceDisputeHistoryRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.InvoiceDisputeHistoryRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public InvoiceDisputeHistoryRowChangeEvent(CloudAccountDA.InvoiceDisputeHistoryRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceDisputeHistoryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InvoiceDisputeHistoryRowChangeEventHandler(object sender, CloudAccountDA.InvoiceDisputeHistoryRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class InvoiceItemDetailDataTable : TypedTableBase<CloudAccountDA.InvoiceItemDetailRow>
        {
            private DataColumn columnInvoiceID;
            private DataColumn columnInvoiceItemDetailID;
            private DataColumn columnItemDesc;
            private DataColumn columnItemID;
            private DataColumn columnQuantity;
            private DataColumn columnTaxID1;
            private DataColumn columnTaxID2;
            private DataColumn columnTotal;
            private DataColumn columnUnitCost;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceItemDetailRowChangeEventHandler InvoiceItemDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceItemDetailRowChangeEventHandler InvoiceItemDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceItemDetailRowChangeEventHandler InvoiceItemDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceItemDetailRowChangeEventHandler InvoiceItemDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public InvoiceItemDetailDataTable()
            {
                base.TableName = "InvoiceItemDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InvoiceItemDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected InvoiceItemDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInvoiceItemDetailRow(CloudAccountDA.InvoiceItemDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceItemDetailRow AddInvoiceItemDetailRow(int InvoiceID, int ItemID, string ItemDesc, decimal UnitCost, decimal Quantity, int TaxID1, int TaxID2, decimal Total)
            {
                CloudAccountDA.InvoiceItemDetailRow row = (CloudAccountDA.InvoiceItemDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = InvoiceID;
                objArray2[2] = ItemID;
                objArray2[3] = ItemDesc;
                objArray2[4] = UnitCost;
                objArray2[5] = Quantity;
                objArray2[6] = TaxID1;
                objArray2[7] = TaxID2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.InvoiceItemDetailDataTable table = (CloudAccountDA.InvoiceItemDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.InvoiceItemDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceItemDetailRow FindByInvoiceItemDetailID(int InvoiceItemDetailID)
            {
                return (CloudAccountDA.InvoiceItemDetailRow) base.Rows.Find(new object[] { InvoiceItemDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.InvoiceItemDetailRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "InvoiceItemDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnInvoiceItemDetailID = new DataColumn("InvoiceItemDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceItemDetailID);
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceID);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnItemDesc = new DataColumn("ItemDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnItemDesc);
                this.columnUnitCost = new DataColumn("UnitCost", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUnitCost);
                this.columnQuantity = new DataColumn("Quantity", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnTaxID1 = new DataColumn("TaxID1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaxID1);
                this.columnTaxID2 = new DataColumn("TaxID2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaxID2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnInvoiceItemDetailID }, true));
                this.columnInvoiceItemDetailID.AutoIncrement = true;
                this.columnInvoiceItemDetailID.AutoIncrementSeed = -1L;
                this.columnInvoiceItemDetailID.AutoIncrementStep = -1L;
                this.columnInvoiceItemDetailID.AllowDBNull = false;
                this.columnInvoiceItemDetailID.ReadOnly = true;
                this.columnInvoiceItemDetailID.Unique = true;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnItemID.AllowDBNull = false;
                this.columnItemDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnInvoiceItemDetailID = base.Columns["InvoiceItemDetailID"];
                this.columnInvoiceID = base.Columns["InvoiceID"];
                this.columnItemID = base.Columns["ItemID"];
                this.columnItemDesc = base.Columns["ItemDesc"];
                this.columnUnitCost = base.Columns["UnitCost"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnTaxID1 = base.Columns["TaxID1"];
                this.columnTaxID2 = base.Columns["TaxID2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceItemDetailRow NewInvoiceItemDetailRow()
            {
                return (CloudAccountDA.InvoiceItemDetailRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.InvoiceItemDetailRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.InvoiceItemDetailRowChanged != null)
                {
                    this.InvoiceItemDetailRowChanged(this, new CloudAccountDA.InvoiceItemDetailRowChangeEvent((CloudAccountDA.InvoiceItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.InvoiceItemDetailRowChanging != null)
                {
                    this.InvoiceItemDetailRowChanging(this, new CloudAccountDA.InvoiceItemDetailRowChangeEvent((CloudAccountDA.InvoiceItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.InvoiceItemDetailRowDeleted != null)
                {
                    this.InvoiceItemDetailRowDeleted(this, new CloudAccountDA.InvoiceItemDetailRowChangeEvent((CloudAccountDA.InvoiceItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.InvoiceItemDetailRowDeleting != null)
                {
                    this.InvoiceItemDetailRowDeleting(this, new CloudAccountDA.InvoiceItemDetailRowChangeEvent((CloudAccountDA.InvoiceItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveInvoiceItemDetailRow(CloudAccountDA.InvoiceItemDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceIDColumn
            {
                get
                {
                    return this.columnInvoiceID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceItemDetailIDColumn
            {
                get
                {
                    return this.columnInvoiceItemDetailID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceItemDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.InvoiceItemDetailRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ItemDescColumn
            {
                get
                {
                    return this.columnItemDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemIDColumn
            {
                get
                {
                    return this.columnItemID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaxID1Column
            {
                get
                {
                    return this.columnTaxID1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaxID2Column
            {
                get
                {
                    return this.columnTaxID2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn UnitCostColumn
            {
                get
                {
                    return this.columnUnitCost;
                }
            }
        }
        
        public class InvoiceItemDetailRow : DataRow
        {
            private CloudAccountDA.InvoiceItemDetailDataTable tableInvoiceItemDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InvoiceItemDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableInvoiceItemDetail = (CloudAccountDA.InvoiceItemDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsItemDescNull()
            {
                return base.IsNull(this.tableInvoiceItemDetail.ItemDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsQuantityNull()
            {
                return base.IsNull(this.tableInvoiceItemDetail.QuantityColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaxID1Null()
            {
                return base.IsNull(this.tableInvoiceItemDetail.TaxID1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaxID2Null()
            {
                return base.IsNull(this.tableInvoiceItemDetail.TaxID2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableInvoiceItemDetail.TotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnitCostNull()
            {
                return base.IsNull(this.tableInvoiceItemDetail.UnitCostColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetItemDescNull()
            {
                base[this.tableInvoiceItemDetail.ItemDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQuantityNull()
            {
                base[this.tableInvoiceItemDetail.QuantityColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaxID1Null()
            {
                base[this.tableInvoiceItemDetail.TaxID1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaxID2Null()
            {
                base[this.tableInvoiceItemDetail.TaxID2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTotalNull()
            {
                base[this.tableInvoiceItemDetail.TotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUnitCostNull()
            {
                base[this.tableInvoiceItemDetail.UnitCostColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceID
            {
                get
                {
                    return (int) base[this.tableInvoiceItemDetail.InvoiceIDColumn];
                }
                set
                {
                    base[this.tableInvoiceItemDetail.InvoiceIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceItemDetailID
            {
                get
                {
                    return (int) base[this.tableInvoiceItemDetail.InvoiceItemDetailIDColumn];
                }
                set
                {
                    base[this.tableInvoiceItemDetail.InvoiceItemDetailIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ItemDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceItemDetail.ItemDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ItemDesc' in table 'InvoiceItemDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceItemDetail.ItemDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ItemID
            {
                get
                {
                    return (int) base[this.tableInvoiceItemDetail.ItemIDColumn];
                }
                set
                {
                    base[this.tableInvoiceItemDetail.ItemIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Quantity
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceItemDetail.QuantityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Quantity' in table 'InvoiceItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceItemDetail.QuantityColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TaxID1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableInvoiceItemDetail.TaxID1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxID1' in table 'InvoiceItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceItemDetail.TaxID1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TaxID2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableInvoiceItemDetail.TaxID2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxID2' in table 'InvoiceItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceItemDetail.TaxID2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceItemDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'InvoiceItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceItemDetail.TotalColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal UnitCost
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceItemDetail.UnitCostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UnitCost' in table 'InvoiceItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceItemDetail.UnitCostColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InvoiceItemDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.InvoiceItemDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public InvoiceItemDetailRowChangeEvent(CloudAccountDA.InvoiceItemDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceItemDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InvoiceItemDetailRowChangeEventHandler(object sender, CloudAccountDA.InvoiceItemDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class InvoiceMasterDataTable : TypedTableBase<CloudAccountDA.InvoiceMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnConvertToExpence;
            private DataColumn columnCurrencyID;
            private DataColumn columnDeleted;
            private DataColumn columnDiscount;
            private DataColumn columnDiscountAmount;
            private DataColumn columnInvoiceDate;
            private DataColumn columnInvoiceID;
            private DataColumn columnInvoiceNumber;
            private DataColumn columnInvoiceStatus;
            private DataColumn columnInvoiceTotal;
            private DataColumn columnNotes;
            private DataColumn columnPaidToDate;
            private DataColumn columnPONumber;
            private DataColumn columnReceivedActive;
            private DataColumn columnReceivedArchived;
            private DataColumn columnReceivedDeleted;
            private DataColumn columnTerms;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceMasterRowChangeEventHandler InvoiceMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceMasterRowChangeEventHandler InvoiceMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public InvoiceMasterDataTable()
            {
                base.TableName = "InvoiceMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InvoiceMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected InvoiceMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInvoiceMasterRow(CloudAccountDA.InvoiceMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceMasterRow AddInvoiceMasterRow(int CompanyID, int ClientID, int CurrencyID, string InvoiceNumber, DateTime InvoiceDate, string PONumber, decimal Discount, decimal DiscountAmount, string Notes, string Terms, string InvoiceStatus, decimal InvoiceTotal, decimal PaidToDate, bool Active, bool Archived, bool Deleted, bool ReceivedActive, bool ReceivedArchived, bool ReceivedDeleted, bool ConvertToExpence)
            {
                CloudAccountDA.InvoiceMasterRow row = (CloudAccountDA.InvoiceMasterRow) base.NewRow();
                object[] objArray2 = new object[0x15];
                objArray2[1] = CompanyID;
                objArray2[2] = ClientID;
                objArray2[3] = CurrencyID;
                objArray2[4] = InvoiceNumber;
                objArray2[5] = InvoiceDate;
                objArray2[6] = PONumber;
                objArray2[7] = Discount;
                objArray2[8] = DiscountAmount;
                objArray2[9] = Notes;
                objArray2[10] = Terms;
                objArray2[11] = InvoiceStatus;
                objArray2[12] = InvoiceTotal;
                objArray2[13] = PaidToDate;
                objArray2[14] = Active;
                objArray2[15] = Archived;
                objArray2[0x10] = Deleted;
                objArray2[0x11] = ReceivedActive;
                objArray2[0x12] = ReceivedArchived;
                objArray2[0x13] = ReceivedDeleted;
                objArray2[20] = ConvertToExpence;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.InvoiceMasterDataTable table = (CloudAccountDA.InvoiceMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.InvoiceMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceMasterRow FindByInvoiceID(int InvoiceID)
            {
                return (CloudAccountDA.InvoiceMasterRow) base.Rows.Find(new object[] { InvoiceID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.InvoiceMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "InvoiceMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnInvoiceNumber = new DataColumn("InvoiceNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceNumber);
                this.columnInvoiceDate = new DataColumn("InvoiceDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceDate);
                this.columnPONumber = new DataColumn("PONumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPONumber);
                this.columnDiscount = new DataColumn("Discount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnDiscountAmount = new DataColumn("DiscountAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscountAmount);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnTerms = new DataColumn("Terms", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTerms);
                this.columnInvoiceStatus = new DataColumn("InvoiceStatus", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceStatus);
                this.columnInvoiceTotal = new DataColumn("InvoiceTotal", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceTotal);
                this.columnPaidToDate = new DataColumn("PaidToDate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPaidToDate);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnReceivedActive = new DataColumn("ReceivedActive", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnReceivedActive);
                this.columnReceivedArchived = new DataColumn("ReceivedArchived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnReceivedArchived);
                this.columnReceivedDeleted = new DataColumn("ReceivedDeleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnReceivedDeleted);
                this.columnConvertToExpence = new DataColumn("ConvertToExpence", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnConvertToExpence);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnInvoiceID }, true));
                this.columnInvoiceID.AutoIncrement = true;
                this.columnInvoiceID.AutoIncrementSeed = -1L;
                this.columnInvoiceID.AutoIncrementStep = -1L;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnInvoiceID.ReadOnly = true;
                this.columnInvoiceID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnInvoiceNumber.MaxLength = 50;
                this.columnPONumber.MaxLength = 50;
                this.columnNotes.MaxLength = 0x7fffffff;
                this.columnTerms.MaxLength = 0x7fffffff;
                this.columnInvoiceStatus.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnInvoiceID = base.Columns["InvoiceID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnInvoiceNumber = base.Columns["InvoiceNumber"];
                this.columnInvoiceDate = base.Columns["InvoiceDate"];
                this.columnPONumber = base.Columns["PONumber"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnDiscountAmount = base.Columns["DiscountAmount"];
                this.columnNotes = base.Columns["Notes"];
                this.columnTerms = base.Columns["Terms"];
                this.columnInvoiceStatus = base.Columns["InvoiceStatus"];
                this.columnInvoiceTotal = base.Columns["InvoiceTotal"];
                this.columnPaidToDate = base.Columns["PaidToDate"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnReceivedActive = base.Columns["ReceivedActive"];
                this.columnReceivedArchived = base.Columns["ReceivedArchived"];
                this.columnReceivedDeleted = base.Columns["ReceivedDeleted"];
                this.columnConvertToExpence = base.Columns["ConvertToExpence"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceMasterRow NewInvoiceMasterRow()
            {
                return (CloudAccountDA.InvoiceMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.InvoiceMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.InvoiceMasterRowChanged != null)
                {
                    this.InvoiceMasterRowChanged(this, new CloudAccountDA.InvoiceMasterRowChangeEvent((CloudAccountDA.InvoiceMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.InvoiceMasterRowChanging != null)
                {
                    this.InvoiceMasterRowChanging(this, new CloudAccountDA.InvoiceMasterRowChangeEvent((CloudAccountDA.InvoiceMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.InvoiceMasterRowDeleted != null)
                {
                    this.InvoiceMasterRowDeleted(this, new CloudAccountDA.InvoiceMasterRowChangeEvent((CloudAccountDA.InvoiceMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.InvoiceMasterRowDeleting != null)
                {
                    this.InvoiceMasterRowDeleting(this, new CloudAccountDA.InvoiceMasterRowChangeEvent((CloudAccountDA.InvoiceMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveInvoiceMasterRow(CloudAccountDA.InvoiceMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ConvertToExpenceColumn
            {
                get
                {
                    return this.columnConvertToExpence;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrencyIDColumn
            {
                get
                {
                    return this.columnCurrencyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DiscountAmountColumn
            {
                get
                {
                    return this.columnDiscountAmount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DiscountColumn
            {
                get
                {
                    return this.columnDiscount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceDateColumn
            {
                get
                {
                    return this.columnInvoiceDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceIDColumn
            {
                get
                {
                    return this.columnInvoiceID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceNumberColumn
            {
                get
                {
                    return this.columnInvoiceNumber;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceStatusColumn
            {
                get
                {
                    return this.columnInvoiceStatus;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceTotalColumn
            {
                get
                {
                    return this.columnInvoiceTotal;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.InvoiceMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PaidToDateColumn
            {
                get
                {
                    return this.columnPaidToDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PONumberColumn
            {
                get
                {
                    return this.columnPONumber;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ReceivedActiveColumn
            {
                get
                {
                    return this.columnReceivedActive;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ReceivedArchivedColumn
            {
                get
                {
                    return this.columnReceivedArchived;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ReceivedDeletedColumn
            {
                get
                {
                    return this.columnReceivedDeleted;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TermsColumn
            {
                get
                {
                    return this.columnTerms;
                }
            }
        }
        
        public class InvoiceMasterRow : DataRow
        {
            private CloudAccountDA.InvoiceMasterDataTable tableInvoiceMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InvoiceMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableInvoiceMaster = (CloudAccountDA.InvoiceMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableInvoiceMaster.ActiveColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableInvoiceMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsConvertToExpenceNull()
            {
                return base.IsNull(this.tableInvoiceMaster.ConvertToExpenceColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCurrencyIDNull()
            {
                return base.IsNull(this.tableInvoiceMaster.CurrencyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableInvoiceMaster.DeletedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDiscountAmountNull()
            {
                return base.IsNull(this.tableInvoiceMaster.DiscountAmountColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDiscountNull()
            {
                return base.IsNull(this.tableInvoiceMaster.DiscountColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceDateNull()
            {
                return base.IsNull(this.tableInvoiceMaster.InvoiceDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceNumberNull()
            {
                return base.IsNull(this.tableInvoiceMaster.InvoiceNumberColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceStatusNull()
            {
                return base.IsNull(this.tableInvoiceMaster.InvoiceStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceTotalNull()
            {
                return base.IsNull(this.tableInvoiceMaster.InvoiceTotalColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableInvoiceMaster.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPaidToDateNull()
            {
                return base.IsNull(this.tableInvoiceMaster.PaidToDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPONumberNull()
            {
                return base.IsNull(this.tableInvoiceMaster.PONumberColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsReceivedActiveNull()
            {
                return base.IsNull(this.tableInvoiceMaster.ReceivedActiveColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsReceivedArchivedNull()
            {
                return base.IsNull(this.tableInvoiceMaster.ReceivedArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReceivedDeletedNull()
            {
                return base.IsNull(this.tableInvoiceMaster.ReceivedDeletedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTermsNull()
            {
                return base.IsNull(this.tableInvoiceMaster.TermsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableInvoiceMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetArchivedNull()
            {
                base[this.tableInvoiceMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetConvertToExpenceNull()
            {
                base[this.tableInvoiceMaster.ConvertToExpenceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrencyIDNull()
            {
                base[this.tableInvoiceMaster.CurrencyIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeletedNull()
            {
                base[this.tableInvoiceMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDiscountAmountNull()
            {
                base[this.tableInvoiceMaster.DiscountAmountColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDiscountNull()
            {
                base[this.tableInvoiceMaster.DiscountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoiceDateNull()
            {
                base[this.tableInvoiceMaster.InvoiceDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceNumberNull()
            {
                base[this.tableInvoiceMaster.InvoiceNumberColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoiceStatusNull()
            {
                base[this.tableInvoiceMaster.InvoiceStatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceTotalNull()
            {
                base[this.tableInvoiceMaster.InvoiceTotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tableInvoiceMaster.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPaidToDateNull()
            {
                base[this.tableInvoiceMaster.PaidToDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPONumberNull()
            {
                base[this.tableInvoiceMaster.PONumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReceivedActiveNull()
            {
                base[this.tableInvoiceMaster.ReceivedActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetReceivedArchivedNull()
            {
                base[this.tableInvoiceMaster.ReceivedArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetReceivedDeletedNull()
            {
                base[this.tableInvoiceMaster.ReceivedDeletedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTermsNull()
            {
                base[this.tableInvoiceMaster.TermsColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInvoiceMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInvoiceMaster.ActiveColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInvoiceMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInvoiceMaster.ArchivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ClientID
            {
                get
                {
                    return (int) base[this.tableInvoiceMaster.ClientIDColumn];
                }
                set
                {
                    base[this.tableInvoiceMaster.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableInvoiceMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableInvoiceMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ConvertToExpence
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInvoiceMaster.ConvertToExpenceColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ConvertToExpence' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInvoiceMaster.ConvertToExpenceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CurrencyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableInvoiceMaster.CurrencyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyID' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceMaster.CurrencyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInvoiceMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInvoiceMaster.DeletedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Discount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceMaster.DiscountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Discount' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceMaster.DiscountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal DiscountAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceMaster.DiscountAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DiscountAmount' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceMaster.DiscountAmountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime InvoiceDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableInvoiceMaster.InvoiceDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceDate' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableInvoiceMaster.InvoiceDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceID
            {
                get
                {
                    return (int) base[this.tableInvoiceMaster.InvoiceIDColumn];
                }
                set
                {
                    base[this.tableInvoiceMaster.InvoiceIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string InvoiceNumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceMaster.InvoiceNumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceNumber' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceMaster.InvoiceNumberColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string InvoiceStatus
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceMaster.InvoiceStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceStatus' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceMaster.InvoiceStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal InvoiceTotal
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceMaster.InvoiceTotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'InvoiceTotal' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceMaster.InvoiceTotalColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceMaster.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PaidToDate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceMaster.PaidToDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PaidToDate' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceMaster.PaidToDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PONumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceMaster.PONumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PONumber' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceMaster.PONumberColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ReceivedActive
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInvoiceMaster.ReceivedActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ReceivedActive' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInvoiceMaster.ReceivedActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ReceivedArchived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInvoiceMaster.ReceivedArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ReceivedArchived' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInvoiceMaster.ReceivedArchivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ReceivedDeleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableInvoiceMaster.ReceivedDeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ReceivedDeleted' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableInvoiceMaster.ReceivedDeletedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Terms
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceMaster.TermsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Terms' in table 'InvoiceMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceMaster.TermsColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InvoiceMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.InvoiceMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InvoiceMasterRowChangeEvent(CloudAccountDA.InvoiceMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InvoiceMasterRowChangeEventHandler(object sender, CloudAccountDA.InvoiceMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class InvoiceTaskDetailDataTable : TypedTableBase<CloudAccountDA.InvoiceTaskDetailRow>
        {
            private DataColumn columnHours;
            private DataColumn columnInvoiceID;
            private DataColumn columnInvoiceTaskDetailID;
            private DataColumn columnRate;
            private DataColumn columnTaskDesc;
            private DataColumn columnTaskID;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTotal;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceTaskDetailRowChangeEventHandler InvoiceTaskDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceTaskDetailRowChangeEventHandler InvoiceTaskDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceTaskDetailRowChangeEventHandler InvoiceTaskDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.InvoiceTaskDetailRowChangeEventHandler InvoiceTaskDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public InvoiceTaskDetailDataTable()
            {
                base.TableName = "InvoiceTaskDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InvoiceTaskDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected InvoiceTaskDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInvoiceTaskDetailRow(CloudAccountDA.InvoiceTaskDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceTaskDetailRow AddInvoiceTaskDetailRow(int InvoiceID, int TaskID, string TaskDesc, decimal Rate, decimal Hours, int Tax1, int Tax2, decimal Total)
            {
                CloudAccountDA.InvoiceTaskDetailRow row = (CloudAccountDA.InvoiceTaskDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = InvoiceID;
                objArray2[2] = TaskID;
                objArray2[3] = TaskDesc;
                objArray2[4] = Rate;
                objArray2[5] = Hours;
                objArray2[6] = Tax1;
                objArray2[7] = Tax2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.InvoiceTaskDetailDataTable table = (CloudAccountDA.InvoiceTaskDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.InvoiceTaskDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceTaskDetailRow FindByInvoiceTaskDetailID(int InvoiceTaskDetailID)
            {
                return (CloudAccountDA.InvoiceTaskDetailRow) base.Rows.Find(new object[] { InvoiceTaskDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.InvoiceTaskDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "InvoiceTaskDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnInvoiceTaskDetailID = new DataColumn("InvoiceTaskDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceTaskDetailID);
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceID);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnTaskDesc = new DataColumn("TaskDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaskDesc);
                this.columnRate = new DataColumn("Rate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnInvoiceTaskDetailID }, true));
                this.columnInvoiceTaskDetailID.AutoIncrement = true;
                this.columnInvoiceTaskDetailID.AutoIncrementSeed = -1L;
                this.columnInvoiceTaskDetailID.AutoIncrementStep = -1L;
                this.columnInvoiceTaskDetailID.AllowDBNull = false;
                this.columnInvoiceTaskDetailID.ReadOnly = true;
                this.columnInvoiceTaskDetailID.Unique = true;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnTaskID.AllowDBNull = false;
                this.columnTaskDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnInvoiceTaskDetailID = base.Columns["InvoiceTaskDetailID"];
                this.columnInvoiceID = base.Columns["InvoiceID"];
                this.columnTaskID = base.Columns["TaskID"];
                this.columnTaskDesc = base.Columns["TaskDesc"];
                this.columnRate = base.Columns["Rate"];
                this.columnHours = base.Columns["Hours"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.InvoiceTaskDetailRow NewInvoiceTaskDetailRow()
            {
                return (CloudAccountDA.InvoiceTaskDetailRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.InvoiceTaskDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.InvoiceTaskDetailRowChanged != null)
                {
                    this.InvoiceTaskDetailRowChanged(this, new CloudAccountDA.InvoiceTaskDetailRowChangeEvent((CloudAccountDA.InvoiceTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.InvoiceTaskDetailRowChanging != null)
                {
                    this.InvoiceTaskDetailRowChanging(this, new CloudAccountDA.InvoiceTaskDetailRowChangeEvent((CloudAccountDA.InvoiceTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.InvoiceTaskDetailRowDeleted != null)
                {
                    this.InvoiceTaskDetailRowDeleted(this, new CloudAccountDA.InvoiceTaskDetailRowChangeEvent((CloudAccountDA.InvoiceTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.InvoiceTaskDetailRowDeleting != null)
                {
                    this.InvoiceTaskDetailRowDeleting(this, new CloudAccountDA.InvoiceTaskDetailRowChangeEvent((CloudAccountDA.InvoiceTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveInvoiceTaskDetailRow(CloudAccountDA.InvoiceTaskDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceIDColumn
            {
                get
                {
                    return this.columnInvoiceID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceTaskDetailIDColumn
            {
                get
                {
                    return this.columnInvoiceTaskDetailID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceTaskDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.InvoiceTaskDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RateColumn
            {
                get
                {
                    return this.columnRate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskDescColumn
            {
                get
                {
                    return this.columnTaskDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
        }
        
        public class InvoiceTaskDetailRow : DataRow
        {
            private CloudAccountDA.InvoiceTaskDetailDataTable tableInvoiceTaskDetail;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal InvoiceTaskDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableInvoiceTaskDetail = (CloudAccountDA.InvoiceTaskDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableInvoiceTaskDetail.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRateNull()
            {
                return base.IsNull(this.tableInvoiceTaskDetail.RateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaskDescNull()
            {
                return base.IsNull(this.tableInvoiceTaskDetail.TaskDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableInvoiceTaskDetail.Tax1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableInvoiceTaskDetail.Tax2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableInvoiceTaskDetail.TotalColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableInvoiceTaskDetail.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRateNull()
            {
                base[this.tableInvoiceTaskDetail.RateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaskDescNull()
            {
                base[this.tableInvoiceTaskDetail.TaskDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax1Null()
            {
                base[this.tableInvoiceTaskDetail.Tax1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax2Null()
            {
                base[this.tableInvoiceTaskDetail.Tax2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalNull()
            {
                base[this.tableInvoiceTaskDetail.TotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceTaskDetail.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'InvoiceTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.HoursColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int InvoiceID
            {
                get
                {
                    return (int) base[this.tableInvoiceTaskDetail.InvoiceIDColumn];
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.InvoiceIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceTaskDetailID
            {
                get
                {
                    return (int) base[this.tableInvoiceTaskDetail.InvoiceTaskDetailIDColumn];
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.InvoiceTaskDetailIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Rate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceTaskDetail.RateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Rate' in table 'InvoiceTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.RateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TaskDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableInvoiceTaskDetail.TaskDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaskDesc' in table 'InvoiceTaskDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.TaskDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TaskID
            {
                get
                {
                    return (int) base[this.tableInvoiceTaskDetail.TaskIDColumn];
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.TaskIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableInvoiceTaskDetail.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'InvoiceTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.Tax1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableInvoiceTaskDetail.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'InvoiceTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.Tax2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableInvoiceTaskDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'InvoiceTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableInvoiceTaskDetail.TotalColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InvoiceTaskDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.InvoiceTaskDetailRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InvoiceTaskDetailRowChangeEvent(CloudAccountDA.InvoiceTaskDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.InvoiceTaskDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InvoiceTaskDetailRowChangeEventHandler(object sender, CloudAccountDA.InvoiceTaskDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ItemMasterDataTable : TypedTableBase<CloudAccountDA.ItemMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnCompanyID;
            private DataColumn columnCurrentStock;
            private DataColumn columnDeleted;
            private DataColumn columnDescription;
            private DataColumn columnItemID;
            private DataColumn columnItemName;
            private DataColumn columnQuantity;
            private DataColumn columnTaxID1;
            private DataColumn columnTaxID2;
            private DataColumn columnTrackInventory;
            private DataColumn columnUnitCost;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ItemMasterRowChangeEventHandler ItemMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ItemMasterRowChangeEventHandler ItemMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ItemMasterRowChangeEventHandler ItemMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ItemMasterRowChangeEventHandler ItemMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ItemMasterDataTable()
            {
                base.TableName = "ItemMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ItemMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ItemMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddItemMasterRow(CloudAccountDA.ItemMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ItemMasterRow AddItemMasterRow(int CompanyID, string ItemName, string Description, decimal UnitCost, decimal Quantity, int TaxID1, int TaxID2, bool TrackInventory, decimal CurrentStock, bool Active, bool Archived, bool Deleted)
            {
                CloudAccountDA.ItemMasterRow row = (CloudAccountDA.ItemMasterRow) base.NewRow();
                object[] objArray2 = new object[13];
                objArray2[1] = CompanyID;
                objArray2[2] = ItemName;
                objArray2[3] = Description;
                objArray2[4] = UnitCost;
                objArray2[5] = Quantity;
                objArray2[6] = TaxID1;
                objArray2[7] = TaxID2;
                objArray2[8] = TrackInventory;
                objArray2[9] = CurrentStock;
                objArray2[10] = Active;
                objArray2[11] = Archived;
                objArray2[12] = Deleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ItemMasterDataTable table = (CloudAccountDA.ItemMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ItemMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ItemMasterRow FindByItemID(int ItemID)
            {
                return (CloudAccountDA.ItemMasterRow) base.Rows.Find(new object[] { ItemID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ItemMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ItemMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnItemName = new DataColumn("ItemName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitCost = new DataColumn("UnitCost", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUnitCost);
                this.columnQuantity = new DataColumn("Quantity", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnTaxID1 = new DataColumn("TaxID1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaxID1);
                this.columnTaxID2 = new DataColumn("TaxID2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaxID2);
                this.columnTrackInventory = new DataColumn("TrackInventory", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnTrackInventory);
                this.columnCurrentStock = new DataColumn("CurrentStock", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnCurrentStock);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnItemID }, true));
                this.columnItemID.AutoIncrement = true;
                this.columnItemID.AutoIncrementSeed = -1L;
                this.columnItemID.AutoIncrementStep = -1L;
                this.columnItemID.AllowDBNull = false;
                this.columnItemID.ReadOnly = true;
                this.columnItemID.Unique = true;
                this.columnItemName.MaxLength = 100;
                this.columnDescription.MaxLength = 500;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnItemID = base.Columns["ItemID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitCost = base.Columns["UnitCost"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnTaxID1 = base.Columns["TaxID1"];
                this.columnTaxID2 = base.Columns["TaxID2"];
                this.columnTrackInventory = base.Columns["TrackInventory"];
                this.columnCurrentStock = base.Columns["CurrentStock"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ItemMasterRow NewItemMasterRow()
            {
                return (CloudAccountDA.ItemMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ItemMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ItemMasterRowChanged != null)
                {
                    this.ItemMasterRowChanged(this, new CloudAccountDA.ItemMasterRowChangeEvent((CloudAccountDA.ItemMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ItemMasterRowChanging != null)
                {
                    this.ItemMasterRowChanging(this, new CloudAccountDA.ItemMasterRowChangeEvent((CloudAccountDA.ItemMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ItemMasterRowDeleted != null)
                {
                    this.ItemMasterRowDeleted(this, new CloudAccountDA.ItemMasterRowChangeEvent((CloudAccountDA.ItemMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ItemMasterRowDeleting != null)
                {
                    this.ItemMasterRowDeleting(this, new CloudAccountDA.ItemMasterRowChangeEvent((CloudAccountDA.ItemMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveItemMasterRow(CloudAccountDA.ItemMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CurrentStockColumn
            {
                get
                {
                    return this.columnCurrentStock;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ItemMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ItemMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ItemIDColumn
            {
                get
                {
                    return this.columnItemID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemNameColumn
            {
                get
                {
                    return this.columnItemName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaxID1Column
            {
                get
                {
                    return this.columnTaxID1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaxID2Column
            {
                get
                {
                    return this.columnTaxID2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TrackInventoryColumn
            {
                get
                {
                    return this.columnTrackInventory;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UnitCostColumn
            {
                get
                {
                    return this.columnUnitCost;
                }
            }
        }
        
        public class ItemMasterRow : DataRow
        {
            private CloudAccountDA.ItemMasterDataTable tableItemMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ItemMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableItemMaster = (CloudAccountDA.ItemMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableItemMaster.ActiveColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableItemMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompanyIDNull()
            {
                return base.IsNull(this.tableItemMaster.CompanyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrentStockNull()
            {
                return base.IsNull(this.tableItemMaster.CurrentStockColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableItemMaster.DeletedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDescriptionNull()
            {
                return base.IsNull(this.tableItemMaster.DescriptionColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsItemNameNull()
            {
                return base.IsNull(this.tableItemMaster.ItemNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsQuantityNull()
            {
                return base.IsNull(this.tableItemMaster.QuantityColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaxID1Null()
            {
                return base.IsNull(this.tableItemMaster.TaxID1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaxID2Null()
            {
                return base.IsNull(this.tableItemMaster.TaxID2Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTrackInventoryNull()
            {
                return base.IsNull(this.tableItemMaster.TrackInventoryColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnitCostNull()
            {
                return base.IsNull(this.tableItemMaster.UnitCostColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableItemMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetArchivedNull()
            {
                base[this.tableItemMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyIDNull()
            {
                base[this.tableItemMaster.CompanyIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCurrentStockNull()
            {
                base[this.tableItemMaster.CurrentStockColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDeletedNull()
            {
                base[this.tableItemMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDescriptionNull()
            {
                base[this.tableItemMaster.DescriptionColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetItemNameNull()
            {
                base[this.tableItemMaster.ItemNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetQuantityNull()
            {
                base[this.tableItemMaster.QuantityColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaxID1Null()
            {
                base[this.tableItemMaster.TaxID1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaxID2Null()
            {
                base[this.tableItemMaster.TaxID2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTrackInventoryNull()
            {
                base[this.tableItemMaster.TrackInventoryColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUnitCostNull()
            {
                base[this.tableItemMaster.UnitCostColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableItemMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableItemMaster.ActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableItemMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableItemMaster.ArchivedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableItemMaster.CompanyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyID' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableItemMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CurrentStock
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableItemMaster.CurrentStockColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrentStock' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableItemMaster.CurrentStockColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableItemMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableItemMaster.DeletedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Description
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableItemMaster.DescriptionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Description' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableItemMaster.DescriptionColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ItemID
            {
                get
                {
                    return (int) base[this.tableItemMaster.ItemIDColumn];
                }
                set
                {
                    base[this.tableItemMaster.ItemIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ItemName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableItemMaster.ItemNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ItemName' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableItemMaster.ItemNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Quantity
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableItemMaster.QuantityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Quantity' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableItemMaster.QuantityColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaxID1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableItemMaster.TaxID1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxID1' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableItemMaster.TaxID1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TaxID2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableItemMaster.TaxID2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxID2' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableItemMaster.TaxID2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool TrackInventory
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableItemMaster.TrackInventoryColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TrackInventory' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableItemMaster.TrackInventoryColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal UnitCost
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableItemMaster.UnitCostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UnitCost' in table 'ItemMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableItemMaster.UnitCostColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ItemMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ItemMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ItemMasterRowChangeEvent(CloudAccountDA.ItemMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ItemMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ItemMasterRowChangeEventHandler(object sender, CloudAccountDA.ItemMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class LatePaymentReminderTemplateDataTable : TypedTableBase<CloudAccountDA.LatePaymentReminderTemplateRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnDays;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnEnable;
            private DataColumn columnLatePaymentReminderID;
            private DataColumn columnReminder;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.LatePaymentReminderTemplateRowChangeEventHandler LatePaymentReminderTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.LatePaymentReminderTemplateRowChangeEventHandler LatePaymentReminderTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.LatePaymentReminderTemplateRowChangeEventHandler LatePaymentReminderTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.LatePaymentReminderTemplateRowChangeEventHandler LatePaymentReminderTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public LatePaymentReminderTemplateDataTable()
            {
                base.TableName = "LatePaymentReminderTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal LatePaymentReminderTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LatePaymentReminderTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddLatePaymentReminderTemplateRow(CloudAccountDA.LatePaymentReminderTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.LatePaymentReminderTemplateRow AddLatePaymentReminderTemplateRow(int CompanyID, int Reminder, bool Enable, int Days, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.LatePaymentReminderTemplateRow row = (CloudAccountDA.LatePaymentReminderTemplateRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CompanyID;
                objArray2[2] = Reminder;
                objArray2[3] = Enable;
                objArray2[4] = Days;
                objArray2[5] = EmailSubject;
                objArray2[6] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.LatePaymentReminderTemplateDataTable table = (CloudAccountDA.LatePaymentReminderTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.LatePaymentReminderTemplateDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.LatePaymentReminderTemplateRow FindByLatePaymentReminderID(int LatePaymentReminderID)
            {
                return (CloudAccountDA.LatePaymentReminderTemplateRow) base.Rows.Find(new object[] { LatePaymentReminderID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.LatePaymentReminderTemplateRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "LatePaymentReminderTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnLatePaymentReminderID = new DataColumn("LatePaymentReminderID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnLatePaymentReminderID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnReminder = new DataColumn("Reminder", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnReminder);
                this.columnEnable = new DataColumn("Enable", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEnable);
                this.columnDays = new DataColumn("Days", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnDays);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnLatePaymentReminderID }, true));
                this.columnLatePaymentReminderID.AutoIncrement = true;
                this.columnLatePaymentReminderID.AutoIncrementSeed = -1L;
                this.columnLatePaymentReminderID.AutoIncrementStep = -1L;
                this.columnLatePaymentReminderID.AllowDBNull = false;
                this.columnLatePaymentReminderID.ReadOnly = true;
                this.columnLatePaymentReminderID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnReminder.AllowDBNull = false;
                this.columnEnable.AllowDBNull = false;
                this.columnDays.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnLatePaymentReminderID = base.Columns["LatePaymentReminderID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnReminder = base.Columns["Reminder"];
                this.columnEnable = base.Columns["Enable"];
                this.columnDays = base.Columns["Days"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.LatePaymentReminderTemplateRow NewLatePaymentReminderTemplateRow()
            {
                return (CloudAccountDA.LatePaymentReminderTemplateRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.LatePaymentReminderTemplateRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.LatePaymentReminderTemplateRowChanged != null)
                {
                    this.LatePaymentReminderTemplateRowChanged(this, new CloudAccountDA.LatePaymentReminderTemplateRowChangeEvent((CloudAccountDA.LatePaymentReminderTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.LatePaymentReminderTemplateRowChanging != null)
                {
                    this.LatePaymentReminderTemplateRowChanging(this, new CloudAccountDA.LatePaymentReminderTemplateRowChangeEvent((CloudAccountDA.LatePaymentReminderTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.LatePaymentReminderTemplateRowDeleted != null)
                {
                    this.LatePaymentReminderTemplateRowDeleted(this, new CloudAccountDA.LatePaymentReminderTemplateRowChangeEvent((CloudAccountDA.LatePaymentReminderTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.LatePaymentReminderTemplateRowDeleting != null)
                {
                    this.LatePaymentReminderTemplateRowDeleting(this, new CloudAccountDA.LatePaymentReminderTemplateRowChangeEvent((CloudAccountDA.LatePaymentReminderTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveLatePaymentReminderTemplateRow(CloudAccountDA.LatePaymentReminderTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DaysColumn
            {
                get
                {
                    return this.columnDays;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EnableColumn
            {
                get
                {
                    return this.columnEnable;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.LatePaymentReminderTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.LatePaymentReminderTemplateRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn LatePaymentReminderIDColumn
            {
                get
                {
                    return this.columnLatePaymentReminderID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ReminderColumn
            {
                get
                {
                    return this.columnReminder;
                }
            }
        }
        
        public class LatePaymentReminderTemplateRow : DataRow
        {
            private CloudAccountDA.LatePaymentReminderTemplateDataTable tableLatePaymentReminderTemplate;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal LatePaymentReminderTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableLatePaymentReminderTemplate = (CloudAccountDA.LatePaymentReminderTemplateDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableLatePaymentReminderTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableLatePaymentReminderTemplate.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Days
            {
                get
                {
                    return (int) base[this.tableLatePaymentReminderTemplate.DaysColumn];
                }
                set
                {
                    base[this.tableLatePaymentReminderTemplate.DaysColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableLatePaymentReminderTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableLatePaymentReminderTemplate.EmailBodyColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableLatePaymentReminderTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableLatePaymentReminderTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Enable
            {
                get
                {
                    return (bool) base[this.tableLatePaymentReminderTemplate.EnableColumn];
                }
                set
                {
                    base[this.tableLatePaymentReminderTemplate.EnableColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int LatePaymentReminderID
            {
                get
                {
                    return (int) base[this.tableLatePaymentReminderTemplate.LatePaymentReminderIDColumn];
                }
                set
                {
                    base[this.tableLatePaymentReminderTemplate.LatePaymentReminderIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Reminder
            {
                get
                {
                    return (int) base[this.tableLatePaymentReminderTemplate.ReminderColumn];
                }
                set
                {
                    base[this.tableLatePaymentReminderTemplate.ReminderColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LatePaymentReminderTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.LatePaymentReminderTemplateRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LatePaymentReminderTemplateRowChangeEvent(CloudAccountDA.LatePaymentReminderTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.LatePaymentReminderTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LatePaymentReminderTemplateRowChangeEventHandler(object sender, CloudAccountDA.LatePaymentReminderTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class MasterAdminLoginMasterDataTable : TypedTableBase<CloudAccountDA.MasterAdminLoginMasterRow>
        {
            private DataColumn columnEmailID;
            private DataColumn columnFirstName;
            private DataColumn columnLastName;
            private DataColumn columnMasterAdminUserID;
            private DataColumn columnUserName;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminLoginMasterRowChangeEventHandler MasterAdminLoginMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminLoginMasterRowChangeEventHandler MasterAdminLoginMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminLoginMasterRowChangeEventHandler MasterAdminLoginMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminLoginMasterRowChangeEventHandler MasterAdminLoginMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public MasterAdminLoginMasterDataTable()
            {
                base.TableName = "MasterAdminLoginMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal MasterAdminLoginMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected MasterAdminLoginMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddMasterAdminLoginMasterRow(CloudAccountDA.MasterAdminLoginMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminLoginMasterRow AddMasterAdminLoginMasterRow(string FirstName, string LastName, string UserName, string EmailID)
            {
                CloudAccountDA.MasterAdminLoginMasterRow row = (CloudAccountDA.MasterAdminLoginMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = FirstName;
                objArray2[2] = LastName;
                objArray2[3] = UserName;
                objArray2[4] = EmailID;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.MasterAdminLoginMasterDataTable table = (CloudAccountDA.MasterAdminLoginMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.MasterAdminLoginMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminLoginMasterRow FindByMasterAdminUserID(int MasterAdminUserID)
            {
                return (CloudAccountDA.MasterAdminLoginMasterRow) base.Rows.Find(new object[] { MasterAdminUserID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.MasterAdminLoginMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "MasterAdminLoginMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnMasterAdminUserID = new DataColumn("MasterAdminUserID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnMasterAdminUserID);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnUserName = new DataColumn("UserName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnEmailID = new DataColumn("EmailID", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailID);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnMasterAdminUserID }, true));
                this.columnMasterAdminUserID.AutoIncrement = true;
                this.columnMasterAdminUserID.AutoIncrementSeed = -1L;
                this.columnMasterAdminUserID.AutoIncrementStep = -1L;
                this.columnMasterAdminUserID.AllowDBNull = false;
                this.columnMasterAdminUserID.ReadOnly = true;
                this.columnMasterAdminUserID.Unique = true;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnUserName.MaxLength = 50;
                this.columnEmailID.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnMasterAdminUserID = base.Columns["MasterAdminUserID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnUserName = base.Columns["UserName"];
                this.columnEmailID = base.Columns["EmailID"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminLoginMasterRow NewMasterAdminLoginMasterRow()
            {
                return (CloudAccountDA.MasterAdminLoginMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.MasterAdminLoginMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.MasterAdminLoginMasterRowChanged != null)
                {
                    this.MasterAdminLoginMasterRowChanged(this, new CloudAccountDA.MasterAdminLoginMasterRowChangeEvent((CloudAccountDA.MasterAdminLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.MasterAdminLoginMasterRowChanging != null)
                {
                    this.MasterAdminLoginMasterRowChanging(this, new CloudAccountDA.MasterAdminLoginMasterRowChangeEvent((CloudAccountDA.MasterAdminLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.MasterAdminLoginMasterRowDeleted != null)
                {
                    this.MasterAdminLoginMasterRowDeleted(this, new CloudAccountDA.MasterAdminLoginMasterRowChangeEvent((CloudAccountDA.MasterAdminLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.MasterAdminLoginMasterRowDeleting != null)
                {
                    this.MasterAdminLoginMasterRowDeleting(this, new CloudAccountDA.MasterAdminLoginMasterRowChangeEvent((CloudAccountDA.MasterAdminLoginMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveMasterAdminLoginMasterRow(CloudAccountDA.MasterAdminLoginMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailIDColumn
            {
                get
                {
                    return this.columnEmailID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FirstNameColumn
            {
                get
                {
                    return this.columnFirstName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.MasterAdminLoginMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.MasterAdminLoginMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn LastNameColumn
            {
                get
                {
                    return this.columnLastName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MasterAdminUserIDColumn
            {
                get
                {
                    return this.columnMasterAdminUserID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn UserNameColumn
            {
                get
                {
                    return this.columnUserName;
                }
            }
        }
        
        public class MasterAdminLoginMasterRow : DataRow
        {
            private CloudAccountDA.MasterAdminLoginMasterDataTable tableMasterAdminLoginMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal MasterAdminLoginMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableMasterAdminLoginMaster = (CloudAccountDA.MasterAdminLoginMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEmailIDNull()
            {
                return base.IsNull(this.tableMasterAdminLoginMaster.EmailIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFirstNameNull()
            {
                return base.IsNull(this.tableMasterAdminLoginMaster.FirstNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastNameNull()
            {
                return base.IsNull(this.tableMasterAdminLoginMaster.LastNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUserNameNull()
            {
                return base.IsNull(this.tableMasterAdminLoginMaster.UserNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEmailIDNull()
            {
                base[this.tableMasterAdminLoginMaster.EmailIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFirstNameNull()
            {
                base[this.tableMasterAdminLoginMaster.FirstNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetLastNameNull()
            {
                base[this.tableMasterAdminLoginMaster.LastNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUserNameNull()
            {
                base[this.tableMasterAdminLoginMaster.UserNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailID
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMasterAdminLoginMaster.EmailIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EmailID' in table 'MasterAdminLoginMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMasterAdminLoginMaster.EmailIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FirstName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMasterAdminLoginMaster.FirstNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FirstName' in table 'MasterAdminLoginMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMasterAdminLoginMaster.FirstNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string LastName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMasterAdminLoginMaster.LastNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LastName' in table 'MasterAdminLoginMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMasterAdminLoginMaster.LastNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MasterAdminUserID
            {
                get
                {
                    return (int) base[this.tableMasterAdminLoginMaster.MasterAdminUserIDColumn];
                }
                set
                {
                    base[this.tableMasterAdminLoginMaster.MasterAdminUserIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string UserName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMasterAdminLoginMaster.UserNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UserName' in table 'MasterAdminLoginMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMasterAdminLoginMaster.UserNameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class MasterAdminLoginMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.MasterAdminLoginMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MasterAdminLoginMasterRowChangeEvent(CloudAccountDA.MasterAdminLoginMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminLoginMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void MasterAdminLoginMasterRowChangeEventHandler(object sender, CloudAccountDA.MasterAdminLoginMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class MasterAdminRightsMasterDataTable : TypedTableBase<CloudAccountDA.MasterAdminRightsMasterRow>
        {
            private DataColumn columnAddMode;
            private DataColumn columnDeleteMode;
            private DataColumn columnEditMode;
            private DataColumn columnFormID;
            private DataColumn columnMasterAdminID;
            private DataColumn columnMasterAdminRightsID;
            private DataColumn columnModuleFormName;
            private DataColumn columnModuleID;
            private DataColumn columnViewMode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminRightsMasterRowChangeEventHandler MasterAdminRightsMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminRightsMasterRowChangeEventHandler MasterAdminRightsMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminRightsMasterRowChangeEventHandler MasterAdminRightsMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MasterAdminRightsMasterRowChangeEventHandler MasterAdminRightsMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public MasterAdminRightsMasterDataTable()
            {
                base.TableName = "MasterAdminRightsMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal MasterAdminRightsMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected MasterAdminRightsMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddMasterAdminRightsMasterRow(CloudAccountDA.MasterAdminRightsMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminRightsMasterRow AddMasterAdminRightsMasterRow(int MasterAdminID, int ModuleID, int FormID, string ModuleFormName, bool AddMode, bool EditMode, bool DeleteMode, bool ViewMode)
            {
                CloudAccountDA.MasterAdminRightsMasterRow row = (CloudAccountDA.MasterAdminRightsMasterRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = MasterAdminID;
                objArray2[2] = ModuleID;
                objArray2[3] = FormID;
                objArray2[4] = ModuleFormName;
                objArray2[5] = AddMode;
                objArray2[6] = EditMode;
                objArray2[7] = DeleteMode;
                objArray2[8] = ViewMode;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.MasterAdminRightsMasterDataTable table = (CloudAccountDA.MasterAdminRightsMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.MasterAdminRightsMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminRightsMasterRow FindByMasterAdminRightsID(int MasterAdminRightsID)
            {
                return (CloudAccountDA.MasterAdminRightsMasterRow) base.Rows.Find(new object[] { MasterAdminRightsID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.MasterAdminRightsMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "MasterAdminRightsMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnMasterAdminRightsID = new DataColumn("MasterAdminRightsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnMasterAdminRightsID);
                this.columnMasterAdminID = new DataColumn("MasterAdminID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnMasterAdminID);
                this.columnModuleID = new DataColumn("ModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnFormID = new DataColumn("FormID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnModuleFormName = new DataColumn("ModuleFormName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnModuleFormName);
                this.columnAddMode = new DataColumn("AddMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnAddMode);
                this.columnEditMode = new DataColumn("EditMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEditMode);
                this.columnDeleteMode = new DataColumn("DeleteMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleteMode);
                this.columnViewMode = new DataColumn("ViewMode", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnViewMode);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnMasterAdminRightsID }, true));
                this.columnMasterAdminRightsID.AutoIncrement = true;
                this.columnMasterAdminRightsID.AutoIncrementSeed = -1L;
                this.columnMasterAdminRightsID.AutoIncrementStep = -1L;
                this.columnMasterAdminRightsID.AllowDBNull = false;
                this.columnMasterAdminRightsID.ReadOnly = true;
                this.columnMasterAdminRightsID.Unique = true;
                this.columnModuleFormName.MaxLength = 100;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnMasterAdminRightsID = base.Columns["MasterAdminRightsID"];
                this.columnMasterAdminID = base.Columns["MasterAdminID"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnFormID = base.Columns["FormID"];
                this.columnModuleFormName = base.Columns["ModuleFormName"];
                this.columnAddMode = base.Columns["AddMode"];
                this.columnEditMode = base.Columns["EditMode"];
                this.columnDeleteMode = base.Columns["DeleteMode"];
                this.columnViewMode = base.Columns["ViewMode"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminRightsMasterRow NewMasterAdminRightsMasterRow()
            {
                return (CloudAccountDA.MasterAdminRightsMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.MasterAdminRightsMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.MasterAdminRightsMasterRowChanged != null)
                {
                    this.MasterAdminRightsMasterRowChanged(this, new CloudAccountDA.MasterAdminRightsMasterRowChangeEvent((CloudAccountDA.MasterAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.MasterAdminRightsMasterRowChanging != null)
                {
                    this.MasterAdminRightsMasterRowChanging(this, new CloudAccountDA.MasterAdminRightsMasterRowChangeEvent((CloudAccountDA.MasterAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.MasterAdminRightsMasterRowDeleted != null)
                {
                    this.MasterAdminRightsMasterRowDeleted(this, new CloudAccountDA.MasterAdminRightsMasterRowChangeEvent((CloudAccountDA.MasterAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.MasterAdminRightsMasterRowDeleting != null)
                {
                    this.MasterAdminRightsMasterRowDeleting(this, new CloudAccountDA.MasterAdminRightsMasterRowChangeEvent((CloudAccountDA.MasterAdminRightsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveMasterAdminRightsMasterRow(CloudAccountDA.MasterAdminRightsMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AddModeColumn
            {
                get
                {
                    return this.columnAddMode;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeleteModeColumn
            {
                get
                {
                    return this.columnDeleteMode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EditModeColumn
            {
                get
                {
                    return this.columnEditMode;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FormIDColumn
            {
                get
                {
                    return this.columnFormID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MasterAdminRightsMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.MasterAdminRightsMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MasterAdminIDColumn
            {
                get
                {
                    return this.columnMasterAdminID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MasterAdminRightsIDColumn
            {
                get
                {
                    return this.columnMasterAdminRightsID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ModuleFormNameColumn
            {
                get
                {
                    return this.columnModuleFormName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleIDColumn
            {
                get
                {
                    return this.columnModuleID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ViewModeColumn
            {
                get
                {
                    return this.columnViewMode;
                }
            }
        }
        
        public class MasterAdminRightsMasterRow : DataRow
        {
            private CloudAccountDA.MasterAdminRightsMasterDataTable tableMasterAdminRightsMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal MasterAdminRightsMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableMasterAdminRightsMaster = (CloudAccountDA.MasterAdminRightsMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddModeNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.AddModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDeleteModeNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.DeleteModeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEditModeNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.EditModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFormIDNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.FormIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMasterAdminIDNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.MasterAdminIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModuleFormNameNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.ModuleFormNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsModuleIDNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.ModuleIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsViewModeNull()
            {
                return base.IsNull(this.tableMasterAdminRightsMaster.ViewModeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddModeNull()
            {
                base[this.tableMasterAdminRightsMaster.AddModeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeleteModeNull()
            {
                base[this.tableMasterAdminRightsMaster.DeleteModeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEditModeNull()
            {
                base[this.tableMasterAdminRightsMaster.EditModeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetFormIDNull()
            {
                base[this.tableMasterAdminRightsMaster.FormIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetMasterAdminIDNull()
            {
                base[this.tableMasterAdminRightsMaster.MasterAdminIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModuleFormNameNull()
            {
                base[this.tableMasterAdminRightsMaster.ModuleFormNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModuleIDNull()
            {
                base[this.tableMasterAdminRightsMaster.ModuleIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetViewModeNull()
            {
                base[this.tableMasterAdminRightsMaster.ViewModeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool AddMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMasterAdminRightsMaster.AddModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'AddMode' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.AddModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool DeleteMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMasterAdminRightsMaster.DeleteModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DeleteMode' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.DeleteModeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool EditMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMasterAdminRightsMaster.EditModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EditMode' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.EditModeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FormID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableMasterAdminRightsMaster.FormIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FormID' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.FormIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int MasterAdminID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableMasterAdminRightsMaster.MasterAdminIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'MasterAdminID' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.MasterAdminIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MasterAdminRightsID
            {
                get
                {
                    return (int) base[this.tableMasterAdminRightsMaster.MasterAdminRightsIDColumn];
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.MasterAdminRightsIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ModuleFormName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMasterAdminRightsMaster.ModuleFormNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleFormName' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.ModuleFormNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ModuleID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableMasterAdminRightsMaster.ModuleIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleID' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.ModuleIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ViewMode
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMasterAdminRightsMaster.ViewModeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ViewMode' in table 'MasterAdminRightsMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMasterAdminRightsMaster.ViewModeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class MasterAdminRightsMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.MasterAdminRightsMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public MasterAdminRightsMasterRowChangeEvent(CloudAccountDA.MasterAdminRightsMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.MasterAdminRightsMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void MasterAdminRightsMasterRowChangeEventHandler(object sender, CloudAccountDA.MasterAdminRightsMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class MiscellaneousMasterDataTable : TypedTableBase<CloudAccountDA.MiscellaneousMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnCreditAutomatically;
            private DataColumn columnDateFormat;
            private DataColumn columnDefaultClientAccess;
            private DataColumn columnDefaultColumnHeadings;
            private DataColumn columnDefaultStaffAccess;
            private DataColumn columnDirectLinks;
            private DataColumn columnDoyinGoBranding;
            private DataColumn columnLinesPerPage;
            private DataColumn columnMiscellaneousID;
            private DataColumn columnRecurringInvoices;
            private DataColumn columnRequestReviews;
            private DataColumn columnSupportTimeIncrementHours;
            private DataColumn columnSupportTimeIncrementMinute;
            private DataColumn columnTextBelowYourLogo;
            private DataColumn columnWelcomeMessagesClient;
            private DataColumn columnWelcomeMessagesStaff;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MiscellaneousMasterRowChangeEventHandler MiscellaneousMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MiscellaneousMasterRowChangeEventHandler MiscellaneousMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MiscellaneousMasterRowChangeEventHandler MiscellaneousMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.MiscellaneousMasterRowChangeEventHandler MiscellaneousMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MiscellaneousMasterDataTable()
            {
                base.TableName = "MiscellaneousMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MiscellaneousMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected MiscellaneousMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddMiscellaneousMasterRow(CloudAccountDA.MiscellaneousMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MiscellaneousMasterRow AddMiscellaneousMasterRow(int CompanyID, int LinesPerPage, string DateFormat, bool DirectLinks, bool DoyinGoBranding, bool RequestReviews, string TextBelowYourLogo, bool RecurringInvoices, bool CreditAutomatically, string DefaultColumnHeadings, string WelcomeMessagesClient, string WelcomeMessagesStaff, string DefaultClientAccess, string DefaultStaffAccess, int SupportTimeIncrementMinute, int SupportTimeIncrementHours)
            {
                CloudAccountDA.MiscellaneousMasterRow row = (CloudAccountDA.MiscellaneousMasterRow) base.NewRow();
                object[] objArray2 = new object[0x11];
                objArray2[1] = CompanyID;
                objArray2[2] = LinesPerPage;
                objArray2[3] = DateFormat;
                objArray2[4] = DirectLinks;
                objArray2[5] = DoyinGoBranding;
                objArray2[6] = RequestReviews;
                objArray2[7] = TextBelowYourLogo;
                objArray2[8] = RecurringInvoices;
                objArray2[9] = CreditAutomatically;
                objArray2[10] = DefaultColumnHeadings;
                objArray2[11] = WelcomeMessagesClient;
                objArray2[12] = WelcomeMessagesStaff;
                objArray2[13] = DefaultClientAccess;
                objArray2[14] = DefaultStaffAccess;
                objArray2[15] = SupportTimeIncrementMinute;
                objArray2[0x10] = SupportTimeIncrementHours;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.MiscellaneousMasterDataTable table = (CloudAccountDA.MiscellaneousMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.MiscellaneousMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MiscellaneousMasterRow FindByMiscellaneousID(int MiscellaneousID)
            {
                return (CloudAccountDA.MiscellaneousMasterRow) base.Rows.Find(new object[] { MiscellaneousID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.MiscellaneousMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "MiscellaneousMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnMiscellaneousID = new DataColumn("MiscellaneousID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnMiscellaneousID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnLinesPerPage = new DataColumn("LinesPerPage", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnLinesPerPage);
                this.columnDateFormat = new DataColumn("DateFormat", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDateFormat);
                this.columnDirectLinks = new DataColumn("DirectLinks", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDirectLinks);
                this.columnDoyinGoBranding = new DataColumn("DoyinGoBranding", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDoyinGoBranding);
                this.columnRequestReviews = new DataColumn("RequestReviews", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnRequestReviews);
                this.columnTextBelowYourLogo = new DataColumn("TextBelowYourLogo", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTextBelowYourLogo);
                this.columnRecurringInvoices = new DataColumn("RecurringInvoices", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringInvoices);
                this.columnCreditAutomatically = new DataColumn("CreditAutomatically", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCreditAutomatically);
                this.columnDefaultColumnHeadings = new DataColumn("DefaultColumnHeadings", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDefaultColumnHeadings);
                this.columnWelcomeMessagesClient = new DataColumn("WelcomeMessagesClient", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnWelcomeMessagesClient);
                this.columnWelcomeMessagesStaff = new DataColumn("WelcomeMessagesStaff", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnWelcomeMessagesStaff);
                this.columnDefaultClientAccess = new DataColumn("DefaultClientAccess", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDefaultClientAccess);
                this.columnDefaultStaffAccess = new DataColumn("DefaultStaffAccess", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDefaultStaffAccess);
                this.columnSupportTimeIncrementMinute = new DataColumn("SupportTimeIncrementMinute", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSupportTimeIncrementMinute);
                this.columnSupportTimeIncrementHours = new DataColumn("SupportTimeIncrementHours", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSupportTimeIncrementHours);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnMiscellaneousID }, true));
                this.columnMiscellaneousID.AutoIncrement = true;
                this.columnMiscellaneousID.AutoIncrementSeed = -1L;
                this.columnMiscellaneousID.AutoIncrementStep = -1L;
                this.columnMiscellaneousID.AllowDBNull = false;
                this.columnMiscellaneousID.ReadOnly = true;
                this.columnMiscellaneousID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnDateFormat.MaxLength = 20;
                this.columnTextBelowYourLogo.MaxLength = 50;
                this.columnDefaultColumnHeadings.MaxLength = 20;
                this.columnWelcomeMessagesClient.MaxLength = 0x7fffffff;
                this.columnWelcomeMessagesStaff.MaxLength = 0x7fffffff;
                this.columnDefaultClientAccess.MaxLength = 50;
                this.columnDefaultStaffAccess.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnMiscellaneousID = base.Columns["MiscellaneousID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnLinesPerPage = base.Columns["LinesPerPage"];
                this.columnDateFormat = base.Columns["DateFormat"];
                this.columnDirectLinks = base.Columns["DirectLinks"];
                this.columnDoyinGoBranding = base.Columns["DoyinGoBranding"];
                this.columnRequestReviews = base.Columns["RequestReviews"];
                this.columnTextBelowYourLogo = base.Columns["TextBelowYourLogo"];
                this.columnRecurringInvoices = base.Columns["RecurringInvoices"];
                this.columnCreditAutomatically = base.Columns["CreditAutomatically"];
                this.columnDefaultColumnHeadings = base.Columns["DefaultColumnHeadings"];
                this.columnWelcomeMessagesClient = base.Columns["WelcomeMessagesClient"];
                this.columnWelcomeMessagesStaff = base.Columns["WelcomeMessagesStaff"];
                this.columnDefaultClientAccess = base.Columns["DefaultClientAccess"];
                this.columnDefaultStaffAccess = base.Columns["DefaultStaffAccess"];
                this.columnSupportTimeIncrementMinute = base.Columns["SupportTimeIncrementMinute"];
                this.columnSupportTimeIncrementHours = base.Columns["SupportTimeIncrementHours"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MiscellaneousMasterRow NewMiscellaneousMasterRow()
            {
                return (CloudAccountDA.MiscellaneousMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.MiscellaneousMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.MiscellaneousMasterRowChanged != null)
                {
                    this.MiscellaneousMasterRowChanged(this, new CloudAccountDA.MiscellaneousMasterRowChangeEvent((CloudAccountDA.MiscellaneousMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.MiscellaneousMasterRowChanging != null)
                {
                    this.MiscellaneousMasterRowChanging(this, new CloudAccountDA.MiscellaneousMasterRowChangeEvent((CloudAccountDA.MiscellaneousMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.MiscellaneousMasterRowDeleted != null)
                {
                    this.MiscellaneousMasterRowDeleted(this, new CloudAccountDA.MiscellaneousMasterRowChangeEvent((CloudAccountDA.MiscellaneousMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.MiscellaneousMasterRowDeleting != null)
                {
                    this.MiscellaneousMasterRowDeleting(this, new CloudAccountDA.MiscellaneousMasterRowChangeEvent((CloudAccountDA.MiscellaneousMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveMiscellaneousMasterRow(CloudAccountDA.MiscellaneousMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CreditAutomaticallyColumn
            {
                get
                {
                    return this.columnCreditAutomatically;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DateFormatColumn
            {
                get
                {
                    return this.columnDateFormat;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DefaultClientAccessColumn
            {
                get
                {
                    return this.columnDefaultClientAccess;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DefaultColumnHeadingsColumn
            {
                get
                {
                    return this.columnDefaultColumnHeadings;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DefaultStaffAccessColumn
            {
                get
                {
                    return this.columnDefaultStaffAccess;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DirectLinksColumn
            {
                get
                {
                    return this.columnDirectLinks;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DoyinGoBrandingColumn
            {
                get
                {
                    return this.columnDoyinGoBranding;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MiscellaneousMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.MiscellaneousMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LinesPerPageColumn
            {
                get
                {
                    return this.columnLinesPerPage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MiscellaneousIDColumn
            {
                get
                {
                    return this.columnMiscellaneousID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RecurringInvoicesColumn
            {
                get
                {
                    return this.columnRecurringInvoices;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RequestReviewsColumn
            {
                get
                {
                    return this.columnRequestReviews;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportTimeIncrementHoursColumn
            {
                get
                {
                    return this.columnSupportTimeIncrementHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SupportTimeIncrementMinuteColumn
            {
                get
                {
                    return this.columnSupportTimeIncrementMinute;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TextBelowYourLogoColumn
            {
                get
                {
                    return this.columnTextBelowYourLogo;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn WelcomeMessagesClientColumn
            {
                get
                {
                    return this.columnWelcomeMessagesClient;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn WelcomeMessagesStaffColumn
            {
                get
                {
                    return this.columnWelcomeMessagesStaff;
                }
            }
        }
        
        public class MiscellaneousMasterRow : DataRow
        {
            private CloudAccountDA.MiscellaneousMasterDataTable tableMiscellaneousMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal MiscellaneousMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableMiscellaneousMaster = (CloudAccountDA.MiscellaneousMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreditAutomaticallyNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.CreditAutomaticallyColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateFormatNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.DateFormatColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDefaultClientAccessNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.DefaultClientAccessColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDefaultColumnHeadingsNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.DefaultColumnHeadingsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDefaultStaffAccessNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.DefaultStaffAccessColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDirectLinksNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.DirectLinksColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDoyinGoBrandingNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.DoyinGoBrandingColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLinesPerPageNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.LinesPerPageColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurringInvoicesNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.RecurringInvoicesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRequestReviewsNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.RequestReviewsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSupportTimeIncrementHoursNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.SupportTimeIncrementHoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSupportTimeIncrementMinuteNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.SupportTimeIncrementMinuteColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTextBelowYourLogoNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.TextBelowYourLogoColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsWelcomeMessagesClientNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.WelcomeMessagesClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWelcomeMessagesStaffNull()
            {
                return base.IsNull(this.tableMiscellaneousMaster.WelcomeMessagesStaffColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCreditAutomaticallyNull()
            {
                base[this.tableMiscellaneousMaster.CreditAutomaticallyColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDateFormatNull()
            {
                base[this.tableMiscellaneousMaster.DateFormatColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDefaultClientAccessNull()
            {
                base[this.tableMiscellaneousMaster.DefaultClientAccessColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDefaultColumnHeadingsNull()
            {
                base[this.tableMiscellaneousMaster.DefaultColumnHeadingsColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDefaultStaffAccessNull()
            {
                base[this.tableMiscellaneousMaster.DefaultStaffAccessColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDirectLinksNull()
            {
                base[this.tableMiscellaneousMaster.DirectLinksColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDoyinGoBrandingNull()
            {
                base[this.tableMiscellaneousMaster.DoyinGoBrandingColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetLinesPerPageNull()
            {
                base[this.tableMiscellaneousMaster.LinesPerPageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurringInvoicesNull()
            {
                base[this.tableMiscellaneousMaster.RecurringInvoicesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRequestReviewsNull()
            {
                base[this.tableMiscellaneousMaster.RequestReviewsColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSupportTimeIncrementHoursNull()
            {
                base[this.tableMiscellaneousMaster.SupportTimeIncrementHoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSupportTimeIncrementMinuteNull()
            {
                base[this.tableMiscellaneousMaster.SupportTimeIncrementMinuteColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTextBelowYourLogoNull()
            {
                base[this.tableMiscellaneousMaster.TextBelowYourLogoColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetWelcomeMessagesClientNull()
            {
                base[this.tableMiscellaneousMaster.WelcomeMessagesClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetWelcomeMessagesStaffNull()
            {
                base[this.tableMiscellaneousMaster.WelcomeMessagesStaffColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableMiscellaneousMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableMiscellaneousMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CreditAutomatically
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMiscellaneousMaster.CreditAutomaticallyColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CreditAutomatically' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.CreditAutomaticallyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string DateFormat
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMiscellaneousMaster.DateFormatColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DateFormat' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.DateFormatColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultClientAccess
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMiscellaneousMaster.DefaultClientAccessColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DefaultClientAccess' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.DefaultClientAccessColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string DefaultColumnHeadings
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMiscellaneousMaster.DefaultColumnHeadingsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DefaultColumnHeadings' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.DefaultColumnHeadingsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultStaffAccess
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMiscellaneousMaster.DefaultStaffAccessColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DefaultStaffAccess' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.DefaultStaffAccessColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool DirectLinks
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMiscellaneousMaster.DirectLinksColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DirectLinks' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.DirectLinksColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool DoyinGoBranding
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMiscellaneousMaster.DoyinGoBrandingColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DoyinGoBranding' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.DoyinGoBrandingColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LinesPerPage
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableMiscellaneousMaster.LinesPerPageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LinesPerPage' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.LinesPerPageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int MiscellaneousID
            {
                get
                {
                    return (int) base[this.tableMiscellaneousMaster.MiscellaneousIDColumn];
                }
                set
                {
                    base[this.tableMiscellaneousMaster.MiscellaneousIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool RecurringInvoices
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMiscellaneousMaster.RecurringInvoicesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringInvoices' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.RecurringInvoicesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool RequestReviews
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableMiscellaneousMaster.RequestReviewsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RequestReviews' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.RequestReviewsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SupportTimeIncrementHours
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableMiscellaneousMaster.SupportTimeIncrementHoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SupportTimeIncrementHours' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.SupportTimeIncrementHoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int SupportTimeIncrementMinute
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableMiscellaneousMaster.SupportTimeIncrementMinuteColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SupportTimeIncrementMinute' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.SupportTimeIncrementMinuteColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TextBelowYourLogo
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMiscellaneousMaster.TextBelowYourLogoColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TextBelowYourLogo' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.TextBelowYourLogoColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WelcomeMessagesClient
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMiscellaneousMaster.WelcomeMessagesClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'WelcomeMessagesClient' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.WelcomeMessagesClientColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string WelcomeMessagesStaff
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableMiscellaneousMaster.WelcomeMessagesStaffColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'WelcomeMessagesStaff' in table 'MiscellaneousMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableMiscellaneousMaster.WelcomeMessagesStaffColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class MiscellaneousMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.MiscellaneousMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MiscellaneousMasterRowChangeEvent(CloudAccountDA.MiscellaneousMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.MiscellaneousMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void MiscellaneousMasterRowChangeEventHandler(object sender, CloudAccountDA.MiscellaneousMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ModuleFormMasterDataTable : TypedTableBase<CloudAccountDA.ModuleFormMasterRow>
        {
            private DataColumn columnFormID;
            private DataColumn columnModuleFormID;
            private DataColumn columnModuleFormName;
            private DataColumn columnModuleFormStatus;
            private DataColumn columnModuleID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleFormMasterRowChangeEventHandler ModuleFormMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleFormMasterRowChangeEventHandler ModuleFormMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleFormMasterRowChangeEventHandler ModuleFormMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleFormMasterRowChangeEventHandler ModuleFormMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ModuleFormMasterDataTable()
            {
                base.TableName = "ModuleFormMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ModuleFormMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ModuleFormMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddModuleFormMasterRow(CloudAccountDA.ModuleFormMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ModuleFormMasterRow AddModuleFormMasterRow(int ModuleID, int FormID, string ModuleFormName, bool ModuleFormStatus)
            {
                CloudAccountDA.ModuleFormMasterRow row = (CloudAccountDA.ModuleFormMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = ModuleID;
                objArray2[2] = FormID;
                objArray2[3] = ModuleFormName;
                objArray2[4] = ModuleFormStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ModuleFormMasterDataTable table = (CloudAccountDA.ModuleFormMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ModuleFormMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ModuleFormMasterRow FindByModuleFormID(int ModuleFormID)
            {
                return (CloudAccountDA.ModuleFormMasterRow) base.Rows.Find(new object[] { ModuleFormID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ModuleFormMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ModuleFormMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnModuleFormID = new DataColumn("ModuleFormID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleFormID);
                this.columnModuleID = new DataColumn("ModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnFormID = new DataColumn("FormID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnFormID);
                this.columnModuleFormName = new DataColumn("ModuleFormName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnModuleFormName);
                this.columnModuleFormStatus = new DataColumn("ModuleFormStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnModuleFormStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnModuleFormID }, true));
                this.columnModuleFormID.AutoIncrement = true;
                this.columnModuleFormID.AutoIncrementSeed = -1L;
                this.columnModuleFormID.AutoIncrementStep = -1L;
                this.columnModuleFormID.AllowDBNull = false;
                this.columnModuleFormID.ReadOnly = true;
                this.columnModuleFormID.Unique = true;
                this.columnModuleFormName.MaxLength = 100;
                this.columnModuleFormStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnModuleFormID = base.Columns["ModuleFormID"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnFormID = base.Columns["FormID"];
                this.columnModuleFormName = base.Columns["ModuleFormName"];
                this.columnModuleFormStatus = base.Columns["ModuleFormStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ModuleFormMasterRow NewModuleFormMasterRow()
            {
                return (CloudAccountDA.ModuleFormMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ModuleFormMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ModuleFormMasterRowChanged != null)
                {
                    this.ModuleFormMasterRowChanged(this, new CloudAccountDA.ModuleFormMasterRowChangeEvent((CloudAccountDA.ModuleFormMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ModuleFormMasterRowChanging != null)
                {
                    this.ModuleFormMasterRowChanging(this, new CloudAccountDA.ModuleFormMasterRowChangeEvent((CloudAccountDA.ModuleFormMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ModuleFormMasterRowDeleted != null)
                {
                    this.ModuleFormMasterRowDeleted(this, new CloudAccountDA.ModuleFormMasterRowChangeEvent((CloudAccountDA.ModuleFormMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ModuleFormMasterRowDeleting != null)
                {
                    this.ModuleFormMasterRowDeleting(this, new CloudAccountDA.ModuleFormMasterRowChangeEvent((CloudAccountDA.ModuleFormMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveModuleFormMasterRow(CloudAccountDA.ModuleFormMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FormIDColumn
            {
                get
                {
                    return this.columnFormID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ModuleFormMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ModuleFormMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ModuleFormIDColumn
            {
                get
                {
                    return this.columnModuleFormID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleFormNameColumn
            {
                get
                {
                    return this.columnModuleFormName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleFormStatusColumn
            {
                get
                {
                    return this.columnModuleFormStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleIDColumn
            {
                get
                {
                    return this.columnModuleID;
                }
            }
        }
        
        public class ModuleFormMasterRow : DataRow
        {
            private CloudAccountDA.ModuleFormMasterDataTable tableModuleFormMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ModuleFormMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableModuleFormMaster = (CloudAccountDA.ModuleFormMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFormIDNull()
            {
                return base.IsNull(this.tableModuleFormMaster.FormIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsModuleFormNameNull()
            {
                return base.IsNull(this.tableModuleFormMaster.ModuleFormNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsModuleIDNull()
            {
                return base.IsNull(this.tableModuleFormMaster.ModuleIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFormIDNull()
            {
                base[this.tableModuleFormMaster.FormIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetModuleFormNameNull()
            {
                base[this.tableModuleFormMaster.ModuleFormNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetModuleIDNull()
            {
                base[this.tableModuleFormMaster.ModuleIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int FormID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableModuleFormMaster.FormIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FormID' in table 'ModuleFormMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableModuleFormMaster.FormIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ModuleFormID
            {
                get
                {
                    return (int) base[this.tableModuleFormMaster.ModuleFormIDColumn];
                }
                set
                {
                    base[this.tableModuleFormMaster.ModuleFormIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ModuleFormName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableModuleFormMaster.ModuleFormNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleFormName' in table 'ModuleFormMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableModuleFormMaster.ModuleFormNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ModuleFormStatus
            {
                get
                {
                    return (bool) base[this.tableModuleFormMaster.ModuleFormStatusColumn];
                }
                set
                {
                    base[this.tableModuleFormMaster.ModuleFormStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ModuleID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableModuleFormMaster.ModuleIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleID' in table 'ModuleFormMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableModuleFormMaster.ModuleIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ModuleFormMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ModuleFormMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleFormMasterRowChangeEvent(CloudAccountDA.ModuleFormMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ModuleFormMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ModuleFormMasterRowChangeEventHandler(object sender, CloudAccountDA.ModuleFormMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ModuleMasterDataTable : TypedTableBase<CloudAccountDA.ModuleMasterRow>
        {
            private DataColumn columnModuleDesc;
            private DataColumn columnModuleID;
            private DataColumn columnModuleName;
            private DataColumn columnModuleStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleMasterRowChangeEventHandler ModuleMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleMasterRowChangeEventHandler ModuleMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleMasterRowChangeEventHandler ModuleMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ModuleMasterRowChangeEventHandler ModuleMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleMasterDataTable()
            {
                base.TableName = "ModuleMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ModuleMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ModuleMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddModuleMasterRow(CloudAccountDA.ModuleMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ModuleMasterRow AddModuleMasterRow(string ModuleName, string ModuleDesc, bool ModuleStatus)
            {
                CloudAccountDA.ModuleMasterRow row = (CloudAccountDA.ModuleMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = ModuleName;
                objArray2[2] = ModuleDesc;
                objArray2[3] = ModuleStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ModuleMasterDataTable table = (CloudAccountDA.ModuleMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ModuleMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ModuleMasterRow FindByModuleID(int ModuleID)
            {
                return (CloudAccountDA.ModuleMasterRow) base.Rows.Find(new object[] { ModuleID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ModuleMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ModuleMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnModuleID = new DataColumn("ModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnModuleName = new DataColumn("ModuleName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnModuleName);
                this.columnModuleDesc = new DataColumn("ModuleDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnModuleDesc);
                this.columnModuleStatus = new DataColumn("ModuleStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnModuleStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnModuleID }, true));
                this.columnModuleID.AutoIncrement = true;
                this.columnModuleID.AutoIncrementSeed = -1L;
                this.columnModuleID.AutoIncrementStep = -1L;
                this.columnModuleID.AllowDBNull = false;
                this.columnModuleID.ReadOnly = true;
                this.columnModuleID.Unique = true;
                this.columnModuleName.AllowDBNull = false;
                this.columnModuleName.MaxLength = 100;
                this.columnModuleDesc.MaxLength = 500;
                this.columnModuleStatus.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnModuleName = base.Columns["ModuleName"];
                this.columnModuleDesc = base.Columns["ModuleDesc"];
                this.columnModuleStatus = base.Columns["ModuleStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ModuleMasterRow NewModuleMasterRow()
            {
                return (CloudAccountDA.ModuleMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ModuleMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ModuleMasterRowChanged != null)
                {
                    this.ModuleMasterRowChanged(this, new CloudAccountDA.ModuleMasterRowChangeEvent((CloudAccountDA.ModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ModuleMasterRowChanging != null)
                {
                    this.ModuleMasterRowChanging(this, new CloudAccountDA.ModuleMasterRowChangeEvent((CloudAccountDA.ModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ModuleMasterRowDeleted != null)
                {
                    this.ModuleMasterRowDeleted(this, new CloudAccountDA.ModuleMasterRowChangeEvent((CloudAccountDA.ModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ModuleMasterRowDeleting != null)
                {
                    this.ModuleMasterRowDeleting(this, new CloudAccountDA.ModuleMasterRowChangeEvent((CloudAccountDA.ModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveModuleMasterRow(CloudAccountDA.ModuleMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ModuleMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ModuleMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleDescColumn
            {
                get
                {
                    return this.columnModuleDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleIDColumn
            {
                get
                {
                    return this.columnModuleID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleNameColumn
            {
                get
                {
                    return this.columnModuleName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleStatusColumn
            {
                get
                {
                    return this.columnModuleStatus;
                }
            }
        }
        
        public class ModuleMasterRow : DataRow
        {
            private CloudAccountDA.ModuleMasterDataTable tableModuleMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ModuleMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableModuleMaster = (CloudAccountDA.ModuleMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModuleDescNull()
            {
                return base.IsNull(this.tableModuleMaster.ModuleDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModuleDescNull()
            {
                base[this.tableModuleMaster.ModuleDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ModuleDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableModuleMaster.ModuleDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleDesc' in table 'ModuleMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableModuleMaster.ModuleDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ModuleID
            {
                get
                {
                    return (int) base[this.tableModuleMaster.ModuleIDColumn];
                }
                set
                {
                    base[this.tableModuleMaster.ModuleIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ModuleName
            {
                get
                {
                    return (string) base[this.tableModuleMaster.ModuleNameColumn];
                }
                set
                {
                    base[this.tableModuleMaster.ModuleNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ModuleStatus
            {
                get
                {
                    return (bool) base[this.tableModuleMaster.ModuleStatusColumn];
                }
                set
                {
                    base[this.tableModuleMaster.ModuleStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ModuleMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ModuleMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleMasterRowChangeEvent(CloudAccountDA.ModuleMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ModuleMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ModuleMasterRowChangeEventHandler(object sender, CloudAccountDA.ModuleMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class NewClientEmailTemplateDataTable : TypedTableBase<CloudAccountDA.NewClientEmailTemplateRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnNewClientEmailTemplateID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewClientEmailTemplateRowChangeEventHandler NewClientEmailTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewClientEmailTemplateRowChangeEventHandler NewClientEmailTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewClientEmailTemplateRowChangeEventHandler NewClientEmailTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewClientEmailTemplateRowChangeEventHandler NewClientEmailTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewClientEmailTemplateDataTable()
            {
                base.TableName = "NewClientEmailTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewClientEmailTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected NewClientEmailTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddNewClientEmailTemplateRow(CloudAccountDA.NewClientEmailTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewClientEmailTemplateRow AddNewClientEmailTemplateRow(int CompanyID, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.NewClientEmailTemplateRow row = (CloudAccountDA.NewClientEmailTemplateRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = EmailSubject;
                objArray2[3] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.NewClientEmailTemplateDataTable table = (CloudAccountDA.NewClientEmailTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.NewClientEmailTemplateDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewClientEmailTemplateRow FindByNewClientEmailTemplateID(int NewClientEmailTemplateID)
            {
                return (CloudAccountDA.NewClientEmailTemplateRow) base.Rows.Find(new object[] { NewClientEmailTemplateID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.NewClientEmailTemplateRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "NewClientEmailTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnNewClientEmailTemplateID = new DataColumn("NewClientEmailTemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNewClientEmailTemplateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnNewClientEmailTemplateID }, true));
                this.columnNewClientEmailTemplateID.AutoIncrement = true;
                this.columnNewClientEmailTemplateID.AutoIncrementSeed = -1L;
                this.columnNewClientEmailTemplateID.AutoIncrementStep = -1L;
                this.columnNewClientEmailTemplateID.AllowDBNull = false;
                this.columnNewClientEmailTemplateID.ReadOnly = true;
                this.columnNewClientEmailTemplateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnNewClientEmailTemplateID = base.Columns["NewClientEmailTemplateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewClientEmailTemplateRow NewNewClientEmailTemplateRow()
            {
                return (CloudAccountDA.NewClientEmailTemplateRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.NewClientEmailTemplateRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.NewClientEmailTemplateRowChanged != null)
                {
                    this.NewClientEmailTemplateRowChanged(this, new CloudAccountDA.NewClientEmailTemplateRowChangeEvent((CloudAccountDA.NewClientEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.NewClientEmailTemplateRowChanging != null)
                {
                    this.NewClientEmailTemplateRowChanging(this, new CloudAccountDA.NewClientEmailTemplateRowChangeEvent((CloudAccountDA.NewClientEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.NewClientEmailTemplateRowDeleted != null)
                {
                    this.NewClientEmailTemplateRowDeleted(this, new CloudAccountDA.NewClientEmailTemplateRowChangeEvent((CloudAccountDA.NewClientEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.NewClientEmailTemplateRowDeleting != null)
                {
                    this.NewClientEmailTemplateRowDeleting(this, new CloudAccountDA.NewClientEmailTemplateRowChangeEvent((CloudAccountDA.NewClientEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveNewClientEmailTemplateRow(CloudAccountDA.NewClientEmailTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewClientEmailTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.NewClientEmailTemplateRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NewClientEmailTemplateIDColumn
            {
                get
                {
                    return this.columnNewClientEmailTemplateID;
                }
            }
        }
        
        public class NewClientEmailTemplateRow : DataRow
        {
            private CloudAccountDA.NewClientEmailTemplateDataTable tableNewClientEmailTemplate;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewClientEmailTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableNewClientEmailTemplate = (CloudAccountDA.NewClientEmailTemplateDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableNewClientEmailTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableNewClientEmailTemplate.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableNewClientEmailTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableNewClientEmailTemplate.EmailBodyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableNewClientEmailTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableNewClientEmailTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int NewClientEmailTemplateID
            {
                get
                {
                    return (int) base[this.tableNewClientEmailTemplate.NewClientEmailTemplateIDColumn];
                }
                set
                {
                    base[this.tableNewClientEmailTemplate.NewClientEmailTemplateIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NewClientEmailTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.NewClientEmailTemplateRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NewClientEmailTemplateRowChangeEvent(CloudAccountDA.NewClientEmailTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewClientEmailTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NewClientEmailTemplateRowChangeEventHandler(object sender, CloudAccountDA.NewClientEmailTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class NewCreditEmailTemplateDataTable : TypedTableBase<CloudAccountDA.NewCreditEmailTemplateRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnNewCreditEmailTemplateID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewCreditEmailTemplateRowChangeEventHandler NewCreditEmailTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewCreditEmailTemplateRowChangeEventHandler NewCreditEmailTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewCreditEmailTemplateRowChangeEventHandler NewCreditEmailTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewCreditEmailTemplateRowChangeEventHandler NewCreditEmailTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewCreditEmailTemplateDataTable()
            {
                base.TableName = "NewCreditEmailTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewCreditEmailTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NewCreditEmailTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNewCreditEmailTemplateRow(CloudAccountDA.NewCreditEmailTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewCreditEmailTemplateRow AddNewCreditEmailTemplateRow(int CompanyID, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.NewCreditEmailTemplateRow row = (CloudAccountDA.NewCreditEmailTemplateRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = EmailSubject;
                objArray2[3] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.NewCreditEmailTemplateDataTable table = (CloudAccountDA.NewCreditEmailTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.NewCreditEmailTemplateDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewCreditEmailTemplateRow FindByNewCreditEmailTemplateID(int NewCreditEmailTemplateID)
            {
                return (CloudAccountDA.NewCreditEmailTemplateRow) base.Rows.Find(new object[] { NewCreditEmailTemplateID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.NewCreditEmailTemplateRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "NewCreditEmailTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnNewCreditEmailTemplateID = new DataColumn("NewCreditEmailTemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNewCreditEmailTemplateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnNewCreditEmailTemplateID }, true));
                this.columnNewCreditEmailTemplateID.AutoIncrement = true;
                this.columnNewCreditEmailTemplateID.AutoIncrementSeed = -1L;
                this.columnNewCreditEmailTemplateID.AutoIncrementStep = -1L;
                this.columnNewCreditEmailTemplateID.AllowDBNull = false;
                this.columnNewCreditEmailTemplateID.ReadOnly = true;
                this.columnNewCreditEmailTemplateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnNewCreditEmailTemplateID = base.Columns["NewCreditEmailTemplateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewCreditEmailTemplateRow NewNewCreditEmailTemplateRow()
            {
                return (CloudAccountDA.NewCreditEmailTemplateRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.NewCreditEmailTemplateRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.NewCreditEmailTemplateRowChanged != null)
                {
                    this.NewCreditEmailTemplateRowChanged(this, new CloudAccountDA.NewCreditEmailTemplateRowChangeEvent((CloudAccountDA.NewCreditEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.NewCreditEmailTemplateRowChanging != null)
                {
                    this.NewCreditEmailTemplateRowChanging(this, new CloudAccountDA.NewCreditEmailTemplateRowChangeEvent((CloudAccountDA.NewCreditEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.NewCreditEmailTemplateRowDeleted != null)
                {
                    this.NewCreditEmailTemplateRowDeleted(this, new CloudAccountDA.NewCreditEmailTemplateRowChangeEvent((CloudAccountDA.NewCreditEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.NewCreditEmailTemplateRowDeleting != null)
                {
                    this.NewCreditEmailTemplateRowDeleting(this, new CloudAccountDA.NewCreditEmailTemplateRowChangeEvent((CloudAccountDA.NewCreditEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveNewCreditEmailTemplateRow(CloudAccountDA.NewCreditEmailTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewCreditEmailTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.NewCreditEmailTemplateRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NewCreditEmailTemplateIDColumn
            {
                get
                {
                    return this.columnNewCreditEmailTemplateID;
                }
            }
        }
        
        public class NewCreditEmailTemplateRow : DataRow
        {
            private CloudAccountDA.NewCreditEmailTemplateDataTable tableNewCreditEmailTemplate;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal NewCreditEmailTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableNewCreditEmailTemplate = (CloudAccountDA.NewCreditEmailTemplateDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableNewCreditEmailTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableNewCreditEmailTemplate.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableNewCreditEmailTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableNewCreditEmailTemplate.EmailBodyColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableNewCreditEmailTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableNewCreditEmailTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NewCreditEmailTemplateID
            {
                get
                {
                    return (int) base[this.tableNewCreditEmailTemplate.NewCreditEmailTemplateIDColumn];
                }
                set
                {
                    base[this.tableNewCreditEmailTemplate.NewCreditEmailTemplateIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NewCreditEmailTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.NewCreditEmailTemplateRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NewCreditEmailTemplateRowChangeEvent(CloudAccountDA.NewCreditEmailTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewCreditEmailTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NewCreditEmailTemplateRowChangeEventHandler(object sender, CloudAccountDA.NewCreditEmailTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class NewEstimateEmailTemplateDataTable : TypedTableBase<CloudAccountDA.NewEstimateEmailTemplateRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnNewEstimateEmailTemplateID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewEstimateEmailTemplateRowChangeEventHandler NewEstimateEmailTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewEstimateEmailTemplateRowChangeEventHandler NewEstimateEmailTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewEstimateEmailTemplateRowChangeEventHandler NewEstimateEmailTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewEstimateEmailTemplateRowChangeEventHandler NewEstimateEmailTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewEstimateEmailTemplateDataTable()
            {
                base.TableName = "NewEstimateEmailTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal NewEstimateEmailTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NewEstimateEmailTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNewEstimateEmailTemplateRow(CloudAccountDA.NewEstimateEmailTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewEstimateEmailTemplateRow AddNewEstimateEmailTemplateRow(int CompanyID, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.NewEstimateEmailTemplateRow row = (CloudAccountDA.NewEstimateEmailTemplateRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = EmailSubject;
                objArray2[3] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.NewEstimateEmailTemplateDataTable table = (CloudAccountDA.NewEstimateEmailTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.NewEstimateEmailTemplateDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewEstimateEmailTemplateRow FindByNewEstimateEmailTemplateID(int NewEstimateEmailTemplateID)
            {
                return (CloudAccountDA.NewEstimateEmailTemplateRow) base.Rows.Find(new object[] { NewEstimateEmailTemplateID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.NewEstimateEmailTemplateRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "NewEstimateEmailTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnNewEstimateEmailTemplateID = new DataColumn("NewEstimateEmailTemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNewEstimateEmailTemplateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnNewEstimateEmailTemplateID }, true));
                this.columnNewEstimateEmailTemplateID.AutoIncrement = true;
                this.columnNewEstimateEmailTemplateID.AutoIncrementSeed = -1L;
                this.columnNewEstimateEmailTemplateID.AutoIncrementStep = -1L;
                this.columnNewEstimateEmailTemplateID.AllowDBNull = false;
                this.columnNewEstimateEmailTemplateID.ReadOnly = true;
                this.columnNewEstimateEmailTemplateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnNewEstimateEmailTemplateID = base.Columns["NewEstimateEmailTemplateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewEstimateEmailTemplateRow NewNewEstimateEmailTemplateRow()
            {
                return (CloudAccountDA.NewEstimateEmailTemplateRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.NewEstimateEmailTemplateRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.NewEstimateEmailTemplateRowChanged != null)
                {
                    this.NewEstimateEmailTemplateRowChanged(this, new CloudAccountDA.NewEstimateEmailTemplateRowChangeEvent((CloudAccountDA.NewEstimateEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.NewEstimateEmailTemplateRowChanging != null)
                {
                    this.NewEstimateEmailTemplateRowChanging(this, new CloudAccountDA.NewEstimateEmailTemplateRowChangeEvent((CloudAccountDA.NewEstimateEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.NewEstimateEmailTemplateRowDeleted != null)
                {
                    this.NewEstimateEmailTemplateRowDeleted(this, new CloudAccountDA.NewEstimateEmailTemplateRowChangeEvent((CloudAccountDA.NewEstimateEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.NewEstimateEmailTemplateRowDeleting != null)
                {
                    this.NewEstimateEmailTemplateRowDeleting(this, new CloudAccountDA.NewEstimateEmailTemplateRowChangeEvent((CloudAccountDA.NewEstimateEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNewEstimateEmailTemplateRow(CloudAccountDA.NewEstimateEmailTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewEstimateEmailTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.NewEstimateEmailTemplateRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NewEstimateEmailTemplateIDColumn
            {
                get
                {
                    return this.columnNewEstimateEmailTemplateID;
                }
            }
        }
        
        public class NewEstimateEmailTemplateRow : DataRow
        {
            private CloudAccountDA.NewEstimateEmailTemplateDataTable tableNewEstimateEmailTemplate;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewEstimateEmailTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableNewEstimateEmailTemplate = (CloudAccountDA.NewEstimateEmailTemplateDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableNewEstimateEmailTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableNewEstimateEmailTemplate.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableNewEstimateEmailTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableNewEstimateEmailTemplate.EmailBodyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableNewEstimateEmailTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableNewEstimateEmailTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NewEstimateEmailTemplateID
            {
                get
                {
                    return (int) base[this.tableNewEstimateEmailTemplate.NewEstimateEmailTemplateIDColumn];
                }
                set
                {
                    base[this.tableNewEstimateEmailTemplate.NewEstimateEmailTemplateIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NewEstimateEmailTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.NewEstimateEmailTemplateRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NewEstimateEmailTemplateRowChangeEvent(CloudAccountDA.NewEstimateEmailTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewEstimateEmailTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NewEstimateEmailTemplateRowChangeEventHandler(object sender, CloudAccountDA.NewEstimateEmailTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class NewInvoiceEmailTemplateDataTable : TypedTableBase<CloudAccountDA.NewInvoiceEmailTemplateRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnNewInvoiceEmailTemplateID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewInvoiceEmailTemplateRowChangeEventHandler NewInvoiceEmailTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewInvoiceEmailTemplateRowChangeEventHandler NewInvoiceEmailTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewInvoiceEmailTemplateRowChangeEventHandler NewInvoiceEmailTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewInvoiceEmailTemplateRowChangeEventHandler NewInvoiceEmailTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewInvoiceEmailTemplateDataTable()
            {
                base.TableName = "NewInvoiceEmailTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewInvoiceEmailTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NewInvoiceEmailTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNewInvoiceEmailTemplateRow(CloudAccountDA.NewInvoiceEmailTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewInvoiceEmailTemplateRow AddNewInvoiceEmailTemplateRow(int CompanyID, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.NewInvoiceEmailTemplateRow row = (CloudAccountDA.NewInvoiceEmailTemplateRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = EmailSubject;
                objArray2[3] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.NewInvoiceEmailTemplateDataTable table = (CloudAccountDA.NewInvoiceEmailTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.NewInvoiceEmailTemplateDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewInvoiceEmailTemplateRow FindByNewInvoiceEmailTemplateID(int NewInvoiceEmailTemplateID)
            {
                return (CloudAccountDA.NewInvoiceEmailTemplateRow) base.Rows.Find(new object[] { NewInvoiceEmailTemplateID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.NewInvoiceEmailTemplateRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "NewInvoiceEmailTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnNewInvoiceEmailTemplateID = new DataColumn("NewInvoiceEmailTemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNewInvoiceEmailTemplateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnNewInvoiceEmailTemplateID }, true));
                this.columnNewInvoiceEmailTemplateID.AutoIncrement = true;
                this.columnNewInvoiceEmailTemplateID.AutoIncrementSeed = -1L;
                this.columnNewInvoiceEmailTemplateID.AutoIncrementStep = -1L;
                this.columnNewInvoiceEmailTemplateID.AllowDBNull = false;
                this.columnNewInvoiceEmailTemplateID.ReadOnly = true;
                this.columnNewInvoiceEmailTemplateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnNewInvoiceEmailTemplateID = base.Columns["NewInvoiceEmailTemplateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewInvoiceEmailTemplateRow NewNewInvoiceEmailTemplateRow()
            {
                return (CloudAccountDA.NewInvoiceEmailTemplateRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.NewInvoiceEmailTemplateRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.NewInvoiceEmailTemplateRowChanged != null)
                {
                    this.NewInvoiceEmailTemplateRowChanged(this, new CloudAccountDA.NewInvoiceEmailTemplateRowChangeEvent((CloudAccountDA.NewInvoiceEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.NewInvoiceEmailTemplateRowChanging != null)
                {
                    this.NewInvoiceEmailTemplateRowChanging(this, new CloudAccountDA.NewInvoiceEmailTemplateRowChangeEvent((CloudAccountDA.NewInvoiceEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.NewInvoiceEmailTemplateRowDeleted != null)
                {
                    this.NewInvoiceEmailTemplateRowDeleted(this, new CloudAccountDA.NewInvoiceEmailTemplateRowChangeEvent((CloudAccountDA.NewInvoiceEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.NewInvoiceEmailTemplateRowDeleting != null)
                {
                    this.NewInvoiceEmailTemplateRowDeleting(this, new CloudAccountDA.NewInvoiceEmailTemplateRowChangeEvent((CloudAccountDA.NewInvoiceEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNewInvoiceEmailTemplateRow(CloudAccountDA.NewInvoiceEmailTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewInvoiceEmailTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.NewInvoiceEmailTemplateRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NewInvoiceEmailTemplateIDColumn
            {
                get
                {
                    return this.columnNewInvoiceEmailTemplateID;
                }
            }
        }
        
        public class NewInvoiceEmailTemplateRow : DataRow
        {
            private CloudAccountDA.NewInvoiceEmailTemplateDataTable tableNewInvoiceEmailTemplate;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal NewInvoiceEmailTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableNewInvoiceEmailTemplate = (CloudAccountDA.NewInvoiceEmailTemplateDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableNewInvoiceEmailTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableNewInvoiceEmailTemplate.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableNewInvoiceEmailTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableNewInvoiceEmailTemplate.EmailBodyColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableNewInvoiceEmailTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableNewInvoiceEmailTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int NewInvoiceEmailTemplateID
            {
                get
                {
                    return (int) base[this.tableNewInvoiceEmailTemplate.NewInvoiceEmailTemplateIDColumn];
                }
                set
                {
                    base[this.tableNewInvoiceEmailTemplate.NewInvoiceEmailTemplateIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NewInvoiceEmailTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.NewInvoiceEmailTemplateRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewInvoiceEmailTemplateRowChangeEvent(CloudAccountDA.NewInvoiceEmailTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewInvoiceEmailTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NewInvoiceEmailTemplateRowChangeEventHandler(object sender, CloudAccountDA.NewInvoiceEmailTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class NewPaymentEmailTemplateDataTable : TypedTableBase<CloudAccountDA.NewPaymentEmailTemplateRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnEnable;
            private DataColumn columnNewPaymentEmailTemplateID;
            private DataColumn columnPayments;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewPaymentEmailTemplateRowChangeEventHandler NewPaymentEmailTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewPaymentEmailTemplateRowChangeEventHandler NewPaymentEmailTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewPaymentEmailTemplateRowChangeEventHandler NewPaymentEmailTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewPaymentEmailTemplateRowChangeEventHandler NewPaymentEmailTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewPaymentEmailTemplateDataTable()
            {
                base.TableName = "NewPaymentEmailTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewPaymentEmailTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NewPaymentEmailTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddNewPaymentEmailTemplateRow(CloudAccountDA.NewPaymentEmailTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewPaymentEmailTemplateRow AddNewPaymentEmailTemplateRow(int CompanyID, string Payments, bool Enable, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.NewPaymentEmailTemplateRow row = (CloudAccountDA.NewPaymentEmailTemplateRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = CompanyID;
                objArray2[2] = Payments;
                objArray2[3] = Enable;
                objArray2[4] = EmailSubject;
                objArray2[5] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.NewPaymentEmailTemplateDataTable table = (CloudAccountDA.NewPaymentEmailTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.NewPaymentEmailTemplateDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewPaymentEmailTemplateRow FindByNewPaymentEmailTemplateID(int NewPaymentEmailTemplateID)
            {
                return (CloudAccountDA.NewPaymentEmailTemplateRow) base.Rows.Find(new object[] { NewPaymentEmailTemplateID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.NewPaymentEmailTemplateRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "NewPaymentEmailTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnNewPaymentEmailTemplateID = new DataColumn("NewPaymentEmailTemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNewPaymentEmailTemplateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnPayments = new DataColumn("Payments", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPayments);
                this.columnEnable = new DataColumn("Enable", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEnable);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnNewPaymentEmailTemplateID }, true));
                this.columnNewPaymentEmailTemplateID.AutoIncrement = true;
                this.columnNewPaymentEmailTemplateID.AutoIncrementSeed = -1L;
                this.columnNewPaymentEmailTemplateID.AutoIncrementStep = -1L;
                this.columnNewPaymentEmailTemplateID.AllowDBNull = false;
                this.columnNewPaymentEmailTemplateID.ReadOnly = true;
                this.columnNewPaymentEmailTemplateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnPayments.AllowDBNull = false;
                this.columnPayments.MaxLength = 15;
                this.columnEnable.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnNewPaymentEmailTemplateID = base.Columns["NewPaymentEmailTemplateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnPayments = base.Columns["Payments"];
                this.columnEnable = base.Columns["Enable"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewPaymentEmailTemplateRow NewNewPaymentEmailTemplateRow()
            {
                return (CloudAccountDA.NewPaymentEmailTemplateRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.NewPaymentEmailTemplateRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.NewPaymentEmailTemplateRowChanged != null)
                {
                    this.NewPaymentEmailTemplateRowChanged(this, new CloudAccountDA.NewPaymentEmailTemplateRowChangeEvent((CloudAccountDA.NewPaymentEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.NewPaymentEmailTemplateRowChanging != null)
                {
                    this.NewPaymentEmailTemplateRowChanging(this, new CloudAccountDA.NewPaymentEmailTemplateRowChangeEvent((CloudAccountDA.NewPaymentEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.NewPaymentEmailTemplateRowDeleted != null)
                {
                    this.NewPaymentEmailTemplateRowDeleted(this, new CloudAccountDA.NewPaymentEmailTemplateRowChangeEvent((CloudAccountDA.NewPaymentEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.NewPaymentEmailTemplateRowDeleting != null)
                {
                    this.NewPaymentEmailTemplateRowDeleting(this, new CloudAccountDA.NewPaymentEmailTemplateRowChangeEvent((CloudAccountDA.NewPaymentEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveNewPaymentEmailTemplateRow(CloudAccountDA.NewPaymentEmailTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EnableColumn
            {
                get
                {
                    return this.columnEnable;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.NewPaymentEmailTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.NewPaymentEmailTemplateRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NewPaymentEmailTemplateIDColumn
            {
                get
                {
                    return this.columnNewPaymentEmailTemplateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PaymentsColumn
            {
                get
                {
                    return this.columnPayments;
                }
            }
        }
        
        public class NewPaymentEmailTemplateRow : DataRow
        {
            private CloudAccountDA.NewPaymentEmailTemplateDataTable tableNewPaymentEmailTemplate;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewPaymentEmailTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableNewPaymentEmailTemplate = (CloudAccountDA.NewPaymentEmailTemplateDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableNewPaymentEmailTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableNewPaymentEmailTemplate.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableNewPaymentEmailTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableNewPaymentEmailTemplate.EmailBodyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableNewPaymentEmailTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableNewPaymentEmailTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Enable
            {
                get
                {
                    return (bool) base[this.tableNewPaymentEmailTemplate.EnableColumn];
                }
                set
                {
                    base[this.tableNewPaymentEmailTemplate.EnableColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int NewPaymentEmailTemplateID
            {
                get
                {
                    return (int) base[this.tableNewPaymentEmailTemplate.NewPaymentEmailTemplateIDColumn];
                }
                set
                {
                    base[this.tableNewPaymentEmailTemplate.NewPaymentEmailTemplateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Payments
            {
                get
                {
                    return (string) base[this.tableNewPaymentEmailTemplate.PaymentsColumn];
                }
                set
                {
                    base[this.tableNewPaymentEmailTemplate.PaymentsColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NewPaymentEmailTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.NewPaymentEmailTemplateRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewPaymentEmailTemplateRowChangeEvent(CloudAccountDA.NewPaymentEmailTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewPaymentEmailTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NewPaymentEmailTemplateRowChangeEventHandler(object sender, CloudAccountDA.NewPaymentEmailTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class NewStaffEmailTemplateDataTable : TypedTableBase<CloudAccountDA.NewStaffEmailTemplateRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailBody;
            private DataColumn columnEmailSubject;
            private DataColumn columnNewStaffEmailTemplateID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewStaffEmailTemplateRowChangeEventHandler NewStaffEmailTemplateRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewStaffEmailTemplateRowChangeEventHandler NewStaffEmailTemplateRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewStaffEmailTemplateRowChangeEventHandler NewStaffEmailTemplateRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.NewStaffEmailTemplateRowChangeEventHandler NewStaffEmailTemplateRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewStaffEmailTemplateDataTable()
            {
                base.TableName = "NewStaffEmailTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewStaffEmailTemplateDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected NewStaffEmailTemplateDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNewStaffEmailTemplateRow(CloudAccountDA.NewStaffEmailTemplateRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewStaffEmailTemplateRow AddNewStaffEmailTemplateRow(int CompanyID, string EmailSubject, string EmailBody)
            {
                CloudAccountDA.NewStaffEmailTemplateRow row = (CloudAccountDA.NewStaffEmailTemplateRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = EmailSubject;
                objArray2[3] = EmailBody;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.NewStaffEmailTemplateDataTable table = (CloudAccountDA.NewStaffEmailTemplateDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.NewStaffEmailTemplateDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewStaffEmailTemplateRow FindByNewStaffEmailTemplateID(int NewStaffEmailTemplateID)
            {
                return (CloudAccountDA.NewStaffEmailTemplateRow) base.Rows.Find(new object[] { NewStaffEmailTemplateID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.NewStaffEmailTemplateRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "NewStaffEmailTemplateDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnNewStaffEmailTemplateID = new DataColumn("NewStaffEmailTemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNewStaffEmailTemplateID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnEmailSubject = new DataColumn("EmailSubject", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSubject);
                this.columnEmailBody = new DataColumn("EmailBody", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailBody);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnNewStaffEmailTemplateID }, true));
                this.columnNewStaffEmailTemplateID.AutoIncrement = true;
                this.columnNewStaffEmailTemplateID.AutoIncrementSeed = -1L;
                this.columnNewStaffEmailTemplateID.AutoIncrementStep = -1L;
                this.columnNewStaffEmailTemplateID.AllowDBNull = false;
                this.columnNewStaffEmailTemplateID.ReadOnly = true;
                this.columnNewStaffEmailTemplateID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnEmailSubject.AllowDBNull = false;
                this.columnEmailSubject.MaxLength = 500;
                this.columnEmailBody.AllowDBNull = false;
                this.columnEmailBody.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnNewStaffEmailTemplateID = base.Columns["NewStaffEmailTemplateID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnEmailSubject = base.Columns["EmailSubject"];
                this.columnEmailBody = base.Columns["EmailBody"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewStaffEmailTemplateRow NewNewStaffEmailTemplateRow()
            {
                return (CloudAccountDA.NewStaffEmailTemplateRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.NewStaffEmailTemplateRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.NewStaffEmailTemplateRowChanged != null)
                {
                    this.NewStaffEmailTemplateRowChanged(this, new CloudAccountDA.NewStaffEmailTemplateRowChangeEvent((CloudAccountDA.NewStaffEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.NewStaffEmailTemplateRowChanging != null)
                {
                    this.NewStaffEmailTemplateRowChanging(this, new CloudAccountDA.NewStaffEmailTemplateRowChangeEvent((CloudAccountDA.NewStaffEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.NewStaffEmailTemplateRowDeleted != null)
                {
                    this.NewStaffEmailTemplateRowDeleted(this, new CloudAccountDA.NewStaffEmailTemplateRowChangeEvent((CloudAccountDA.NewStaffEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.NewStaffEmailTemplateRowDeleting != null)
                {
                    this.NewStaffEmailTemplateRowDeleting(this, new CloudAccountDA.NewStaffEmailTemplateRowChangeEvent((CloudAccountDA.NewStaffEmailTemplateRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveNewStaffEmailTemplateRow(CloudAccountDA.NewStaffEmailTemplateRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailBodyColumn
            {
                get
                {
                    return this.columnEmailBody;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailSubjectColumn
            {
                get
                {
                    return this.columnEmailSubject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewStaffEmailTemplateRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.NewStaffEmailTemplateRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NewStaffEmailTemplateIDColumn
            {
                get
                {
                    return this.columnNewStaffEmailTemplateID;
                }
            }
        }
        
        public class NewStaffEmailTemplateRow : DataRow
        {
            private CloudAccountDA.NewStaffEmailTemplateDataTable tableNewStaffEmailTemplate;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NewStaffEmailTemplateRow(DataRowBuilder rb) : base(rb)
            {
                this.tableNewStaffEmailTemplate = (CloudAccountDA.NewStaffEmailTemplateDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableNewStaffEmailTemplate.CompanyIDColumn];
                }
                set
                {
                    base[this.tableNewStaffEmailTemplate.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailBody
            {
                get
                {
                    return (string) base[this.tableNewStaffEmailTemplate.EmailBodyColumn];
                }
                set
                {
                    base[this.tableNewStaffEmailTemplate.EmailBodyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailSubject
            {
                get
                {
                    return (string) base[this.tableNewStaffEmailTemplate.EmailSubjectColumn];
                }
                set
                {
                    base[this.tableNewStaffEmailTemplate.EmailSubjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int NewStaffEmailTemplateID
            {
                get
                {
                    return (int) base[this.tableNewStaffEmailTemplate.NewStaffEmailTemplateIDColumn];
                }
                set
                {
                    base[this.tableNewStaffEmailTemplate.NewStaffEmailTemplateIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NewStaffEmailTemplateRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.NewStaffEmailTemplateRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public NewStaffEmailTemplateRowChangeEvent(CloudAccountDA.NewStaffEmailTemplateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.NewStaffEmailTemplateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NewStaffEmailTemplateRowChangeEventHandler(object sender, CloudAccountDA.NewStaffEmailTemplateRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PackageDetailsDataTable : TypedTableBase<CloudAccountDA.PackageDetailsRow>
        {
            private DataColumn columnModuleID;
            private DataColumn columnModuleStatus;
            private DataColumn columnPackageDetailID;
            private DataColumn columnPackageID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageDetailsRowChangeEventHandler PackageDetailsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageDetailsRowChangeEventHandler PackageDetailsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageDetailsRowChangeEventHandler PackageDetailsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageDetailsRowChangeEventHandler PackageDetailsRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PackageDetailsDataTable()
            {
                base.TableName = "PackageDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PackageDetailsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PackageDetailsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddPackageDetailsRow(CloudAccountDA.PackageDetailsRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageDetailsRow AddPackageDetailsRow(int PackageID, int ModuleID, bool ModuleStatus)
            {
                CloudAccountDA.PackageDetailsRow row = (CloudAccountDA.PackageDetailsRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = PackageID;
                objArray2[2] = ModuleID;
                objArray2[3] = ModuleStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.PackageDetailsDataTable table = (CloudAccountDA.PackageDetailsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PackageDetailsDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageDetailsRow FindByPackageDetailID(int PackageDetailID)
            {
                return (CloudAccountDA.PackageDetailsRow) base.Rows.Find(new object[] { PackageDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PackageDetailsRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PackageDetailsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPackageDetailID = new DataColumn("PackageDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageDetailID);
                this.columnPackageID = new DataColumn("PackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnModuleID = new DataColumn("ModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnModuleID);
                this.columnModuleStatus = new DataColumn("ModuleStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnModuleStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPackageDetailID }, true));
                this.columnPackageDetailID.AutoIncrement = true;
                this.columnPackageDetailID.AutoIncrementSeed = -1L;
                this.columnPackageDetailID.AutoIncrementStep = -1L;
                this.columnPackageDetailID.AllowDBNull = false;
                this.columnPackageDetailID.ReadOnly = true;
                this.columnPackageDetailID.Unique = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPackageDetailID = base.Columns["PackageDetailID"];
                this.columnPackageID = base.Columns["PackageID"];
                this.columnModuleID = base.Columns["ModuleID"];
                this.columnModuleStatus = base.Columns["ModuleStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageDetailsRow NewPackageDetailsRow()
            {
                return (CloudAccountDA.PackageDetailsRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PackageDetailsRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PackageDetailsRowChanged != null)
                {
                    this.PackageDetailsRowChanged(this, new CloudAccountDA.PackageDetailsRowChangeEvent((CloudAccountDA.PackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PackageDetailsRowChanging != null)
                {
                    this.PackageDetailsRowChanging(this, new CloudAccountDA.PackageDetailsRowChangeEvent((CloudAccountDA.PackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PackageDetailsRowDeleted != null)
                {
                    this.PackageDetailsRowDeleted(this, new CloudAccountDA.PackageDetailsRowChangeEvent((CloudAccountDA.PackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PackageDetailsRowDeleting != null)
                {
                    this.PackageDetailsRowDeleting(this, new CloudAccountDA.PackageDetailsRowChangeEvent((CloudAccountDA.PackageDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemovePackageDetailsRow(CloudAccountDA.PackageDetailsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageDetailsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PackageDetailsRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ModuleIDColumn
            {
                get
                {
                    return this.columnModuleID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ModuleStatusColumn
            {
                get
                {
                    return this.columnModuleStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageDetailIDColumn
            {
                get
                {
                    return this.columnPackageDetailID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageIDColumn
            {
                get
                {
                    return this.columnPackageID;
                }
            }
        }
        
        public class PackageDetailsRow : DataRow
        {
            private CloudAccountDA.PackageDetailsDataTable tablePackageDetails;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PackageDetailsRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePackageDetails = (CloudAccountDA.PackageDetailsDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModuleIDNull()
            {
                return base.IsNull(this.tablePackageDetails.ModuleIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModuleStatusNull()
            {
                return base.IsNull(this.tablePackageDetails.ModuleStatusColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageIDNull()
            {
                return base.IsNull(this.tablePackageDetails.PackageIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModuleIDNull()
            {
                base[this.tablePackageDetails.ModuleIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetModuleStatusNull()
            {
                base[this.tablePackageDetails.ModuleStatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageIDNull()
            {
                base[this.tablePackageDetails.PackageIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ModuleID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tablePackageDetails.ModuleIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleID' in table 'PackageDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tablePackageDetails.ModuleIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ModuleStatus
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tablePackageDetails.ModuleStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ModuleStatus' in table 'PackageDetails' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tablePackageDetails.ModuleStatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackageDetailID
            {
                get
                {
                    return (int) base[this.tablePackageDetails.PackageDetailIDColumn];
                }
                set
                {
                    base[this.tablePackageDetails.PackageDetailIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackageID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tablePackageDetails.PackageIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageID' in table 'PackageDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tablePackageDetails.PackageIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PackageDetailsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PackageDetailsRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PackageDetailsRowChangeEvent(CloudAccountDA.PackageDetailsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PackageDetailsRowChangeEventHandler(object sender, CloudAccountDA.PackageDetailsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PackageFeatureMasterDataTable : TypedTableBase<CloudAccountDA.PackageFeatureMasterRow>
        {
            private DataColumn columnPackageFeatureDesc;
            private DataColumn columnPackageFeatureID;
            private DataColumn columnPackageFeatureName;
            private DataColumn columnPackageFeatureStatus;
            private DataColumn columnPackageModuleID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageFeatureMasterRowChangeEventHandler PackageFeatureMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageFeatureMasterRowChangeEventHandler PackageFeatureMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageFeatureMasterRowChangeEventHandler PackageFeatureMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageFeatureMasterRowChangeEventHandler PackageFeatureMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PackageFeatureMasterDataTable()
            {
                base.TableName = "PackageFeatureMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PackageFeatureMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PackageFeatureMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddPackageFeatureMasterRow(CloudAccountDA.PackageFeatureMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageFeatureMasterRow AddPackageFeatureMasterRow(int PackageModuleID, string PackageFeatureName, string PackageFeatureDesc, bool PackageFeatureStatus)
            {
                CloudAccountDA.PackageFeatureMasterRow row = (CloudAccountDA.PackageFeatureMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = PackageModuleID;
                objArray2[2] = PackageFeatureName;
                objArray2[3] = PackageFeatureDesc;
                objArray2[4] = PackageFeatureStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.PackageFeatureMasterDataTable table = (CloudAccountDA.PackageFeatureMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PackageFeatureMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageFeatureMasterRow FindByPackageFeatureID(int PackageFeatureID)
            {
                return (CloudAccountDA.PackageFeatureMasterRow) base.Rows.Find(new object[] { PackageFeatureID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PackageFeatureMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PackageFeatureMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPackageFeatureID = new DataColumn("PackageFeatureID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageFeatureID);
                this.columnPackageModuleID = new DataColumn("PackageModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageModuleID);
                this.columnPackageFeatureName = new DataColumn("PackageFeatureName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageFeatureName);
                this.columnPackageFeatureDesc = new DataColumn("PackageFeatureDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageFeatureDesc);
                this.columnPackageFeatureStatus = new DataColumn("PackageFeatureStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPackageFeatureStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPackageFeatureID }, true));
                this.columnPackageFeatureID.AutoIncrement = true;
                this.columnPackageFeatureID.AutoIncrementSeed = -1L;
                this.columnPackageFeatureID.AutoIncrementStep = -1L;
                this.columnPackageFeatureID.AllowDBNull = false;
                this.columnPackageFeatureID.ReadOnly = true;
                this.columnPackageFeatureID.Unique = true;
                this.columnPackageModuleID.AllowDBNull = false;
                this.columnPackageFeatureName.AllowDBNull = false;
                this.columnPackageFeatureName.MaxLength = 150;
                this.columnPackageFeatureDesc.MaxLength = 500;
                this.columnPackageFeatureStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnPackageFeatureID = base.Columns["PackageFeatureID"];
                this.columnPackageModuleID = base.Columns["PackageModuleID"];
                this.columnPackageFeatureName = base.Columns["PackageFeatureName"];
                this.columnPackageFeatureDesc = base.Columns["PackageFeatureDesc"];
                this.columnPackageFeatureStatus = base.Columns["PackageFeatureStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageFeatureMasterRow NewPackageFeatureMasterRow()
            {
                return (CloudAccountDA.PackageFeatureMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PackageFeatureMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PackageFeatureMasterRowChanged != null)
                {
                    this.PackageFeatureMasterRowChanged(this, new CloudAccountDA.PackageFeatureMasterRowChangeEvent((CloudAccountDA.PackageFeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PackageFeatureMasterRowChanging != null)
                {
                    this.PackageFeatureMasterRowChanging(this, new CloudAccountDA.PackageFeatureMasterRowChangeEvent((CloudAccountDA.PackageFeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PackageFeatureMasterRowDeleted != null)
                {
                    this.PackageFeatureMasterRowDeleted(this, new CloudAccountDA.PackageFeatureMasterRowChangeEvent((CloudAccountDA.PackageFeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PackageFeatureMasterRowDeleting != null)
                {
                    this.PackageFeatureMasterRowDeleting(this, new CloudAccountDA.PackageFeatureMasterRowChangeEvent((CloudAccountDA.PackageFeatureMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemovePackageFeatureMasterRow(CloudAccountDA.PackageFeatureMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageFeatureMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PackageFeatureMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageFeatureDescColumn
            {
                get
                {
                    return this.columnPackageFeatureDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageFeatureIDColumn
            {
                get
                {
                    return this.columnPackageFeatureID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageFeatureNameColumn
            {
                get
                {
                    return this.columnPackageFeatureName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageFeatureStatusColumn
            {
                get
                {
                    return this.columnPackageFeatureStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageModuleIDColumn
            {
                get
                {
                    return this.columnPackageModuleID;
                }
            }
        }
        
        public class PackageFeatureMasterRow : DataRow
        {
            private CloudAccountDA.PackageFeatureMasterDataTable tablePackageFeatureMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PackageFeatureMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePackageFeatureMaster = (CloudAccountDA.PackageFeatureMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageFeatureDescNull()
            {
                return base.IsNull(this.tablePackageFeatureMaster.PackageFeatureDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackageFeatureDescNull()
            {
                base[this.tablePackageFeatureMaster.PackageFeatureDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PackageFeatureDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePackageFeatureMaster.PackageFeatureDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageFeatureDesc' in table 'PackageFeatureMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePackageFeatureMaster.PackageFeatureDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackageFeatureID
            {
                get
                {
                    return (int) base[this.tablePackageFeatureMaster.PackageFeatureIDColumn];
                }
                set
                {
                    base[this.tablePackageFeatureMaster.PackageFeatureIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PackageFeatureName
            {
                get
                {
                    return (string) base[this.tablePackageFeatureMaster.PackageFeatureNameColumn];
                }
                set
                {
                    base[this.tablePackageFeatureMaster.PackageFeatureNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool PackageFeatureStatus
            {
                get
                {
                    return (bool) base[this.tablePackageFeatureMaster.PackageFeatureStatusColumn];
                }
                set
                {
                    base[this.tablePackageFeatureMaster.PackageFeatureStatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackageModuleID
            {
                get
                {
                    return (int) base[this.tablePackageFeatureMaster.PackageModuleIDColumn];
                }
                set
                {
                    base[this.tablePackageFeatureMaster.PackageModuleIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PackageFeatureMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PackageFeatureMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PackageFeatureMasterRowChangeEvent(CloudAccountDA.PackageFeatureMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageFeatureMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PackageFeatureMasterRowChangeEventHandler(object sender, CloudAccountDA.PackageFeatureMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PackageMasterDataTable : TypedTableBase<CloudAccountDA.PackageMasterRow>
        {
            private DataColumn columnDescription;
            private DataColumn columnFreeTrialPackage;
            private DataColumn columnMonthlyPriceCurrencyID;
            private DataColumn columnNoOfAdminUsersMax;
            private DataColumn columnNoOfAdminUsersMin;
            private DataColumn columnNoOfStaffUsersMax;
            private DataColumn columnNoOfStaffUsersMin;
            private DataColumn columnNoOfTrialDays;
            private DataColumn columnPackageCode;
            private DataColumn columnPackageID;
            private DataColumn columnPackageName;
            private DataColumn columnPricePerMonth;
            private DataColumn columnPricePerYear;
            private DataColumn columnStatus;
            private DataColumn columnYearlyPriceCurrencyID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageMasterRowChangeEventHandler PackageMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageMasterRowChangeEventHandler PackageMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageMasterRowChangeEventHandler PackageMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageMasterRowChangeEventHandler PackageMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PackageMasterDataTable()
            {
                base.TableName = "PackageMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PackageMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected PackageMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddPackageMasterRow(CloudAccountDA.PackageMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageMasterRow AddPackageMasterRow(string PackageCode, string PackageName, bool FreeTrialPackage, int NoOfAdminUsersMin, int NoOfAdminUsersMax, int NoOfStaffUsersMin, int NoOfStaffUsersMax, decimal PricePerMonth, int MonthlyPriceCurrencyID, decimal PricePerYear, int YearlyPriceCurrencyID, string Description, int NoOfTrialDays, bool Status)
            {
                CloudAccountDA.PackageMasterRow row = (CloudAccountDA.PackageMasterRow) base.NewRow();
                object[] objArray2 = new object[15];
                objArray2[1] = PackageCode;
                objArray2[2] = PackageName;
                objArray2[3] = FreeTrialPackage;
                objArray2[4] = NoOfAdminUsersMin;
                objArray2[5] = NoOfAdminUsersMax;
                objArray2[6] = NoOfStaffUsersMin;
                objArray2[7] = NoOfStaffUsersMax;
                objArray2[8] = PricePerMonth;
                objArray2[9] = MonthlyPriceCurrencyID;
                objArray2[10] = PricePerYear;
                objArray2[11] = YearlyPriceCurrencyID;
                objArray2[12] = Description;
                objArray2[13] = NoOfTrialDays;
                objArray2[14] = Status;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.PackageMasterDataTable table = (CloudAccountDA.PackageMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PackageMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageMasterRow FindByPackageID(int PackageID)
            {
                return (CloudAccountDA.PackageMasterRow) base.Rows.Find(new object[] { PackageID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PackageMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PackageMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPackageID = new DataColumn("PackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageID);
                this.columnPackageCode = new DataColumn("PackageCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageCode);
                this.columnPackageName = new DataColumn("PackageName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageName);
                this.columnFreeTrialPackage = new DataColumn("FreeTrialPackage", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnFreeTrialPackage);
                this.columnNoOfAdminUsersMin = new DataColumn("NoOfAdminUsersMin", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNoOfAdminUsersMin);
                this.columnNoOfAdminUsersMax = new DataColumn("NoOfAdminUsersMax", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNoOfAdminUsersMax);
                this.columnNoOfStaffUsersMin = new DataColumn("NoOfStaffUsersMin", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNoOfStaffUsersMin);
                this.columnNoOfStaffUsersMax = new DataColumn("NoOfStaffUsersMax", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNoOfStaffUsersMax);
                this.columnPricePerMonth = new DataColumn("PricePerMonth", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPricePerMonth);
                this.columnMonthlyPriceCurrencyID = new DataColumn("MonthlyPriceCurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnMonthlyPriceCurrencyID);
                this.columnPricePerYear = new DataColumn("PricePerYear", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPricePerYear);
                this.columnYearlyPriceCurrencyID = new DataColumn("YearlyPriceCurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnYearlyPriceCurrencyID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnNoOfTrialDays = new DataColumn("NoOfTrialDays", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNoOfTrialDays);
                this.columnStatus = new DataColumn("Status", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPackageID }, true));
                this.columnPackageID.AutoIncrement = true;
                this.columnPackageID.AutoIncrementSeed = -1L;
                this.columnPackageID.AutoIncrementStep = -1L;
                this.columnPackageID.AllowDBNull = false;
                this.columnPackageID.ReadOnly = true;
                this.columnPackageID.Unique = true;
                this.columnPackageCode.MaxLength = 50;
                this.columnPackageName.AllowDBNull = false;
                this.columnPackageName.MaxLength = 250;
                this.columnNoOfAdminUsersMin.AllowDBNull = false;
                this.columnNoOfAdminUsersMax.AllowDBNull = false;
                this.columnNoOfStaffUsersMin.AllowDBNull = false;
                this.columnNoOfStaffUsersMax.AllowDBNull = false;
                this.columnPricePerMonth.AllowDBNull = false;
                this.columnMonthlyPriceCurrencyID.AllowDBNull = false;
                this.columnPricePerYear.AllowDBNull = false;
                this.columnYearlyPriceCurrencyID.AllowDBNull = false;
                this.columnDescription.MaxLength = 0x3e8;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnPackageID = base.Columns["PackageID"];
                this.columnPackageCode = base.Columns["PackageCode"];
                this.columnPackageName = base.Columns["PackageName"];
                this.columnFreeTrialPackage = base.Columns["FreeTrialPackage"];
                this.columnNoOfAdminUsersMin = base.Columns["NoOfAdminUsersMin"];
                this.columnNoOfAdminUsersMax = base.Columns["NoOfAdminUsersMax"];
                this.columnNoOfStaffUsersMin = base.Columns["NoOfStaffUsersMin"];
                this.columnNoOfStaffUsersMax = base.Columns["NoOfStaffUsersMax"];
                this.columnPricePerMonth = base.Columns["PricePerMonth"];
                this.columnMonthlyPriceCurrencyID = base.Columns["MonthlyPriceCurrencyID"];
                this.columnPricePerYear = base.Columns["PricePerYear"];
                this.columnYearlyPriceCurrencyID = base.Columns["YearlyPriceCurrencyID"];
                this.columnDescription = base.Columns["Description"];
                this.columnNoOfTrialDays = base.Columns["NoOfTrialDays"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageMasterRow NewPackageMasterRow()
            {
                return (CloudAccountDA.PackageMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PackageMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PackageMasterRowChanged != null)
                {
                    this.PackageMasterRowChanged(this, new CloudAccountDA.PackageMasterRowChangeEvent((CloudAccountDA.PackageMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PackageMasterRowChanging != null)
                {
                    this.PackageMasterRowChanging(this, new CloudAccountDA.PackageMasterRowChangeEvent((CloudAccountDA.PackageMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PackageMasterRowDeleted != null)
                {
                    this.PackageMasterRowDeleted(this, new CloudAccountDA.PackageMasterRowChangeEvent((CloudAccountDA.PackageMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PackageMasterRowDeleting != null)
                {
                    this.PackageMasterRowDeleting(this, new CloudAccountDA.PackageMasterRowChangeEvent((CloudAccountDA.PackageMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePackageMasterRow(CloudAccountDA.PackageMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FreeTrialPackageColumn
            {
                get
                {
                    return this.columnFreeTrialPackage;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PackageMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MonthlyPriceCurrencyIDColumn
            {
                get
                {
                    return this.columnMonthlyPriceCurrencyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NoOfAdminUsersMaxColumn
            {
                get
                {
                    return this.columnNoOfAdminUsersMax;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NoOfAdminUsersMinColumn
            {
                get
                {
                    return this.columnNoOfAdminUsersMin;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NoOfStaffUsersMaxColumn
            {
                get
                {
                    return this.columnNoOfStaffUsersMax;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NoOfStaffUsersMinColumn
            {
                get
                {
                    return this.columnNoOfStaffUsersMin;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NoOfTrialDaysColumn
            {
                get
                {
                    return this.columnNoOfTrialDays;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageCodeColumn
            {
                get
                {
                    return this.columnPackageCode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageIDColumn
            {
                get
                {
                    return this.columnPackageID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageNameColumn
            {
                get
                {
                    return this.columnPackageName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PricePerMonthColumn
            {
                get
                {
                    return this.columnPricePerMonth;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PricePerYearColumn
            {
                get
                {
                    return this.columnPricePerYear;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn YearlyPriceCurrencyIDColumn
            {
                get
                {
                    return this.columnYearlyPriceCurrencyID;
                }
            }
        }
        
        public class PackageMasterRow : DataRow
        {
            private CloudAccountDA.PackageMasterDataTable tablePackageMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PackageMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePackageMaster = (CloudAccountDA.PackageMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDescriptionNull()
            {
                return base.IsNull(this.tablePackageMaster.DescriptionColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFreeTrialPackageNull()
            {
                return base.IsNull(this.tablePackageMaster.FreeTrialPackageColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNoOfTrialDaysNull()
            {
                return base.IsNull(this.tablePackageMaster.NoOfTrialDaysColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageCodeNull()
            {
                return base.IsNull(this.tablePackageMaster.PackageCodeColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStatusNull()
            {
                return base.IsNull(this.tablePackageMaster.StatusColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDescriptionNull()
            {
                base[this.tablePackageMaster.DescriptionColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFreeTrialPackageNull()
            {
                base[this.tablePackageMaster.FreeTrialPackageColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNoOfTrialDaysNull()
            {
                base[this.tablePackageMaster.NoOfTrialDaysColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageCodeNull()
            {
                base[this.tablePackageMaster.PackageCodeColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetStatusNull()
            {
                base[this.tablePackageMaster.StatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Description
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePackageMaster.DescriptionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Description' in table 'PackageMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePackageMaster.DescriptionColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool FreeTrialPackage
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tablePackageMaster.FreeTrialPackageColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FreeTrialPackage' in table 'PackageMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tablePackageMaster.FreeTrialPackageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int MonthlyPriceCurrencyID
            {
                get
                {
                    return (int) base[this.tablePackageMaster.MonthlyPriceCurrencyIDColumn];
                }
                set
                {
                    base[this.tablePackageMaster.MonthlyPriceCurrencyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NoOfAdminUsersMax
            {
                get
                {
                    return (int) base[this.tablePackageMaster.NoOfAdminUsersMaxColumn];
                }
                set
                {
                    base[this.tablePackageMaster.NoOfAdminUsersMaxColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int NoOfAdminUsersMin
            {
                get
                {
                    return (int) base[this.tablePackageMaster.NoOfAdminUsersMinColumn];
                }
                set
                {
                    base[this.tablePackageMaster.NoOfAdminUsersMinColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NoOfStaffUsersMax
            {
                get
                {
                    return (int) base[this.tablePackageMaster.NoOfStaffUsersMaxColumn];
                }
                set
                {
                    base[this.tablePackageMaster.NoOfStaffUsersMaxColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int NoOfStaffUsersMin
            {
                get
                {
                    return (int) base[this.tablePackageMaster.NoOfStaffUsersMinColumn];
                }
                set
                {
                    base[this.tablePackageMaster.NoOfStaffUsersMinColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NoOfTrialDays
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tablePackageMaster.NoOfTrialDaysColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'NoOfTrialDays' in table 'PackageMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tablePackageMaster.NoOfTrialDaysColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PackageCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePackageMaster.PackageCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageCode' in table 'PackageMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePackageMaster.PackageCodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackageID
            {
                get
                {
                    return (int) base[this.tablePackageMaster.PackageIDColumn];
                }
                set
                {
                    base[this.tablePackageMaster.PackageIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PackageName
            {
                get
                {
                    return (string) base[this.tablePackageMaster.PackageNameColumn];
                }
                set
                {
                    base[this.tablePackageMaster.PackageNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal PricePerMonth
            {
                get
                {
                    return (decimal) base[this.tablePackageMaster.PricePerMonthColumn];
                }
                set
                {
                    base[this.tablePackageMaster.PricePerMonthColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PricePerYear
            {
                get
                {
                    return (decimal) base[this.tablePackageMaster.PricePerYearColumn];
                }
                set
                {
                    base[this.tablePackageMaster.PricePerYearColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Status
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tablePackageMaster.StatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Status' in table 'PackageMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tablePackageMaster.StatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int YearlyPriceCurrencyID
            {
                get
                {
                    return (int) base[this.tablePackageMaster.YearlyPriceCurrencyIDColumn];
                }
                set
                {
                    base[this.tablePackageMaster.YearlyPriceCurrencyIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PackageMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PackageMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PackageMasterRowChangeEvent(CloudAccountDA.PackageMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PackageMasterRowChangeEventHandler(object sender, CloudAccountDA.PackageMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PackageModuleMasterDataTable : TypedTableBase<CloudAccountDA.PackageModuleMasterRow>
        {
            private DataColumn columnPackageModuleDesc;
            private DataColumn columnPackageModuleID;
            private DataColumn columnPackageModuleName;
            private DataColumn columnPackageModuleStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageModuleMasterRowChangeEventHandler PackageModuleMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageModuleMasterRowChangeEventHandler PackageModuleMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageModuleMasterRowChangeEventHandler PackageModuleMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageModuleMasterRowChangeEventHandler PackageModuleMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PackageModuleMasterDataTable()
            {
                base.TableName = "PackageModuleMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PackageModuleMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PackageModuleMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPackageModuleMasterRow(CloudAccountDA.PackageModuleMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageModuleMasterRow AddPackageModuleMasterRow(string PackageModuleName, string PackageModuleDesc, bool PackageModuleStatus)
            {
                CloudAccountDA.PackageModuleMasterRow row = (CloudAccountDA.PackageModuleMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = PackageModuleName;
                objArray2[2] = PackageModuleDesc;
                objArray2[3] = PackageModuleStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.PackageModuleMasterDataTable table = (CloudAccountDA.PackageModuleMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PackageModuleMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageModuleMasterRow FindByPackageModuleID(int PackageModuleID)
            {
                return (CloudAccountDA.PackageModuleMasterRow) base.Rows.Find(new object[] { PackageModuleID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PackageModuleMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PackageModuleMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPackageModuleID = new DataColumn("PackageModuleID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageModuleID);
                this.columnPackageModuleName = new DataColumn("PackageModuleName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageModuleName);
                this.columnPackageModuleDesc = new DataColumn("PackageModuleDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageModuleDesc);
                this.columnPackageModuleStatus = new DataColumn("PackageModuleStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPackageModuleStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPackageModuleID }, true));
                this.columnPackageModuleID.AutoIncrement = true;
                this.columnPackageModuleID.AutoIncrementSeed = -1L;
                this.columnPackageModuleID.AutoIncrementStep = -1L;
                this.columnPackageModuleID.AllowDBNull = false;
                this.columnPackageModuleID.ReadOnly = true;
                this.columnPackageModuleID.Unique = true;
                this.columnPackageModuleName.AllowDBNull = false;
                this.columnPackageModuleName.MaxLength = 50;
                this.columnPackageModuleDesc.MaxLength = 500;
                this.columnPackageModuleStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnPackageModuleID = base.Columns["PackageModuleID"];
                this.columnPackageModuleName = base.Columns["PackageModuleName"];
                this.columnPackageModuleDesc = base.Columns["PackageModuleDesc"];
                this.columnPackageModuleStatus = base.Columns["PackageModuleStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageModuleMasterRow NewPackageModuleMasterRow()
            {
                return (CloudAccountDA.PackageModuleMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PackageModuleMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PackageModuleMasterRowChanged != null)
                {
                    this.PackageModuleMasterRowChanged(this, new CloudAccountDA.PackageModuleMasterRowChangeEvent((CloudAccountDA.PackageModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PackageModuleMasterRowChanging != null)
                {
                    this.PackageModuleMasterRowChanging(this, new CloudAccountDA.PackageModuleMasterRowChangeEvent((CloudAccountDA.PackageModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PackageModuleMasterRowDeleted != null)
                {
                    this.PackageModuleMasterRowDeleted(this, new CloudAccountDA.PackageModuleMasterRowChangeEvent((CloudAccountDA.PackageModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PackageModuleMasterRowDeleting != null)
                {
                    this.PackageModuleMasterRowDeleting(this, new CloudAccountDA.PackageModuleMasterRowChangeEvent((CloudAccountDA.PackageModuleMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePackageModuleMasterRow(CloudAccountDA.PackageModuleMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageModuleMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PackageModuleMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageModuleDescColumn
            {
                get
                {
                    return this.columnPackageModuleDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageModuleIDColumn
            {
                get
                {
                    return this.columnPackageModuleID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageModuleNameColumn
            {
                get
                {
                    return this.columnPackageModuleName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageModuleStatusColumn
            {
                get
                {
                    return this.columnPackageModuleStatus;
                }
            }
        }
        
        public class PackageModuleMasterRow : DataRow
        {
            private CloudAccountDA.PackageModuleMasterDataTable tablePackageModuleMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PackageModuleMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePackageModuleMaster = (CloudAccountDA.PackageModuleMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageModuleDescNull()
            {
                return base.IsNull(this.tablePackageModuleMaster.PackageModuleDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackageModuleDescNull()
            {
                base[this.tablePackageModuleMaster.PackageModuleDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PackageModuleDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePackageModuleMaster.PackageModuleDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageModuleDesc' in table 'PackageModuleMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePackageModuleMaster.PackageModuleDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PackageModuleID
            {
                get
                {
                    return (int) base[this.tablePackageModuleMaster.PackageModuleIDColumn];
                }
                set
                {
                    base[this.tablePackageModuleMaster.PackageModuleIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PackageModuleName
            {
                get
                {
                    return (string) base[this.tablePackageModuleMaster.PackageModuleNameColumn];
                }
                set
                {
                    base[this.tablePackageModuleMaster.PackageModuleNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PackageModuleStatus
            {
                get
                {
                    return (bool) base[this.tablePackageModuleMaster.PackageModuleStatusColumn];
                }
                set
                {
                    base[this.tablePackageModuleMaster.PackageModuleStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PackageModuleMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PackageModuleMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PackageModuleMasterRowChangeEvent(CloudAccountDA.PackageModuleMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageModuleMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PackageModuleMasterRowChangeEventHandler(object sender, CloudAccountDA.PackageModuleMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PackageUpgradeRequestMasterDataTable : TypedTableBase<CloudAccountDA.PackageUpgradeRequestMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnNewPackageID;
            private DataColumn columnOldPackageID;
            private DataColumn columnPackageUpgradeActivatedDate;
            private DataColumn columnPackageUpgradeBy;
            private DataColumn columnPackageUpgradeCompletion;
            private DataColumn columnPackageUpgradeNotes;
            private DataColumn columnPackageUpgradeRequest;
            private DataColumn columnPackageUpgradeRequestDate;
            private DataColumn columnPackageUpgradeRequestID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageUpgradeRequestMasterRowChangeEventHandler PackageUpgradeRequestMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageUpgradeRequestMasterRowChangeEventHandler PackageUpgradeRequestMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageUpgradeRequestMasterRowChangeEventHandler PackageUpgradeRequestMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PackageUpgradeRequestMasterRowChangeEventHandler PackageUpgradeRequestMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PackageUpgradeRequestMasterDataTable()
            {
                base.TableName = "PackageUpgradeRequestMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PackageUpgradeRequestMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PackageUpgradeRequestMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddPackageUpgradeRequestMasterRow(CloudAccountDA.PackageUpgradeRequestMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageUpgradeRequestMasterRow AddPackageUpgradeRequestMasterRow(int CompanyID, int OldPackageID, int NewPackageID, bool PackageUpgradeRequest, DateTime PackageUpgradeRequestDate, bool PackageUpgradeCompletion, string PackageUpgradeBy, DateTime PackageUpgradeActivatedDate, string PackageUpgradeNotes)
            {
                CloudAccountDA.PackageUpgradeRequestMasterRow row = (CloudAccountDA.PackageUpgradeRequestMasterRow) base.NewRow();
                object[] objArray2 = new object[10];
                objArray2[1] = CompanyID;
                objArray2[2] = OldPackageID;
                objArray2[3] = NewPackageID;
                objArray2[4] = PackageUpgradeRequest;
                objArray2[5] = PackageUpgradeRequestDate;
                objArray2[6] = PackageUpgradeCompletion;
                objArray2[7] = PackageUpgradeBy;
                objArray2[8] = PackageUpgradeActivatedDate;
                objArray2[9] = PackageUpgradeNotes;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.PackageUpgradeRequestMasterDataTable table = (CloudAccountDA.PackageUpgradeRequestMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PackageUpgradeRequestMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PackageUpgradeRequestMasterRow FindByPackageUpgradeRequestID(int PackageUpgradeRequestID)
            {
                return (CloudAccountDA.PackageUpgradeRequestMasterRow) base.Rows.Find(new object[] { PackageUpgradeRequestID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PackageUpgradeRequestMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PackageUpgradeRequestMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnPackageUpgradeRequestID = new DataColumn("PackageUpgradeRequestID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPackageUpgradeRequestID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnOldPackageID = new DataColumn("OldPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnOldPackageID);
                this.columnNewPackageID = new DataColumn("NewPackageID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnNewPackageID);
                this.columnPackageUpgradeRequest = new DataColumn("PackageUpgradeRequest", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPackageUpgradeRequest);
                this.columnPackageUpgradeRequestDate = new DataColumn("PackageUpgradeRequestDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageUpgradeRequestDate);
                this.columnPackageUpgradeCompletion = new DataColumn("PackageUpgradeCompletion", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPackageUpgradeCompletion);
                this.columnPackageUpgradeBy = new DataColumn("PackageUpgradeBy", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageUpgradeBy);
                this.columnPackageUpgradeActivatedDate = new DataColumn("PackageUpgradeActivatedDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnPackageUpgradeActivatedDate);
                this.columnPackageUpgradeNotes = new DataColumn("PackageUpgradeNotes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPackageUpgradeNotes);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPackageUpgradeRequestID }, true));
                this.columnPackageUpgradeRequestID.AutoIncrement = true;
                this.columnPackageUpgradeRequestID.AutoIncrementSeed = -1L;
                this.columnPackageUpgradeRequestID.AutoIncrementStep = -1L;
                this.columnPackageUpgradeRequestID.AllowDBNull = false;
                this.columnPackageUpgradeRequestID.ReadOnly = true;
                this.columnPackageUpgradeRequestID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnNewPackageID.AllowDBNull = false;
                this.columnPackageUpgradeBy.MaxLength = 50;
                this.columnPackageUpgradeNotes.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnPackageUpgradeRequestID = base.Columns["PackageUpgradeRequestID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnOldPackageID = base.Columns["OldPackageID"];
                this.columnNewPackageID = base.Columns["NewPackageID"];
                this.columnPackageUpgradeRequest = base.Columns["PackageUpgradeRequest"];
                this.columnPackageUpgradeRequestDate = base.Columns["PackageUpgradeRequestDate"];
                this.columnPackageUpgradeCompletion = base.Columns["PackageUpgradeCompletion"];
                this.columnPackageUpgradeBy = base.Columns["PackageUpgradeBy"];
                this.columnPackageUpgradeActivatedDate = base.Columns["PackageUpgradeActivatedDate"];
                this.columnPackageUpgradeNotes = base.Columns["PackageUpgradeNotes"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageUpgradeRequestMasterRow NewPackageUpgradeRequestMasterRow()
            {
                return (CloudAccountDA.PackageUpgradeRequestMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PackageUpgradeRequestMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PackageUpgradeRequestMasterRowChanged != null)
                {
                    this.PackageUpgradeRequestMasterRowChanged(this, new CloudAccountDA.PackageUpgradeRequestMasterRowChangeEvent((CloudAccountDA.PackageUpgradeRequestMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PackageUpgradeRequestMasterRowChanging != null)
                {
                    this.PackageUpgradeRequestMasterRowChanging(this, new CloudAccountDA.PackageUpgradeRequestMasterRowChangeEvent((CloudAccountDA.PackageUpgradeRequestMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PackageUpgradeRequestMasterRowDeleted != null)
                {
                    this.PackageUpgradeRequestMasterRowDeleted(this, new CloudAccountDA.PackageUpgradeRequestMasterRowChangeEvent((CloudAccountDA.PackageUpgradeRequestMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PackageUpgradeRequestMasterRowDeleting != null)
                {
                    this.PackageUpgradeRequestMasterRowDeleting(this, new CloudAccountDA.PackageUpgradeRequestMasterRowChangeEvent((CloudAccountDA.PackageUpgradeRequestMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePackageUpgradeRequestMasterRow(CloudAccountDA.PackageUpgradeRequestMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageUpgradeRequestMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PackageUpgradeRequestMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NewPackageIDColumn
            {
                get
                {
                    return this.columnNewPackageID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn OldPackageIDColumn
            {
                get
                {
                    return this.columnOldPackageID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageUpgradeActivatedDateColumn
            {
                get
                {
                    return this.columnPackageUpgradeActivatedDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageUpgradeByColumn
            {
                get
                {
                    return this.columnPackageUpgradeBy;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageUpgradeCompletionColumn
            {
                get
                {
                    return this.columnPackageUpgradeCompletion;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageUpgradeNotesColumn
            {
                get
                {
                    return this.columnPackageUpgradeNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PackageUpgradeRequestColumn
            {
                get
                {
                    return this.columnPackageUpgradeRequest;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageUpgradeRequestDateColumn
            {
                get
                {
                    return this.columnPackageUpgradeRequestDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PackageUpgradeRequestIDColumn
            {
                get
                {
                    return this.columnPackageUpgradeRequestID;
                }
            }
        }
        
        public class PackageUpgradeRequestMasterRow : DataRow
        {
            private CloudAccountDA.PackageUpgradeRequestMasterDataTable tablePackageUpgradeRequestMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PackageUpgradeRequestMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePackageUpgradeRequestMaster = (CloudAccountDA.PackageUpgradeRequestMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOldPackageIDNull()
            {
                return base.IsNull(this.tablePackageUpgradeRequestMaster.OldPackageIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageUpgradeActivatedDateNull()
            {
                return base.IsNull(this.tablePackageUpgradeRequestMaster.PackageUpgradeActivatedDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageUpgradeByNull()
            {
                return base.IsNull(this.tablePackageUpgradeRequestMaster.PackageUpgradeByColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageUpgradeCompletionNull()
            {
                return base.IsNull(this.tablePackageUpgradeRequestMaster.PackageUpgradeCompletionColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPackageUpgradeNotesNull()
            {
                return base.IsNull(this.tablePackageUpgradeRequestMaster.PackageUpgradeNotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageUpgradeRequestDateNull()
            {
                return base.IsNull(this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPackageUpgradeRequestNull()
            {
                return base.IsNull(this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetOldPackageIDNull()
            {
                base[this.tablePackageUpgradeRequestMaster.OldPackageIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageUpgradeActivatedDateNull()
            {
                base[this.tablePackageUpgradeRequestMaster.PackageUpgradeActivatedDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackageUpgradeByNull()
            {
                base[this.tablePackageUpgradeRequestMaster.PackageUpgradeByColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageUpgradeCompletionNull()
            {
                base[this.tablePackageUpgradeRequestMaster.PackageUpgradeCompletionColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPackageUpgradeNotesNull()
            {
                base[this.tablePackageUpgradeRequestMaster.PackageUpgradeNotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageUpgradeRequestDateNull()
            {
                base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPackageUpgradeRequestNull()
            {
                base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tablePackageUpgradeRequestMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NewPackageID
            {
                get
                {
                    return (int) base[this.tablePackageUpgradeRequestMaster.NewPackageIDColumn];
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.NewPackageIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OldPackageID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tablePackageUpgradeRequestMaster.OldPackageIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'OldPackageID' in table 'PackageUpgradeRequestMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.OldPackageIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime PackageUpgradeActivatedDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tablePackageUpgradeRequestMaster.PackageUpgradeActivatedDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageUpgradeActivatedDate' in table 'PackageUpgradeRequestMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.PackageUpgradeActivatedDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PackageUpgradeBy
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePackageUpgradeRequestMaster.PackageUpgradeByColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageUpgradeBy' in table 'PackageUpgradeRequestMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.PackageUpgradeByColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PackageUpgradeCompletion
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tablePackageUpgradeRequestMaster.PackageUpgradeCompletionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageUpgradeCompletion' in table 'PackageUpgradeRequestMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.PackageUpgradeCompletionColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PackageUpgradeNotes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePackageUpgradeRequestMaster.PackageUpgradeNotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageUpgradeNotes' in table 'PackageUpgradeRequestMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.PackageUpgradeNotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool PackageUpgradeRequest
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageUpgradeRequest' in table 'PackageUpgradeRequestMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime PackageUpgradeRequestDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PackageUpgradeRequestDate' in table 'PackageUpgradeRequestMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int PackageUpgradeRequestID
            {
                get
                {
                    return (int) base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestIDColumn];
                }
                set
                {
                    base[this.tablePackageUpgradeRequestMaster.PackageUpgradeRequestIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PackageUpgradeRequestMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PackageUpgradeRequestMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PackageUpgradeRequestMasterRowChangeEvent(CloudAccountDA.PackageUpgradeRequestMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PackageUpgradeRequestMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PackageUpgradeRequestMasterRowChangeEventHandler(object sender, CloudAccountDA.PackageUpgradeRequestMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PaymentGatewayMasterDataTable : TypedTableBase<CloudAccountDA.PaymentGatewayMasterRow>
        {
            private DataColumn columnMerchantAuthkey;
            private DataColumn columnMerchantID;
            private DataColumn columnPaymentGatewayID;
            private DataColumn columnTransactionAuthkey;
            private DataColumn columnTransactionTypeID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayMasterRowChangeEventHandler PaymentGatewayMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayMasterRowChangeEventHandler PaymentGatewayMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayMasterRowChangeEventHandler PaymentGatewayMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayMasterRowChangeEventHandler PaymentGatewayMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PaymentGatewayMasterDataTable()
            {
                base.TableName = "PaymentGatewayMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PaymentGatewayMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PaymentGatewayMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPaymentGatewayMasterRow(CloudAccountDA.PaymentGatewayMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentGatewayMasterRow AddPaymentGatewayMasterRow(string MerchantID, string MerchantAuthkey, string TransactionTypeID, string TransactionAuthkey)
            {
                CloudAccountDA.PaymentGatewayMasterRow row = (CloudAccountDA.PaymentGatewayMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = MerchantID;
                objArray2[2] = MerchantAuthkey;
                objArray2[3] = TransactionTypeID;
                objArray2[4] = TransactionAuthkey;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.PaymentGatewayMasterDataTable table = (CloudAccountDA.PaymentGatewayMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PaymentGatewayMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentGatewayMasterRow FindByPaymentGatewayID(int PaymentGatewayID)
            {
                return (CloudAccountDA.PaymentGatewayMasterRow) base.Rows.Find(new object[] { PaymentGatewayID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PaymentGatewayMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PaymentGatewayMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnPaymentGatewayID = new DataColumn("PaymentGatewayID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentGatewayID);
                this.columnMerchantID = new DataColumn("MerchantID", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMerchantID);
                this.columnMerchantAuthkey = new DataColumn("MerchantAuthkey", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMerchantAuthkey);
                this.columnTransactionTypeID = new DataColumn("TransactionTypeID", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTransactionTypeID);
                this.columnTransactionAuthkey = new DataColumn("TransactionAuthkey", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTransactionAuthkey);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPaymentGatewayID }, true));
                this.columnPaymentGatewayID.AutoIncrement = true;
                this.columnPaymentGatewayID.AutoIncrementSeed = -1L;
                this.columnPaymentGatewayID.AutoIncrementStep = -1L;
                this.columnPaymentGatewayID.AllowDBNull = false;
                this.columnPaymentGatewayID.ReadOnly = true;
                this.columnPaymentGatewayID.Unique = true;
                this.columnMerchantID.AllowDBNull = false;
                this.columnMerchantID.MaxLength = 5;
                this.columnMerchantAuthkey.AllowDBNull = false;
                this.columnMerchantAuthkey.MaxLength = 0x3e8;
                this.columnTransactionTypeID.AllowDBNull = false;
                this.columnTransactionTypeID.MaxLength = 5;
                this.columnTransactionAuthkey.AllowDBNull = false;
                this.columnTransactionAuthkey.MaxLength = 0x3e8;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnPaymentGatewayID = base.Columns["PaymentGatewayID"];
                this.columnMerchantID = base.Columns["MerchantID"];
                this.columnMerchantAuthkey = base.Columns["MerchantAuthkey"];
                this.columnTransactionTypeID = base.Columns["TransactionTypeID"];
                this.columnTransactionAuthkey = base.Columns["TransactionAuthkey"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PaymentGatewayMasterRow NewPaymentGatewayMasterRow()
            {
                return (CloudAccountDA.PaymentGatewayMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PaymentGatewayMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PaymentGatewayMasterRowChanged != null)
                {
                    this.PaymentGatewayMasterRowChanged(this, new CloudAccountDA.PaymentGatewayMasterRowChangeEvent((CloudAccountDA.PaymentGatewayMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PaymentGatewayMasterRowChanging != null)
                {
                    this.PaymentGatewayMasterRowChanging(this, new CloudAccountDA.PaymentGatewayMasterRowChangeEvent((CloudAccountDA.PaymentGatewayMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PaymentGatewayMasterRowDeleted != null)
                {
                    this.PaymentGatewayMasterRowDeleted(this, new CloudAccountDA.PaymentGatewayMasterRowChangeEvent((CloudAccountDA.PaymentGatewayMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PaymentGatewayMasterRowDeleting != null)
                {
                    this.PaymentGatewayMasterRowDeleting(this, new CloudAccountDA.PaymentGatewayMasterRowChangeEvent((CloudAccountDA.PaymentGatewayMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemovePaymentGatewayMasterRow(CloudAccountDA.PaymentGatewayMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PaymentGatewayMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PaymentGatewayMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MerchantAuthkeyColumn
            {
                get
                {
                    return this.columnMerchantAuthkey;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn MerchantIDColumn
            {
                get
                {
                    return this.columnMerchantID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PaymentGatewayIDColumn
            {
                get
                {
                    return this.columnPaymentGatewayID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TransactionAuthkeyColumn
            {
                get
                {
                    return this.columnTransactionAuthkey;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TransactionTypeIDColumn
            {
                get
                {
                    return this.columnTransactionTypeID;
                }
            }
        }
        
        public class PaymentGatewayMasterRow : DataRow
        {
            private CloudAccountDA.PaymentGatewayMasterDataTable tablePaymentGatewayMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PaymentGatewayMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePaymentGatewayMaster = (CloudAccountDA.PaymentGatewayMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string MerchantAuthkey
            {
                get
                {
                    return (string) base[this.tablePaymentGatewayMaster.MerchantAuthkeyColumn];
                }
                set
                {
                    base[this.tablePaymentGatewayMaster.MerchantAuthkeyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string MerchantID
            {
                get
                {
                    return (string) base[this.tablePaymentGatewayMaster.MerchantIDColumn];
                }
                set
                {
                    base[this.tablePaymentGatewayMaster.MerchantIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PaymentGatewayID
            {
                get
                {
                    return (int) base[this.tablePaymentGatewayMaster.PaymentGatewayIDColumn];
                }
                set
                {
                    base[this.tablePaymentGatewayMaster.PaymentGatewayIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TransactionAuthkey
            {
                get
                {
                    return (string) base[this.tablePaymentGatewayMaster.TransactionAuthkeyColumn];
                }
                set
                {
                    base[this.tablePaymentGatewayMaster.TransactionAuthkeyColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TransactionTypeID
            {
                get
                {
                    return (string) base[this.tablePaymentGatewayMaster.TransactionTypeIDColumn];
                }
                set
                {
                    base[this.tablePaymentGatewayMaster.TransactionTypeIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PaymentGatewayMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PaymentGatewayMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PaymentGatewayMasterRowChangeEvent(CloudAccountDA.PaymentGatewayMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentGatewayMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PaymentGatewayMasterRowChangeEventHandler(object sender, CloudAccountDA.PaymentGatewayMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PaymentGatewayPaypalMasterDataTable : TypedTableBase<CloudAccountDA.PaymentGatewayPaypalMasterRow>
        {
            private DataColumn columnPaymentGatewayPaypalID;
            private DataColumn columnPaypalID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEventHandler PaymentGatewayPaypalMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEventHandler PaymentGatewayPaypalMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEventHandler PaymentGatewayPaypalMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEventHandler PaymentGatewayPaypalMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PaymentGatewayPaypalMasterDataTable()
            {
                base.TableName = "PaymentGatewayPaypalMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PaymentGatewayPaypalMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected PaymentGatewayPaypalMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddPaymentGatewayPaypalMasterRow(CloudAccountDA.PaymentGatewayPaypalMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PaymentGatewayPaypalMasterRow AddPaymentGatewayPaypalMasterRow(string PaypalID)
            {
                CloudAccountDA.PaymentGatewayPaypalMasterRow row = (CloudAccountDA.PaymentGatewayPaypalMasterRow) base.NewRow();
                object[] objArray2 = new object[2];
                objArray2[1] = PaypalID;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.PaymentGatewayPaypalMasterDataTable table = (CloudAccountDA.PaymentGatewayPaypalMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PaymentGatewayPaypalMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PaymentGatewayPaypalMasterRow FindByPaymentGatewayPaypalID(int PaymentGatewayPaypalID)
            {
                return (CloudAccountDA.PaymentGatewayPaypalMasterRow) base.Rows.Find(new object[] { PaymentGatewayPaypalID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PaymentGatewayPaypalMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PaymentGatewayPaypalMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPaymentGatewayPaypalID = new DataColumn("PaymentGatewayPaypalID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentGatewayPaypalID);
                this.columnPaypalID = new DataColumn("PaypalID", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPaypalID);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPaymentGatewayPaypalID }, true));
                this.columnPaymentGatewayPaypalID.AutoIncrement = true;
                this.columnPaymentGatewayPaypalID.AutoIncrementSeed = -1L;
                this.columnPaymentGatewayPaypalID.AutoIncrementStep = -1L;
                this.columnPaymentGatewayPaypalID.AllowDBNull = false;
                this.columnPaymentGatewayPaypalID.ReadOnly = true;
                this.columnPaymentGatewayPaypalID.Unique = true;
                this.columnPaypalID.AllowDBNull = false;
                this.columnPaypalID.MaxLength = 100;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPaymentGatewayPaypalID = base.Columns["PaymentGatewayPaypalID"];
                this.columnPaypalID = base.Columns["PaypalID"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentGatewayPaypalMasterRow NewPaymentGatewayPaypalMasterRow()
            {
                return (CloudAccountDA.PaymentGatewayPaypalMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PaymentGatewayPaypalMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PaymentGatewayPaypalMasterRowChanged != null)
                {
                    this.PaymentGatewayPaypalMasterRowChanged(this, new CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEvent((CloudAccountDA.PaymentGatewayPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PaymentGatewayPaypalMasterRowChanging != null)
                {
                    this.PaymentGatewayPaypalMasterRowChanging(this, new CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEvent((CloudAccountDA.PaymentGatewayPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PaymentGatewayPaypalMasterRowDeleted != null)
                {
                    this.PaymentGatewayPaypalMasterRowDeleted(this, new CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEvent((CloudAccountDA.PaymentGatewayPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PaymentGatewayPaypalMasterRowDeleting != null)
                {
                    this.PaymentGatewayPaypalMasterRowDeleting(this, new CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEvent((CloudAccountDA.PaymentGatewayPaypalMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemovePaymentGatewayPaypalMasterRow(CloudAccountDA.PaymentGatewayPaypalMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PaymentGatewayPaypalMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PaymentGatewayPaypalMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PaymentGatewayPaypalIDColumn
            {
                get
                {
                    return this.columnPaymentGatewayPaypalID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PaypalIDColumn
            {
                get
                {
                    return this.columnPaypalID;
                }
            }
        }
        
        public class PaymentGatewayPaypalMasterRow : DataRow
        {
            private CloudAccountDA.PaymentGatewayPaypalMasterDataTable tablePaymentGatewayPaypalMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PaymentGatewayPaypalMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePaymentGatewayPaypalMaster = (CloudAccountDA.PaymentGatewayPaypalMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int PaymentGatewayPaypalID
            {
                get
                {
                    return (int) base[this.tablePaymentGatewayPaypalMaster.PaymentGatewayPaypalIDColumn];
                }
                set
                {
                    base[this.tablePaymentGatewayPaypalMaster.PaymentGatewayPaypalIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PaypalID
            {
                get
                {
                    return (string) base[this.tablePaymentGatewayPaypalMaster.PaypalIDColumn];
                }
                set
                {
                    base[this.tablePaymentGatewayPaypalMaster.PaypalIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PaymentGatewayPaypalMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PaymentGatewayPaypalMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PaymentGatewayPaypalMasterRowChangeEvent(CloudAccountDA.PaymentGatewayPaypalMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentGatewayPaypalMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PaymentGatewayPaypalMasterRowChangeEventHandler(object sender, CloudAccountDA.PaymentGatewayPaypalMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PaymentMasterDataTable : TypedTableBase<CloudAccountDA.PaymentMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnDate;
            private DataColumn columnInvoiceID;
            private DataColumn columnMethod;
            private DataColumn columnNotes;
            private DataColumn columnPaymentAmount;
            private DataColumn columnPaymentID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentMasterRowChangeEventHandler PaymentMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentMasterRowChangeEventHandler PaymentMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentMasterRowChangeEventHandler PaymentMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PaymentMasterRowChangeEventHandler PaymentMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PaymentMasterDataTable()
            {
                base.TableName = "PaymentMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PaymentMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PaymentMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPaymentMasterRow(CloudAccountDA.PaymentMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentMasterRow AddPaymentMasterRow(int CompanyID, int InvoiceID, decimal PaymentAmount, string Method, DateTime Date, string Notes)
            {
                CloudAccountDA.PaymentMasterRow row = (CloudAccountDA.PaymentMasterRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CompanyID;
                objArray2[2] = InvoiceID;
                objArray2[3] = PaymentAmount;
                objArray2[4] = Method;
                objArray2[5] = Date;
                objArray2[6] = Notes;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.PaymentMasterDataTable table = (CloudAccountDA.PaymentMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PaymentMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PaymentMasterRow FindByPaymentID(int PaymentID)
            {
                return (CloudAccountDA.PaymentMasterRow) base.Rows.Find(new object[] { PaymentID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PaymentMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PaymentMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPaymentID = new DataColumn("PaymentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceID);
                this.columnPaymentAmount = new DataColumn("PaymentAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentAmount);
                this.columnMethod = new DataColumn("Method", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMethod);
                this.columnDate = new DataColumn("Date", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPaymentID }, true));
                this.columnPaymentID.AutoIncrement = true;
                this.columnPaymentID.AutoIncrementSeed = -1L;
                this.columnPaymentID.AutoIncrementStep = -1L;
                this.columnPaymentID.AllowDBNull = false;
                this.columnPaymentID.ReadOnly = true;
                this.columnPaymentID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnMethod.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPaymentID = base.Columns["PaymentID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnInvoiceID = base.Columns["InvoiceID"];
                this.columnPaymentAmount = base.Columns["PaymentAmount"];
                this.columnMethod = base.Columns["Method"];
                this.columnDate = base.Columns["Date"];
                this.columnNotes = base.Columns["Notes"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentMasterRow NewPaymentMasterRow()
            {
                return (CloudAccountDA.PaymentMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PaymentMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PaymentMasterRowChanged != null)
                {
                    this.PaymentMasterRowChanged(this, new CloudAccountDA.PaymentMasterRowChangeEvent((CloudAccountDA.PaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PaymentMasterRowChanging != null)
                {
                    this.PaymentMasterRowChanging(this, new CloudAccountDA.PaymentMasterRowChangeEvent((CloudAccountDA.PaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PaymentMasterRowDeleted != null)
                {
                    this.PaymentMasterRowDeleted(this, new CloudAccountDA.PaymentMasterRowChangeEvent((CloudAccountDA.PaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PaymentMasterRowDeleting != null)
                {
                    this.PaymentMasterRowDeleting(this, new CloudAccountDA.PaymentMasterRowChangeEvent((CloudAccountDA.PaymentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePaymentMasterRow(CloudAccountDA.PaymentMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceIDColumn
            {
                get
                {
                    return this.columnInvoiceID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PaymentMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MethodColumn
            {
                get
                {
                    return this.columnMethod;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PaymentAmountColumn
            {
                get
                {
                    return this.columnPaymentAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PaymentIDColumn
            {
                get
                {
                    return this.columnPaymentID;
                }
            }
        }
        
        public class PaymentMasterRow : DataRow
        {
            private CloudAccountDA.PaymentMasterDataTable tablePaymentMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PaymentMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePaymentMaster = (CloudAccountDA.PaymentMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateNull()
            {
                return base.IsNull(this.tablePaymentMaster.DateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsMethodNull()
            {
                return base.IsNull(this.tablePaymentMaster.MethodColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tablePaymentMaster.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPaymentAmountNull()
            {
                return base.IsNull(this.tablePaymentMaster.PaymentAmountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateNull()
            {
                base[this.tablePaymentMaster.DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetMethodNull()
            {
                base[this.tablePaymentMaster.MethodColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tablePaymentMaster.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPaymentAmountNull()
            {
                base[this.tablePaymentMaster.PaymentAmountColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tablePaymentMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tablePaymentMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime Date
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tablePaymentMaster.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'PaymentMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tablePaymentMaster.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceID
            {
                get
                {
                    return (int) base[this.tablePaymentMaster.InvoiceIDColumn];
                }
                set
                {
                    base[this.tablePaymentMaster.InvoiceIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Method
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePaymentMaster.MethodColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Method' in table 'PaymentMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePaymentMaster.MethodColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tablePaymentMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'PaymentMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tablePaymentMaster.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal PaymentAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tablePaymentMaster.PaymentAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PaymentAmount' in table 'PaymentMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tablePaymentMaster.PaymentAmountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int PaymentID
            {
                get
                {
                    return (int) base[this.tablePaymentMaster.PaymentIDColumn];
                }
                set
                {
                    base[this.tablePaymentMaster.PaymentIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PaymentMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PaymentMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PaymentMasterRowChangeEvent(CloudAccountDA.PaymentMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PaymentMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PaymentMasterRowChangeEventHandler(object sender, CloudAccountDA.PaymentMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class PrivacyPolicyContentDataTable : TypedTableBase<CloudAccountDA.PrivacyPolicyContentRow>
        {
            private DataColumn columnPrivacyPolicyContent;
            private DataColumn columnPrivacyPolicyContentID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PrivacyPolicyContentRowChangeEventHandler PrivacyPolicyContentRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PrivacyPolicyContentRowChangeEventHandler PrivacyPolicyContentRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PrivacyPolicyContentRowChangeEventHandler PrivacyPolicyContentRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.PrivacyPolicyContentRowChangeEventHandler PrivacyPolicyContentRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PrivacyPolicyContentDataTable()
            {
                base.TableName = "PrivacyPolicyContent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal PrivacyPolicyContentDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PrivacyPolicyContentDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPrivacyPolicyContentRow(CloudAccountDA.PrivacyPolicyContentRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PrivacyPolicyContentRow AddPrivacyPolicyContentRow(string PrivacyPolicyContent)
            {
                CloudAccountDA.PrivacyPolicyContentRow row = (CloudAccountDA.PrivacyPolicyContentRow) base.NewRow();
                object[] objArray2 = new object[2];
                objArray2[1] = PrivacyPolicyContent;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.PrivacyPolicyContentDataTable table = (CloudAccountDA.PrivacyPolicyContentDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.PrivacyPolicyContentDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PrivacyPolicyContentRow FindByPrivacyPolicyContentID(int PrivacyPolicyContentID)
            {
                return (CloudAccountDA.PrivacyPolicyContentRow) base.Rows.Find(new object[] { PrivacyPolicyContentID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.PrivacyPolicyContentRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "PrivacyPolicyContentDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnPrivacyPolicyContentID = new DataColumn("PrivacyPolicyContentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPrivacyPolicyContentID);
                this.columnPrivacyPolicyContent = new DataColumn("PrivacyPolicyContent", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPrivacyPolicyContent);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPrivacyPolicyContentID }, true));
                this.columnPrivacyPolicyContentID.AutoIncrement = true;
                this.columnPrivacyPolicyContentID.AutoIncrementSeed = -1L;
                this.columnPrivacyPolicyContentID.AutoIncrementStep = -1L;
                this.columnPrivacyPolicyContentID.AllowDBNull = false;
                this.columnPrivacyPolicyContentID.ReadOnly = true;
                this.columnPrivacyPolicyContentID.Unique = true;
                this.columnPrivacyPolicyContent.AllowDBNull = false;
                this.columnPrivacyPolicyContent.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnPrivacyPolicyContentID = base.Columns["PrivacyPolicyContentID"];
                this.columnPrivacyPolicyContent = base.Columns["PrivacyPolicyContent"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PrivacyPolicyContentRow NewPrivacyPolicyContentRow()
            {
                return (CloudAccountDA.PrivacyPolicyContentRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.PrivacyPolicyContentRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.PrivacyPolicyContentRowChanged != null)
                {
                    this.PrivacyPolicyContentRowChanged(this, new CloudAccountDA.PrivacyPolicyContentRowChangeEvent((CloudAccountDA.PrivacyPolicyContentRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.PrivacyPolicyContentRowChanging != null)
                {
                    this.PrivacyPolicyContentRowChanging(this, new CloudAccountDA.PrivacyPolicyContentRowChangeEvent((CloudAccountDA.PrivacyPolicyContentRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.PrivacyPolicyContentRowDeleted != null)
                {
                    this.PrivacyPolicyContentRowDeleted(this, new CloudAccountDA.PrivacyPolicyContentRowChangeEvent((CloudAccountDA.PrivacyPolicyContentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.PrivacyPolicyContentRowDeleting != null)
                {
                    this.PrivacyPolicyContentRowDeleting(this, new CloudAccountDA.PrivacyPolicyContentRowChangeEvent((CloudAccountDA.PrivacyPolicyContentRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePrivacyPolicyContentRow(CloudAccountDA.PrivacyPolicyContentRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.PrivacyPolicyContentRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.PrivacyPolicyContentRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PrivacyPolicyContentColumn
            {
                get
                {
                    return this.columnPrivacyPolicyContent;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PrivacyPolicyContentIDColumn
            {
                get
                {
                    return this.columnPrivacyPolicyContentID;
                }
            }
        }
        
        public class PrivacyPolicyContentRow : DataRow
        {
            private CloudAccountDA.PrivacyPolicyContentDataTable tablePrivacyPolicyContent;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PrivacyPolicyContentRow(DataRowBuilder rb) : base(rb)
            {
                this.tablePrivacyPolicyContent = (CloudAccountDA.PrivacyPolicyContentDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string PrivacyPolicyContent
            {
                get
                {
                    return (string) base[this.tablePrivacyPolicyContent.PrivacyPolicyContentColumn];
                }
                set
                {
                    base[this.tablePrivacyPolicyContent.PrivacyPolicyContentColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int PrivacyPolicyContentID
            {
                get
                {
                    return (int) base[this.tablePrivacyPolicyContent.PrivacyPolicyContentIDColumn];
                }
                set
                {
                    base[this.tablePrivacyPolicyContent.PrivacyPolicyContentIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PrivacyPolicyContentRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.PrivacyPolicyContentRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public PrivacyPolicyContentRowChangeEvent(CloudAccountDA.PrivacyPolicyContentRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.PrivacyPolicyContentRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PrivacyPolicyContentRowChangeEventHandler(object sender, CloudAccountDA.PrivacyPolicyContentRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ProjectMasterDataTable : TypedTableBase<CloudAccountDA.ProjectMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnBillingMethod;
            private DataColumn columnCanClient;
            private DataColumn columnClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnCompanyTeam;
            private DataColumn columnDeleted;
            private DataColumn columnFlatAmount;
            private DataColumn columnProjectDesc;
            private DataColumn columnProjectID;
            private DataColumn columnProjectManager;
            private DataColumn columnProjectName;
            private DataColumn columnProjectRate;
            private DataColumn columnTimeEstimate;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectMasterRowChangeEventHandler ProjectMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectMasterRowChangeEventHandler ProjectMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectMasterRowChangeEventHandler ProjectMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectMasterRowChangeEventHandler ProjectMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ProjectMasterDataTable()
            {
                base.TableName = "ProjectMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ProjectMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ProjectMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddProjectMasterRow(CloudAccountDA.ProjectMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ProjectMasterRow AddProjectMasterRow(int CompanyID, string ProjectName, string ProjectDesc, int ClientID, bool CanClient, int ProjectManager, string BillingMethod, decimal ProjectRate, decimal FlatAmount, decimal TimeEstimate, bool Active, bool Archived, bool Deleted, bool CompanyTeam)
            {
                CloudAccountDA.ProjectMasterRow row = (CloudAccountDA.ProjectMasterRow) base.NewRow();
                object[] objArray2 = new object[15];
                objArray2[1] = CompanyID;
                objArray2[2] = ProjectName;
                objArray2[3] = ProjectDesc;
                objArray2[4] = ClientID;
                objArray2[5] = CanClient;
                objArray2[6] = ProjectManager;
                objArray2[7] = BillingMethod;
                objArray2[8] = ProjectRate;
                objArray2[9] = FlatAmount;
                objArray2[10] = TimeEstimate;
                objArray2[11] = Active;
                objArray2[12] = Archived;
                objArray2[13] = Deleted;
                objArray2[14] = CompanyTeam;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ProjectMasterDataTable table = (CloudAccountDA.ProjectMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ProjectMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ProjectMasterRow FindByProjectID(int ProjectID)
            {
                return (CloudAccountDA.ProjectMasterRow) base.Rows.Find(new object[] { ProjectID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ProjectMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ProjectMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnProjectName = new DataColumn("ProjectName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnProjectDesc = new DataColumn("ProjectDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProjectDesc);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnCanClient = new DataColumn("CanClient", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCanClient);
                this.columnProjectManager = new DataColumn("ProjectManager", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProjectManager);
                this.columnBillingMethod = new DataColumn("BillingMethod", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBillingMethod);
                this.columnProjectRate = new DataColumn("ProjectRate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnProjectRate);
                this.columnFlatAmount = new DataColumn("FlatAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnFlatAmount);
                this.columnTimeEstimate = new DataColumn("TimeEstimate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTimeEstimate);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCompanyTeam = new DataColumn("CompanyTeam", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyTeam);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnProjectID }, true));
                this.columnProjectID.AutoIncrement = true;
                this.columnProjectID.AutoIncrementSeed = -1L;
                this.columnProjectID.AutoIncrementStep = -1L;
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnProjectName.MaxLength = 150;
                this.columnProjectDesc.MaxLength = 500;
                this.columnBillingMethod.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnProjectDesc = base.Columns["ProjectDesc"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnCanClient = base.Columns["CanClient"];
                this.columnProjectManager = base.Columns["ProjectManager"];
                this.columnBillingMethod = base.Columns["BillingMethod"];
                this.columnProjectRate = base.Columns["ProjectRate"];
                this.columnFlatAmount = base.Columns["FlatAmount"];
                this.columnTimeEstimate = base.Columns["TimeEstimate"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCompanyTeam = base.Columns["CompanyTeam"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ProjectMasterRow NewProjectMasterRow()
            {
                return (CloudAccountDA.ProjectMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ProjectMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ProjectMasterRowChanged != null)
                {
                    this.ProjectMasterRowChanged(this, new CloudAccountDA.ProjectMasterRowChangeEvent((CloudAccountDA.ProjectMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ProjectMasterRowChanging != null)
                {
                    this.ProjectMasterRowChanging(this, new CloudAccountDA.ProjectMasterRowChangeEvent((CloudAccountDA.ProjectMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ProjectMasterRowDeleted != null)
                {
                    this.ProjectMasterRowDeleted(this, new CloudAccountDA.ProjectMasterRowChangeEvent((CloudAccountDA.ProjectMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ProjectMasterRowDeleting != null)
                {
                    this.ProjectMasterRowDeleting(this, new CloudAccountDA.ProjectMasterRowChangeEvent((CloudAccountDA.ProjectMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveProjectMasterRow(CloudAccountDA.ProjectMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BillingMethodColumn
            {
                get
                {
                    return this.columnBillingMethod;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CanClientColumn
            {
                get
                {
                    return this.columnCanClient;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyTeamColumn
            {
                get
                {
                    return this.columnCompanyTeam;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FlatAmountColumn
            {
                get
                {
                    return this.columnFlatAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ProjectMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ProjectMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectDescColumn
            {
                get
                {
                    return this.columnProjectDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return this.columnProjectID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectManagerColumn
            {
                get
                {
                    return this.columnProjectManager;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectNameColumn
            {
                get
                {
                    return this.columnProjectName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectRateColumn
            {
                get
                {
                    return this.columnProjectRate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TimeEstimateColumn
            {
                get
                {
                    return this.columnTimeEstimate;
                }
            }
        }
        
        public class ProjectMasterRow : DataRow
        {
            private CloudAccountDA.ProjectMasterDataTable tableProjectMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ProjectMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableProjectMaster = (CloudAccountDA.ProjectMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableProjectMaster.ActiveColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableProjectMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBillingMethodNull()
            {
                return base.IsNull(this.tableProjectMaster.BillingMethodColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCanClientNull()
            {
                return base.IsNull(this.tableProjectMaster.CanClientColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClientIDNull()
            {
                return base.IsNull(this.tableProjectMaster.ClientIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCompanyTeamNull()
            {
                return base.IsNull(this.tableProjectMaster.CompanyTeamColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableProjectMaster.DeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFlatAmountNull()
            {
                return base.IsNull(this.tableProjectMaster.FlatAmountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectDescNull()
            {
                return base.IsNull(this.tableProjectMaster.ProjectDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsProjectManagerNull()
            {
                return base.IsNull(this.tableProjectMaster.ProjectManagerColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsProjectNameNull()
            {
                return base.IsNull(this.tableProjectMaster.ProjectNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsProjectRateNull()
            {
                return base.IsNull(this.tableProjectMaster.ProjectRateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTimeEstimateNull()
            {
                return base.IsNull(this.tableProjectMaster.TimeEstimateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableProjectMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetArchivedNull()
            {
                base[this.tableProjectMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBillingMethodNull()
            {
                base[this.tableProjectMaster.BillingMethodColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCanClientNull()
            {
                base[this.tableProjectMaster.CanClientColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClientIDNull()
            {
                base[this.tableProjectMaster.ClientIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompanyTeamNull()
            {
                base[this.tableProjectMaster.CompanyTeamColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDeletedNull()
            {
                base[this.tableProjectMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFlatAmountNull()
            {
                base[this.tableProjectMaster.FlatAmountColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectDescNull()
            {
                base[this.tableProjectMaster.ProjectDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectManagerNull()
            {
                base[this.tableProjectMaster.ProjectManagerColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectNameNull()
            {
                base[this.tableProjectMaster.ProjectNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectRateNull()
            {
                base[this.tableProjectMaster.ProjectRateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTimeEstimateNull()
            {
                base[this.tableProjectMaster.TimeEstimateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableProjectMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableProjectMaster.ActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableProjectMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableProjectMaster.ArchivedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string BillingMethod
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableProjectMaster.BillingMethodColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BillingMethod' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableProjectMaster.BillingMethodColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool CanClient
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableProjectMaster.CanClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CanClient' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableProjectMaster.CanClientColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ClientID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableProjectMaster.ClientIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ClientID' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableProjectMaster.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableProjectMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableProjectMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CompanyTeam
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableProjectMaster.CompanyTeamColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CompanyTeam' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableProjectMaster.CompanyTeamColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableProjectMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableProjectMaster.DeletedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal FlatAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableProjectMaster.FlatAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FlatAmount' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableProjectMaster.FlatAmountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ProjectDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableProjectMaster.ProjectDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ProjectDesc' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableProjectMaster.ProjectDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ProjectID
            {
                get
                {
                    return (int) base[this.tableProjectMaster.ProjectIDColumn];
                }
                set
                {
                    base[this.tableProjectMaster.ProjectIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ProjectManager
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableProjectMaster.ProjectManagerColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ProjectManager' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableProjectMaster.ProjectManagerColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ProjectName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableProjectMaster.ProjectNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ProjectName' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableProjectMaster.ProjectNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ProjectRate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableProjectMaster.ProjectRateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ProjectRate' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableProjectMaster.ProjectRateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal TimeEstimate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableProjectMaster.TimeEstimateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TimeEstimate' in table 'ProjectMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableProjectMaster.TimeEstimateColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ProjectMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ProjectMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ProjectMasterRowChangeEvent(CloudAccountDA.ProjectMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ProjectMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ProjectMasterRowChangeEventHandler(object sender, CloudAccountDA.ProjectMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ProjectTaskDetailDataTable : TypedTableBase<CloudAccountDA.ProjectTaskDetailRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnProjectID;
            private DataColumn columnProjectTaskID;
            private DataColumn columnTaskID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectTaskDetailRowChangeEventHandler ProjectTaskDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectTaskDetailRowChangeEventHandler ProjectTaskDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectTaskDetailRowChangeEventHandler ProjectTaskDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ProjectTaskDetailRowChangeEventHandler ProjectTaskDetailRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectTaskDetailDataTable()
            {
                base.TableName = "ProjectTaskDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProjectTaskDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ProjectTaskDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddProjectTaskDetailRow(CloudAccountDA.ProjectTaskDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ProjectTaskDetailRow AddProjectTaskDetailRow(int CompanyID, int ProjectID, int TaskID)
            {
                CloudAccountDA.ProjectTaskDetailRow row = (CloudAccountDA.ProjectTaskDetailRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = ProjectID;
                objArray2[3] = TaskID;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ProjectTaskDetailDataTable table = (CloudAccountDA.ProjectTaskDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ProjectTaskDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ProjectTaskDetailRow FindByProjectTaskID(int ProjectTaskID)
            {
                return (CloudAccountDA.ProjectTaskDetailRow) base.Rows.Find(new object[] { ProjectTaskID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ProjectTaskDetailRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ProjectTaskDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnProjectTaskID = new DataColumn("ProjectTaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProjectTaskID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnProjectTaskID }, true));
                this.columnProjectTaskID.AutoIncrement = true;
                this.columnProjectTaskID.AutoIncrementSeed = -1L;
                this.columnProjectTaskID.AutoIncrementStep = -1L;
                this.columnProjectTaskID.AllowDBNull = false;
                this.columnProjectTaskID.ReadOnly = true;
                this.columnProjectTaskID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
                this.columnTaskID.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnProjectTaskID = base.Columns["ProjectTaskID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnTaskID = base.Columns["TaskID"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ProjectTaskDetailRow NewProjectTaskDetailRow()
            {
                return (CloudAccountDA.ProjectTaskDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ProjectTaskDetailRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ProjectTaskDetailRowChanged != null)
                {
                    this.ProjectTaskDetailRowChanged(this, new CloudAccountDA.ProjectTaskDetailRowChangeEvent((CloudAccountDA.ProjectTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ProjectTaskDetailRowChanging != null)
                {
                    this.ProjectTaskDetailRowChanging(this, new CloudAccountDA.ProjectTaskDetailRowChangeEvent((CloudAccountDA.ProjectTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ProjectTaskDetailRowDeleted != null)
                {
                    this.ProjectTaskDetailRowDeleted(this, new CloudAccountDA.ProjectTaskDetailRowChangeEvent((CloudAccountDA.ProjectTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ProjectTaskDetailRowDeleting != null)
                {
                    this.ProjectTaskDetailRowDeleting(this, new CloudAccountDA.ProjectTaskDetailRowChangeEvent((CloudAccountDA.ProjectTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveProjectTaskDetailRow(CloudAccountDA.ProjectTaskDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ProjectTaskDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ProjectTaskDetailRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return this.columnProjectID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectTaskIDColumn
            {
                get
                {
                    return this.columnProjectTaskID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
        }
        
        public class ProjectTaskDetailRow : DataRow
        {
            private CloudAccountDA.ProjectTaskDetailDataTable tableProjectTaskDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProjectTaskDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableProjectTaskDetail = (CloudAccountDA.ProjectTaskDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableProjectTaskDetail.CompanyIDColumn];
                }
                set
                {
                    base[this.tableProjectTaskDetail.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ProjectID
            {
                get
                {
                    return (int) base[this.tableProjectTaskDetail.ProjectIDColumn];
                }
                set
                {
                    base[this.tableProjectTaskDetail.ProjectIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ProjectTaskID
            {
                get
                {
                    return (int) base[this.tableProjectTaskDetail.ProjectTaskIDColumn];
                }
                set
                {
                    base[this.tableProjectTaskDetail.ProjectTaskIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaskID
            {
                get
                {
                    return (int) base[this.tableProjectTaskDetail.TaskIDColumn];
                }
                set
                {
                    base[this.tableProjectTaskDetail.TaskIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ProjectTaskDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ProjectTaskDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ProjectTaskDetailRowChangeEvent(CloudAccountDA.ProjectTaskDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ProjectTaskDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ProjectTaskDetailRowChangeEventHandler(object sender, CloudAccountDA.ProjectTaskDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class RecurringItemDetailDataTable : TypedTableBase<CloudAccountDA.RecurringItemDetailRow>
        {
            private DataColumn columnItemDesc;
            private DataColumn columnItemID;
            private DataColumn columnQuantity;
            private DataColumn columnRecurringID;
            private DataColumn columnRecurringItemDetailID;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTotal;
            private DataColumn columnUnitCost;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringItemDetailRowChangeEventHandler RecurringItemDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringItemDetailRowChangeEventHandler RecurringItemDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringItemDetailRowChangeEventHandler RecurringItemDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringItemDetailRowChangeEventHandler RecurringItemDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public RecurringItemDetailDataTable()
            {
                base.TableName = "RecurringItemDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecurringItemDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected RecurringItemDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddRecurringItemDetailRow(CloudAccountDA.RecurringItemDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringItemDetailRow AddRecurringItemDetailRow(int RecurringID, int ItemID, string ItemDesc, decimal UnitCost, decimal Quantity, int Tax1, int Tax2, decimal Total)
            {
                CloudAccountDA.RecurringItemDetailRow row = (CloudAccountDA.RecurringItemDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = RecurringID;
                objArray2[2] = ItemID;
                objArray2[3] = ItemDesc;
                objArray2[4] = UnitCost;
                objArray2[5] = Quantity;
                objArray2[6] = Tax1;
                objArray2[7] = Tax2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.RecurringItemDetailDataTable table = (CloudAccountDA.RecurringItemDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.RecurringItemDetailDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.RecurringItemDetailRow FindByRecurringItemDetailID(int RecurringItemDetailID)
            {
                return (CloudAccountDA.RecurringItemDetailRow) base.Rows.Find(new object[] { RecurringItemDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.RecurringItemDetailRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "RecurringItemDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnRecurringItemDetailID = new DataColumn("RecurringItemDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringItemDetailID);
                this.columnRecurringID = new DataColumn("RecurringID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringID);
                this.columnItemID = new DataColumn("ItemID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnItemDesc = new DataColumn("ItemDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnItemDesc);
                this.columnUnitCost = new DataColumn("UnitCost", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUnitCost);
                this.columnQuantity = new DataColumn("Quantity", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnRecurringItemDetailID }, true));
                this.columnRecurringItemDetailID.AutoIncrement = true;
                this.columnRecurringItemDetailID.AutoIncrementSeed = -1L;
                this.columnRecurringItemDetailID.AutoIncrementStep = -1L;
                this.columnRecurringItemDetailID.AllowDBNull = false;
                this.columnRecurringItemDetailID.ReadOnly = true;
                this.columnRecurringItemDetailID.Unique = true;
                this.columnRecurringID.AllowDBNull = false;
                this.columnItemID.AllowDBNull = false;
                this.columnItemDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnRecurringItemDetailID = base.Columns["RecurringItemDetailID"];
                this.columnRecurringID = base.Columns["RecurringID"];
                this.columnItemID = base.Columns["ItemID"];
                this.columnItemDesc = base.Columns["ItemDesc"];
                this.columnUnitCost = base.Columns["UnitCost"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.RecurringItemDetailRow NewRecurringItemDetailRow()
            {
                return (CloudAccountDA.RecurringItemDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.RecurringItemDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.RecurringItemDetailRowChanged != null)
                {
                    this.RecurringItemDetailRowChanged(this, new CloudAccountDA.RecurringItemDetailRowChangeEvent((CloudAccountDA.RecurringItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.RecurringItemDetailRowChanging != null)
                {
                    this.RecurringItemDetailRowChanging(this, new CloudAccountDA.RecurringItemDetailRowChangeEvent((CloudAccountDA.RecurringItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.RecurringItemDetailRowDeleted != null)
                {
                    this.RecurringItemDetailRowDeleted(this, new CloudAccountDA.RecurringItemDetailRowChangeEvent((CloudAccountDA.RecurringItemDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.RecurringItemDetailRowDeleting != null)
                {
                    this.RecurringItemDetailRowDeleting(this, new CloudAccountDA.RecurringItemDetailRowChangeEvent((CloudAccountDA.RecurringItemDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRecurringItemDetailRow(CloudAccountDA.RecurringItemDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.RecurringItemDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.RecurringItemDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemDescColumn
            {
                get
                {
                    return this.columnItemDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemIDColumn
            {
                get
                {
                    return this.columnItemID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RecurringIDColumn
            {
                get
                {
                    return this.columnRecurringID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RecurringItemDetailIDColumn
            {
                get
                {
                    return this.columnRecurringItemDetailID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UnitCostColumn
            {
                get
                {
                    return this.columnUnitCost;
                }
            }
        }
        
        public class RecurringItemDetailRow : DataRow
        {
            private CloudAccountDA.RecurringItemDetailDataTable tableRecurringItemDetail;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal RecurringItemDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableRecurringItemDetail = (CloudAccountDA.RecurringItemDetailDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsItemDescNull()
            {
                return base.IsNull(this.tableRecurringItemDetail.ItemDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQuantityNull()
            {
                return base.IsNull(this.tableRecurringItemDetail.QuantityColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableRecurringItemDetail.Tax1Column);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableRecurringItemDetail.Tax2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableRecurringItemDetail.TotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnitCostNull()
            {
                return base.IsNull(this.tableRecurringItemDetail.UnitCostColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetItemDescNull()
            {
                base[this.tableRecurringItemDetail.ItemDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetQuantityNull()
            {
                base[this.tableRecurringItemDetail.QuantityColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTax1Null()
            {
                base[this.tableRecurringItemDetail.Tax1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax2Null()
            {
                base[this.tableRecurringItemDetail.Tax2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalNull()
            {
                base[this.tableRecurringItemDetail.TotalColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUnitCostNull()
            {
                base[this.tableRecurringItemDetail.UnitCostColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ItemDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringItemDetail.ItemDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ItemDesc' in table 'RecurringItemDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringItemDetail.ItemDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ItemID
            {
                get
                {
                    return (int) base[this.tableRecurringItemDetail.ItemIDColumn];
                }
                set
                {
                    base[this.tableRecurringItemDetail.ItemIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Quantity
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringItemDetail.QuantityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Quantity' in table 'RecurringItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringItemDetail.QuantityColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RecurringID
            {
                get
                {
                    return (int) base[this.tableRecurringItemDetail.RecurringIDColumn];
                }
                set
                {
                    base[this.tableRecurringItemDetail.RecurringIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RecurringItemDetailID
            {
                get
                {
                    return (int) base[this.tableRecurringItemDetail.RecurringItemDetailIDColumn];
                }
                set
                {
                    base[this.tableRecurringItemDetail.RecurringItemDetailIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableRecurringItemDetail.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'RecurringItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringItemDetail.Tax1Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableRecurringItemDetail.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'RecurringItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringItemDetail.Tax2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringItemDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'RecurringItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringItemDetail.TotalColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal UnitCost
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringItemDetail.UnitCostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UnitCost' in table 'RecurringItemDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringItemDetail.UnitCostColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RecurringItemDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.RecurringItemDetailRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public RecurringItemDetailRowChangeEvent(CloudAccountDA.RecurringItemDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.RecurringItemDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RecurringItemDetailRowChangeEventHandler(object sender, CloudAccountDA.RecurringItemDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class RecurringMasterDataTable : TypedTableBase<CloudAccountDA.RecurringMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnCurrencyID;
            private DataColumn columnDeleted;
            private DataColumn columnDiscount;
            private DataColumn columnDiscountAmount;
            private DataColumn columnHowManyInvoice;
            private DataColumn columnHowOften;
            private DataColumn columnNextDate;
            private DataColumn columnNotes;
            private DataColumn columnPONumber;
            private DataColumn columnProrateFirstInvoice;
            private DataColumn columnProrateFirstInvoiceDays;
            private DataColumn columnRecurringActive;
            private DataColumn columnRecurringDate;
            private DataColumn columnRecurringID;
            private DataColumn columnRecurringNumber;
            private DataColumn columnRecurringSchedule;
            private DataColumn columnRecurringStatus;
            private DataColumn columnRecurringTotal;
            private DataColumn columnRemainingInvoice;
            private DataColumn columnTerms;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringMasterRowChangeEventHandler RecurringMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringMasterRowChangeEventHandler RecurringMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringMasterRowChangeEventHandler RecurringMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringMasterRowChangeEventHandler RecurringMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecurringMasterDataTable()
            {
                base.TableName = "RecurringMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecurringMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected RecurringMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddRecurringMasterRow(CloudAccountDA.RecurringMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringMasterRow AddRecurringMasterRow(int CompanyID, DateTime RecurringSchedule, int HowOften, string HowManyInvoice, string RemainingInvoice, DateTime NextDate, int ClientID, int CurrencyID, string RecurringNumber, DateTime RecurringDate, string PONumber, decimal Discount, decimal DiscountAmount, bool ProrateFirstInvoice, int ProrateFirstInvoiceDays, bool RecurringActive, string Notes, string Terms, string RecurringStatus, decimal RecurringTotal, bool Active, bool Archived, bool Deleted)
            {
                CloudAccountDA.RecurringMasterRow row = (CloudAccountDA.RecurringMasterRow) base.NewRow();
                object[] objArray2 = new object[0x18];
                objArray2[1] = CompanyID;
                objArray2[2] = RecurringSchedule;
                objArray2[3] = HowOften;
                objArray2[4] = HowManyInvoice;
                objArray2[5] = RemainingInvoice;
                objArray2[6] = NextDate;
                objArray2[7] = ClientID;
                objArray2[8] = CurrencyID;
                objArray2[9] = RecurringNumber;
                objArray2[10] = RecurringDate;
                objArray2[11] = PONumber;
                objArray2[12] = Discount;
                objArray2[13] = DiscountAmount;
                objArray2[14] = ProrateFirstInvoice;
                objArray2[15] = ProrateFirstInvoiceDays;
                objArray2[0x10] = RecurringActive;
                objArray2[0x11] = Notes;
                objArray2[0x12] = Terms;
                objArray2[0x13] = RecurringStatus;
                objArray2[20] = RecurringTotal;
                objArray2[0x15] = Active;
                objArray2[0x16] = Archived;
                objArray2[0x17] = Deleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.RecurringMasterDataTable table = (CloudAccountDA.RecurringMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.RecurringMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringMasterRow FindByRecurringID(int RecurringID)
            {
                return (CloudAccountDA.RecurringMasterRow) base.Rows.Find(new object[] { RecurringID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.RecurringMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "RecurringMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnRecurringID = new DataColumn("RecurringID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnRecurringSchedule = new DataColumn("RecurringSchedule", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringSchedule);
                this.columnHowOften = new DataColumn("HowOften", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnHowOften);
                this.columnHowManyInvoice = new DataColumn("HowManyInvoice", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHowManyInvoice);
                this.columnRemainingInvoice = new DataColumn("RemainingInvoice", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRemainingInvoice);
                this.columnNextDate = new DataColumn("NextDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnNextDate);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCurrencyID);
                this.columnRecurringNumber = new DataColumn("RecurringNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringNumber);
                this.columnRecurringDate = new DataColumn("RecurringDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringDate);
                this.columnPONumber = new DataColumn("PONumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPONumber);
                this.columnDiscount = new DataColumn("Discount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnDiscountAmount = new DataColumn("DiscountAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscountAmount);
                this.columnProrateFirstInvoice = new DataColumn("ProrateFirstInvoice", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnProrateFirstInvoice);
                this.columnProrateFirstInvoiceDays = new DataColumn("ProrateFirstInvoiceDays", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProrateFirstInvoiceDays);
                this.columnRecurringActive = new DataColumn("RecurringActive", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringActive);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnTerms = new DataColumn("Terms", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTerms);
                this.columnRecurringStatus = new DataColumn("RecurringStatus", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringStatus);
                this.columnRecurringTotal = new DataColumn("RecurringTotal", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringTotal);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnRecurringID }, true));
                this.columnRecurringID.AutoIncrement = true;
                this.columnRecurringID.AutoIncrementSeed = -1L;
                this.columnRecurringID.AutoIncrementStep = -1L;
                this.columnRecurringID.AllowDBNull = false;
                this.columnRecurringID.ReadOnly = true;
                this.columnRecurringID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnHowManyInvoice.MaxLength = 10;
                this.columnRemainingInvoice.MaxLength = 10;
                this.columnClientID.AllowDBNull = false;
                this.columnRecurringNumber.MaxLength = 50;
                this.columnPONumber.MaxLength = 50;
                this.columnNotes.MaxLength = 0x7fffffff;
                this.columnTerms.MaxLength = 0x7fffffff;
                this.columnRecurringStatus.MaxLength = 50;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnRecurringID = base.Columns["RecurringID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnRecurringSchedule = base.Columns["RecurringSchedule"];
                this.columnHowOften = base.Columns["HowOften"];
                this.columnHowManyInvoice = base.Columns["HowManyInvoice"];
                this.columnRemainingInvoice = base.Columns["RemainingInvoice"];
                this.columnNextDate = base.Columns["NextDate"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnCurrencyID = base.Columns["CurrencyID"];
                this.columnRecurringNumber = base.Columns["RecurringNumber"];
                this.columnRecurringDate = base.Columns["RecurringDate"];
                this.columnPONumber = base.Columns["PONumber"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnDiscountAmount = base.Columns["DiscountAmount"];
                this.columnProrateFirstInvoice = base.Columns["ProrateFirstInvoice"];
                this.columnProrateFirstInvoiceDays = base.Columns["ProrateFirstInvoiceDays"];
                this.columnRecurringActive = base.Columns["RecurringActive"];
                this.columnNotes = base.Columns["Notes"];
                this.columnTerms = base.Columns["Terms"];
                this.columnRecurringStatus = base.Columns["RecurringStatus"];
                this.columnRecurringTotal = base.Columns["RecurringTotal"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringMasterRow NewRecurringMasterRow()
            {
                return (CloudAccountDA.RecurringMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.RecurringMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.RecurringMasterRowChanged != null)
                {
                    this.RecurringMasterRowChanged(this, new CloudAccountDA.RecurringMasterRowChangeEvent((CloudAccountDA.RecurringMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.RecurringMasterRowChanging != null)
                {
                    this.RecurringMasterRowChanging(this, new CloudAccountDA.RecurringMasterRowChangeEvent((CloudAccountDA.RecurringMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.RecurringMasterRowDeleted != null)
                {
                    this.RecurringMasterRowDeleted(this, new CloudAccountDA.RecurringMasterRowChangeEvent((CloudAccountDA.RecurringMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.RecurringMasterRowDeleting != null)
                {
                    this.RecurringMasterRowDeleting(this, new CloudAccountDA.RecurringMasterRowChangeEvent((CloudAccountDA.RecurringMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRecurringMasterRow(CloudAccountDA.RecurringMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CurrencyIDColumn
            {
                get
                {
                    return this.columnCurrencyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DiscountAmountColumn
            {
                get
                {
                    return this.columnDiscountAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DiscountColumn
            {
                get
                {
                    return this.columnDiscount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HowManyInvoiceColumn
            {
                get
                {
                    return this.columnHowManyInvoice;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HowOftenColumn
            {
                get
                {
                    return this.columnHowOften;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.RecurringMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NextDateColumn
            {
                get
                {
                    return this.columnNextDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PONumberColumn
            {
                get
                {
                    return this.columnPONumber;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ProrateFirstInvoiceColumn
            {
                get
                {
                    return this.columnProrateFirstInvoice;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProrateFirstInvoiceDaysColumn
            {
                get
                {
                    return this.columnProrateFirstInvoiceDays;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RecurringActiveColumn
            {
                get
                {
                    return this.columnRecurringActive;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RecurringDateColumn
            {
                get
                {
                    return this.columnRecurringDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RecurringIDColumn
            {
                get
                {
                    return this.columnRecurringID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RecurringNumberColumn
            {
                get
                {
                    return this.columnRecurringNumber;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RecurringScheduleColumn
            {
                get
                {
                    return this.columnRecurringSchedule;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RecurringStatusColumn
            {
                get
                {
                    return this.columnRecurringStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RecurringTotalColumn
            {
                get
                {
                    return this.columnRecurringTotal;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RemainingInvoiceColumn
            {
                get
                {
                    return this.columnRemainingInvoice;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TermsColumn
            {
                get
                {
                    return this.columnTerms;
                }
            }
        }
        
        public class RecurringMasterRow : DataRow
        {
            private CloudAccountDA.RecurringMasterDataTable tableRecurringMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecurringMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableRecurringMaster = (CloudAccountDA.RecurringMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableRecurringMaster.ActiveColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableRecurringMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCurrencyIDNull()
            {
                return base.IsNull(this.tableRecurringMaster.CurrencyIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableRecurringMaster.DeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDiscountAmountNull()
            {
                return base.IsNull(this.tableRecurringMaster.DiscountAmountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDiscountNull()
            {
                return base.IsNull(this.tableRecurringMaster.DiscountColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHowManyInvoiceNull()
            {
                return base.IsNull(this.tableRecurringMaster.HowManyInvoiceColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHowOftenNull()
            {
                return base.IsNull(this.tableRecurringMaster.HowOftenColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNextDateNull()
            {
                return base.IsNull(this.tableRecurringMaster.NextDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableRecurringMaster.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPONumberNull()
            {
                return base.IsNull(this.tableRecurringMaster.PONumberColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProrateFirstInvoiceDaysNull()
            {
                return base.IsNull(this.tableRecurringMaster.ProrateFirstInvoiceDaysColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsProrateFirstInvoiceNull()
            {
                return base.IsNull(this.tableRecurringMaster.ProrateFirstInvoiceColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRecurringActiveNull()
            {
                return base.IsNull(this.tableRecurringMaster.RecurringActiveColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurringDateNull()
            {
                return base.IsNull(this.tableRecurringMaster.RecurringDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurringNumberNull()
            {
                return base.IsNull(this.tableRecurringMaster.RecurringNumberColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRecurringScheduleNull()
            {
                return base.IsNull(this.tableRecurringMaster.RecurringScheduleColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRecurringStatusNull()
            {
                return base.IsNull(this.tableRecurringMaster.RecurringStatusColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurringTotalNull()
            {
                return base.IsNull(this.tableRecurringMaster.RecurringTotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRemainingInvoiceNull()
            {
                return base.IsNull(this.tableRecurringMaster.RemainingInvoiceColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTermsNull()
            {
                return base.IsNull(this.tableRecurringMaster.TermsColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableRecurringMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetArchivedNull()
            {
                base[this.tableRecurringMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCurrencyIDNull()
            {
                base[this.tableRecurringMaster.CurrencyIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeletedNull()
            {
                base[this.tableRecurringMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDiscountAmountNull()
            {
                base[this.tableRecurringMaster.DiscountAmountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDiscountNull()
            {
                base[this.tableRecurringMaster.DiscountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHowManyInvoiceNull()
            {
                base[this.tableRecurringMaster.HowManyInvoiceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHowOftenNull()
            {
                base[this.tableRecurringMaster.HowOftenColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNextDateNull()
            {
                base[this.tableRecurringMaster.NextDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableRecurringMaster.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPONumberNull()
            {
                base[this.tableRecurringMaster.PONumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProrateFirstInvoiceDaysNull()
            {
                base[this.tableRecurringMaster.ProrateFirstInvoiceDaysColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetProrateFirstInvoiceNull()
            {
                base[this.tableRecurringMaster.ProrateFirstInvoiceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurringActiveNull()
            {
                base[this.tableRecurringMaster.RecurringActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRecurringDateNull()
            {
                base[this.tableRecurringMaster.RecurringDateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurringNumberNull()
            {
                base[this.tableRecurringMaster.RecurringNumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurringScheduleNull()
            {
                base[this.tableRecurringMaster.RecurringScheduleColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurringStatusNull()
            {
                base[this.tableRecurringMaster.RecurringStatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRecurringTotalNull()
            {
                base[this.tableRecurringMaster.RecurringTotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRemainingInvoiceNull()
            {
                base[this.tableRecurringMaster.RemainingInvoiceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTermsNull()
            {
                base[this.tableRecurringMaster.TermsColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableRecurringMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableRecurringMaster.ActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableRecurringMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableRecurringMaster.ArchivedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ClientID
            {
                get
                {
                    return (int) base[this.tableRecurringMaster.ClientIDColumn];
                }
                set
                {
                    base[this.tableRecurringMaster.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableRecurringMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableRecurringMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CurrencyID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableRecurringMaster.CurrencyIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CurrencyID' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringMaster.CurrencyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableRecurringMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableRecurringMaster.DeletedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Discount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringMaster.DiscountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Discount' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringMaster.DiscountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DiscountAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringMaster.DiscountAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'DiscountAmount' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringMaster.DiscountAmountColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string HowManyInvoice
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringMaster.HowManyInvoiceColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HowManyInvoice' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringMaster.HowManyInvoiceColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int HowOften
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableRecurringMaster.HowOftenColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HowOften' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringMaster.HowOftenColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime NextDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableRecurringMaster.NextDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'NextDate' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableRecurringMaster.NextDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringMaster.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PONumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringMaster.PONumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PONumber' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringMaster.PONumberColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ProrateFirstInvoice
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableRecurringMaster.ProrateFirstInvoiceColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ProrateFirstInvoice' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableRecurringMaster.ProrateFirstInvoiceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ProrateFirstInvoiceDays
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableRecurringMaster.ProrateFirstInvoiceDaysColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ProrateFirstInvoiceDays' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringMaster.ProrateFirstInvoiceDaysColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool RecurringActive
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableRecurringMaster.RecurringActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringActive' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableRecurringMaster.RecurringActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime RecurringDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableRecurringMaster.RecurringDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringDate' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableRecurringMaster.RecurringDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int RecurringID
            {
                get
                {
                    return (int) base[this.tableRecurringMaster.RecurringIDColumn];
                }
                set
                {
                    base[this.tableRecurringMaster.RecurringIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RecurringNumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringMaster.RecurringNumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringNumber' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringMaster.RecurringNumberColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime RecurringSchedule
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableRecurringMaster.RecurringScheduleColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringSchedule' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableRecurringMaster.RecurringScheduleColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string RecurringStatus
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringMaster.RecurringStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringStatus' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringMaster.RecurringStatusColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal RecurringTotal
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringMaster.RecurringTotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RecurringTotal' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringMaster.RecurringTotalColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RemainingInvoice
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringMaster.RemainingInvoiceColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RemainingInvoice' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringMaster.RemainingInvoiceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Terms
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringMaster.TermsColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Terms' in table 'RecurringMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringMaster.TermsColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RecurringMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.RecurringMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public RecurringMasterRowChangeEvent(CloudAccountDA.RecurringMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RecurringMasterRowChangeEventHandler(object sender, CloudAccountDA.RecurringMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class RecurringTaskDetailDataTable : TypedTableBase<CloudAccountDA.RecurringTaskDetailRow>
        {
            private DataColumn columnHours;
            private DataColumn columnRate;
            private DataColumn columnRecurringID;
            private DataColumn columnRecurringTaskDetailID;
            private DataColumn columnTaskDesc;
            private DataColumn columnTaskID;
            private DataColumn columnTax1;
            private DataColumn columnTax2;
            private DataColumn columnTotal;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringTaskDetailRowChangeEventHandler RecurringTaskDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringTaskDetailRowChangeEventHandler RecurringTaskDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringTaskDetailRowChangeEventHandler RecurringTaskDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RecurringTaskDetailRowChangeEventHandler RecurringTaskDetailRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public RecurringTaskDetailDataTable()
            {
                base.TableName = "RecurringTaskDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecurringTaskDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected RecurringTaskDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRecurringTaskDetailRow(CloudAccountDA.RecurringTaskDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.RecurringTaskDetailRow AddRecurringTaskDetailRow(int RecurringID, int TaskID, string TaskDesc, decimal Rate, decimal Hours, int Tax1, int Tax2, decimal Total)
            {
                CloudAccountDA.RecurringTaskDetailRow row = (CloudAccountDA.RecurringTaskDetailRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = RecurringID;
                objArray2[2] = TaskID;
                objArray2[3] = TaskDesc;
                objArray2[4] = Rate;
                objArray2[5] = Hours;
                objArray2[6] = Tax1;
                objArray2[7] = Tax2;
                objArray2[8] = Total;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.RecurringTaskDetailDataTable table = (CloudAccountDA.RecurringTaskDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.RecurringTaskDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringTaskDetailRow FindByRecurringTaskDetailID(int RecurringTaskDetailID)
            {
                return (CloudAccountDA.RecurringTaskDetailRow) base.Rows.Find(new object[] { RecurringTaskDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.RecurringTaskDetailRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "RecurringTaskDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnRecurringTaskDetailID = new DataColumn("RecurringTaskDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringTaskDetailID);
                this.columnRecurringID = new DataColumn("RecurringID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnRecurringID);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnTaskDesc = new DataColumn("TaskDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaskDesc);
                this.columnRate = new DataColumn("Rate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnTax1 = new DataColumn("Tax1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax1);
                this.columnTax2 = new DataColumn("Tax2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax2);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnRecurringTaskDetailID }, true));
                this.columnRecurringTaskDetailID.AutoIncrement = true;
                this.columnRecurringTaskDetailID.AutoIncrementSeed = -1L;
                this.columnRecurringTaskDetailID.AutoIncrementStep = -1L;
                this.columnRecurringTaskDetailID.AllowDBNull = false;
                this.columnRecurringTaskDetailID.ReadOnly = true;
                this.columnRecurringTaskDetailID.Unique = true;
                this.columnRecurringID.AllowDBNull = false;
                this.columnTaskID.AllowDBNull = false;
                this.columnTaskDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnRecurringTaskDetailID = base.Columns["RecurringTaskDetailID"];
                this.columnRecurringID = base.Columns["RecurringID"];
                this.columnTaskID = base.Columns["TaskID"];
                this.columnTaskDesc = base.Columns["TaskDesc"];
                this.columnRate = base.Columns["Rate"];
                this.columnHours = base.Columns["Hours"];
                this.columnTax1 = base.Columns["Tax1"];
                this.columnTax2 = base.Columns["Tax2"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringTaskDetailRow NewRecurringTaskDetailRow()
            {
                return (CloudAccountDA.RecurringTaskDetailRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.RecurringTaskDetailRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.RecurringTaskDetailRowChanged != null)
                {
                    this.RecurringTaskDetailRowChanged(this, new CloudAccountDA.RecurringTaskDetailRowChangeEvent((CloudAccountDA.RecurringTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.RecurringTaskDetailRowChanging != null)
                {
                    this.RecurringTaskDetailRowChanging(this, new CloudAccountDA.RecurringTaskDetailRowChangeEvent((CloudAccountDA.RecurringTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.RecurringTaskDetailRowDeleted != null)
                {
                    this.RecurringTaskDetailRowDeleted(this, new CloudAccountDA.RecurringTaskDetailRowChangeEvent((CloudAccountDA.RecurringTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.RecurringTaskDetailRowDeleting != null)
                {
                    this.RecurringTaskDetailRowDeleting(this, new CloudAccountDA.RecurringTaskDetailRowChangeEvent((CloudAccountDA.RecurringTaskDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveRecurringTaskDetailRow(CloudAccountDA.RecurringTaskDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringTaskDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.RecurringTaskDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RateColumn
            {
                get
                {
                    return this.columnRate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RecurringIDColumn
            {
                get
                {
                    return this.columnRecurringID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RecurringTaskDetailIDColumn
            {
                get
                {
                    return this.columnRecurringTaskDetailID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskDescColumn
            {
                get
                {
                    return this.columnTaskDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Tax1Column
            {
                get
                {
                    return this.columnTax1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax2Column
            {
                get
                {
                    return this.columnTax2;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
        }
        
        public class RecurringTaskDetailRow : DataRow
        {
            private CloudAccountDA.RecurringTaskDetailDataTable tableRecurringTaskDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecurringTaskDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableRecurringTaskDetail = (CloudAccountDA.RecurringTaskDetailDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableRecurringTaskDetail.HoursColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRateNull()
            {
                return base.IsNull(this.tableRecurringTaskDetail.RateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaskDescNull()
            {
                return base.IsNull(this.tableRecurringTaskDetail.TaskDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTax1Null()
            {
                return base.IsNull(this.tableRecurringTaskDetail.Tax1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax2Null()
            {
                return base.IsNull(this.tableRecurringTaskDetail.Tax2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableRecurringTaskDetail.TotalColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableRecurringTaskDetail.HoursColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRateNull()
            {
                base[this.tableRecurringTaskDetail.RateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaskDescNull()
            {
                base[this.tableRecurringTaskDetail.TaskDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax1Null()
            {
                base[this.tableRecurringTaskDetail.Tax1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax2Null()
            {
                base[this.tableRecurringTaskDetail.Tax2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalNull()
            {
                base[this.tableRecurringTaskDetail.TotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringTaskDetail.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'RecurringTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringTaskDetail.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Rate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringTaskDetail.RateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Rate' in table 'RecurringTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringTaskDetail.RateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RecurringID
            {
                get
                {
                    return (int) base[this.tableRecurringTaskDetail.RecurringIDColumn];
                }
                set
                {
                    base[this.tableRecurringTaskDetail.RecurringIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int RecurringTaskDetailID
            {
                get
                {
                    return (int) base[this.tableRecurringTaskDetail.RecurringTaskDetailIDColumn];
                }
                set
                {
                    base[this.tableRecurringTaskDetail.RecurringTaskDetailIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TaskDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRecurringTaskDetail.TaskDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaskDesc' in table 'RecurringTaskDetail' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRecurringTaskDetail.TaskDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaskID
            {
                get
                {
                    return (int) base[this.tableRecurringTaskDetail.TaskIDColumn];
                }
                set
                {
                    base[this.tableRecurringTaskDetail.TaskIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableRecurringTaskDetail.Tax1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax1' in table 'RecurringTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringTaskDetail.Tax1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Tax2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableRecurringTaskDetail.Tax2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax2' in table 'RecurringTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringTaskDetail.Tax2Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableRecurringTaskDetail.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'RecurringTaskDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableRecurringTaskDetail.TotalColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RecurringTaskDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.RecurringTaskDetailRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecurringTaskDetailRowChangeEvent(CloudAccountDA.RecurringTaskDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RecurringTaskDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RecurringTaskDetailRowChangeEventHandler(object sender, CloudAccountDA.RecurringTaskDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportEstimatedBillingClientDataTable : TypedTableBase<CloudAccountDA.ReportEstimatedBillingClientRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnDate;
            private DataColumn columnEstimated_Billing;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnProject;
            private DataColumn columnTask;
            private DataColumn columnTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingClientRowChangeEventHandler ReportEstimatedBillingClientRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingClientRowChangeEventHandler ReportEstimatedBillingClientRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingClientRowChangeEventHandler ReportEstimatedBillingClientRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingClientRowChangeEventHandler ReportEstimatedBillingClientRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportEstimatedBillingClientDataTable()
            {
                base.TableName = "ReportEstimatedBillingClient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportEstimatedBillingClientDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportEstimatedBillingClientDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportEstimatedBillingClientRow(CloudAccountDA.ReportEstimatedBillingClientRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportEstimatedBillingClientRow AddReportEstimatedBillingClientRow(string Date, string Team, string Project, string Task, string Notes, string Billed, decimal Hours, decimal Estimated_Billing)
            {
                CloudAccountDA.ReportEstimatedBillingClientRow row = (CloudAccountDA.ReportEstimatedBillingClientRow) base.NewRow();
                row.ItemArray = new object[] { Date, Team, Project, Task, Notes, Billed, Hours, Estimated_Billing };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportEstimatedBillingClientDataTable table = (CloudAccountDA.ReportEstimatedBillingClientDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportEstimatedBillingClientDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportEstimatedBillingClientRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportEstimatedBillingClientDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTeam = new DataColumn("Team", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnProject = new DataColumn("Project", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnTask = new DataColumn("Task", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTask);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnEstimated_Billing = new DataColumn("Estimated Billing", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnEstimated_Billing);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnTeam.ReadOnly = true;
                this.columnTeam.MaxLength = 100;
                this.columnProject.MaxLength = 150;
                this.columnTask.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
                this.columnEstimated_Billing.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnTeam = base.Columns["Team"];
                this.columnProject = base.Columns["Project"];
                this.columnTask = base.Columns["Task"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
                this.columnEstimated_Billing = base.Columns["Estimated Billing"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportEstimatedBillingClientRow NewReportEstimatedBillingClientRow()
            {
                return (CloudAccountDA.ReportEstimatedBillingClientRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportEstimatedBillingClientRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportEstimatedBillingClientRowChanged != null)
                {
                    this.ReportEstimatedBillingClientRowChanged(this, new CloudAccountDA.ReportEstimatedBillingClientRowChangeEvent((CloudAccountDA.ReportEstimatedBillingClientRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportEstimatedBillingClientRowChanging != null)
                {
                    this.ReportEstimatedBillingClientRowChanging(this, new CloudAccountDA.ReportEstimatedBillingClientRowChangeEvent((CloudAccountDA.ReportEstimatedBillingClientRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportEstimatedBillingClientRowDeleted != null)
                {
                    this.ReportEstimatedBillingClientRowDeleted(this, new CloudAccountDA.ReportEstimatedBillingClientRowChangeEvent((CloudAccountDA.ReportEstimatedBillingClientRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportEstimatedBillingClientRowDeleting != null)
                {
                    this.ReportEstimatedBillingClientRowDeleting(this, new CloudAccountDA.ReportEstimatedBillingClientRowChangeEvent((CloudAccountDA.ReportEstimatedBillingClientRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportEstimatedBillingClientRow(CloudAccountDA.ReportEstimatedBillingClientRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Estimated_BillingColumn
            {
                get
                {
                    return this.columnEstimated_Billing;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingClientRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportEstimatedBillingClientRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectColumn
            {
                get
                {
                    return this.columnProject;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskColumn
            {
                get
                {
                    return this.columnTask;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }
        }
        
        public class ReportEstimatedBillingClientRow : DataRow
        {
            private CloudAccountDA.ReportEstimatedBillingClientDataTable tableReportEstimatedBillingClient;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportEstimatedBillingClientRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportEstimatedBillingClient = (CloudAccountDA.ReportEstimatedBillingClientDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.BilledColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.DateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEstimated_BillingNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.Estimated_BillingColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsProjectNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.ProjectColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.TaskColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTeamNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingClient.TeamColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBilledNull()
            {
                base[this.tableReportEstimatedBillingClient.BilledColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDateNull()
            {
                base[this.tableReportEstimatedBillingClient.DateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimated_BillingNull()
            {
                base[this.tableReportEstimatedBillingClient.Estimated_BillingColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHoursNull()
            {
                base[this.tableReportEstimatedBillingClient.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableReportEstimatedBillingClient.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetProjectNull()
            {
                base[this.tableReportEstimatedBillingClient.ProjectColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaskNull()
            {
                base[this.tableReportEstimatedBillingClient.TaskColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeamNull()
            {
                base[this.tableReportEstimatedBillingClient.TeamColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingClient.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.BilledColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingClient.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.DateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Estimated_Billing
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingClient.Estimated_BillingColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Estimated Billing' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.Estimated_BillingColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingClient.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.HoursColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingClient.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Project
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingClient.ProjectColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Project' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.ProjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Task
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingClient.TaskColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Task' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.TaskColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingClient.TeamColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Team' in table 'ReportEstimatedBillingClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingClient.TeamColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportEstimatedBillingClientRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportEstimatedBillingClientRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportEstimatedBillingClientRowChangeEvent(CloudAccountDA.ReportEstimatedBillingClientRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingClientRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportEstimatedBillingClientRowChangeEventHandler(object sender, CloudAccountDA.ReportEstimatedBillingClientRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportEstimatedBillingProjectDataTable : TypedTableBase<CloudAccountDA.ReportEstimatedBillingProjectRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnClient;
            private DataColumn columnDate;
            private DataColumn columnEstimated_Billing;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnTask;
            private DataColumn columnTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingProjectRowChangeEventHandler ReportEstimatedBillingProjectRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingProjectRowChangeEventHandler ReportEstimatedBillingProjectRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingProjectRowChangeEventHandler ReportEstimatedBillingProjectRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingProjectRowChangeEventHandler ReportEstimatedBillingProjectRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportEstimatedBillingProjectDataTable()
            {
                base.TableName = "ReportEstimatedBillingProject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportEstimatedBillingProjectDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportEstimatedBillingProjectDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportEstimatedBillingProjectRow(CloudAccountDA.ReportEstimatedBillingProjectRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingProjectRow AddReportEstimatedBillingProjectRow(string Date, string Team, string Client, string Task, string Notes, string Billed, decimal Hours, decimal Estimated_Billing)
            {
                CloudAccountDA.ReportEstimatedBillingProjectRow row = (CloudAccountDA.ReportEstimatedBillingProjectRow) base.NewRow();
                row.ItemArray = new object[] { Date, Team, Client, Task, Notes, Billed, Hours, Estimated_Billing };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportEstimatedBillingProjectDataTable table = (CloudAccountDA.ReportEstimatedBillingProjectDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportEstimatedBillingProjectDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportEstimatedBillingProjectRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportEstimatedBillingProjectDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTeam = new DataColumn("Team", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnClient = new DataColumn("Client", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnTask = new DataColumn("Task", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTask);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnEstimated_Billing = new DataColumn("Estimated Billing", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnEstimated_Billing);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnTeam.ReadOnly = true;
                this.columnTeam.MaxLength = 100;
                this.columnClient.ReadOnly = true;
                this.columnClient.MaxLength = 200;
                this.columnTask.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
                this.columnEstimated_Billing.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnTeam = base.Columns["Team"];
                this.columnClient = base.Columns["Client"];
                this.columnTask = base.Columns["Task"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
                this.columnEstimated_Billing = base.Columns["Estimated Billing"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingProjectRow NewReportEstimatedBillingProjectRow()
            {
                return (CloudAccountDA.ReportEstimatedBillingProjectRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportEstimatedBillingProjectRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportEstimatedBillingProjectRowChanged != null)
                {
                    this.ReportEstimatedBillingProjectRowChanged(this, new CloudAccountDA.ReportEstimatedBillingProjectRowChangeEvent((CloudAccountDA.ReportEstimatedBillingProjectRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportEstimatedBillingProjectRowChanging != null)
                {
                    this.ReportEstimatedBillingProjectRowChanging(this, new CloudAccountDA.ReportEstimatedBillingProjectRowChangeEvent((CloudAccountDA.ReportEstimatedBillingProjectRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportEstimatedBillingProjectRowDeleted != null)
                {
                    this.ReportEstimatedBillingProjectRowDeleted(this, new CloudAccountDA.ReportEstimatedBillingProjectRowChangeEvent((CloudAccountDA.ReportEstimatedBillingProjectRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportEstimatedBillingProjectRowDeleting != null)
                {
                    this.ReportEstimatedBillingProjectRowDeleting(this, new CloudAccountDA.ReportEstimatedBillingProjectRowChangeEvent((CloudAccountDA.ReportEstimatedBillingProjectRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportEstimatedBillingProjectRow(CloudAccountDA.ReportEstimatedBillingProjectRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientColumn
            {
                get
                {
                    return this.columnClient;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Estimated_BillingColumn
            {
                get
                {
                    return this.columnEstimated_Billing;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingProjectRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportEstimatedBillingProjectRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskColumn
            {
                get
                {
                    return this.columnTask;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }
        }
        
        public class ReportEstimatedBillingProjectRow : DataRow
        {
            private CloudAccountDA.ReportEstimatedBillingProjectDataTable tableReportEstimatedBillingProject;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportEstimatedBillingProjectRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportEstimatedBillingProject = (CloudAccountDA.ReportEstimatedBillingProjectDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.BilledColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClientNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.ClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.DateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEstimated_BillingNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.Estimated_BillingColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.HoursColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaskNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.TaskColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeamNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingProject.TeamColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBilledNull()
            {
                base[this.tableReportEstimatedBillingProject.BilledColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClientNull()
            {
                base[this.tableReportEstimatedBillingProject.ClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDateNull()
            {
                base[this.tableReportEstimatedBillingProject.DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEstimated_BillingNull()
            {
                base[this.tableReportEstimatedBillingProject.Estimated_BillingColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHoursNull()
            {
                base[this.tableReportEstimatedBillingProject.HoursColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tableReportEstimatedBillingProject.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaskNull()
            {
                base[this.tableReportEstimatedBillingProject.TaskColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeamNull()
            {
                base[this.tableReportEstimatedBillingProject.TeamColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingProject.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.BilledColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Client
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingProject.ClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.ClientColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingProject.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Estimated_Billing
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingProject.Estimated_BillingColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Estimated Billing' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.Estimated_BillingColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingProject.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingProject.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Task
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingProject.TaskColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Task' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.TaskColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Team
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingProject.TeamColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Team' in table 'ReportEstimatedBillingProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingProject.TeamColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportEstimatedBillingProjectRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportEstimatedBillingProjectRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportEstimatedBillingProjectRowChangeEvent(CloudAccountDA.ReportEstimatedBillingProjectRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingProjectRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportEstimatedBillingProjectRowChangeEventHandler(object sender, CloudAccountDA.ReportEstimatedBillingProjectRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportEstimatedBillingTaskDataTable : TypedTableBase<CloudAccountDA.ReportEstimatedBillingTaskRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnClient;
            private DataColumn columnDate;
            private DataColumn columnEstimated_Billing;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnProject;
            private DataColumn columnTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTaskRowChangeEventHandler ReportEstimatedBillingTaskRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTaskRowChangeEventHandler ReportEstimatedBillingTaskRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTaskRowChangeEventHandler ReportEstimatedBillingTaskRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTaskRowChangeEventHandler ReportEstimatedBillingTaskRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportEstimatedBillingTaskDataTable()
            {
                base.TableName = "ReportEstimatedBillingTask";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportEstimatedBillingTaskDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportEstimatedBillingTaskDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportEstimatedBillingTaskRow(CloudAccountDA.ReportEstimatedBillingTaskRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportEstimatedBillingTaskRow AddReportEstimatedBillingTaskRow(string Date, string Team, string Client, string Project, string Notes, string Billed, decimal Hours, decimal Estimated_Billing)
            {
                CloudAccountDA.ReportEstimatedBillingTaskRow row = (CloudAccountDA.ReportEstimatedBillingTaskRow) base.NewRow();
                row.ItemArray = new object[] { Date, Team, Client, Project, Notes, Billed, Hours, Estimated_Billing };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportEstimatedBillingTaskDataTable table = (CloudAccountDA.ReportEstimatedBillingTaskDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportEstimatedBillingTaskDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportEstimatedBillingTaskRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportEstimatedBillingTaskDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTeam = new DataColumn("Team", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnClient = new DataColumn("Client", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnProject = new DataColumn("Project", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnEstimated_Billing = new DataColumn("Estimated Billing", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnEstimated_Billing);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnTeam.ReadOnly = true;
                this.columnTeam.MaxLength = 100;
                this.columnClient.ReadOnly = true;
                this.columnClient.MaxLength = 200;
                this.columnProject.MaxLength = 150;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
                this.columnEstimated_Billing.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnTeam = base.Columns["Team"];
                this.columnClient = base.Columns["Client"];
                this.columnProject = base.Columns["Project"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
                this.columnEstimated_Billing = base.Columns["Estimated Billing"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingTaskRow NewReportEstimatedBillingTaskRow()
            {
                return (CloudAccountDA.ReportEstimatedBillingTaskRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportEstimatedBillingTaskRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportEstimatedBillingTaskRowChanged != null)
                {
                    this.ReportEstimatedBillingTaskRowChanged(this, new CloudAccountDA.ReportEstimatedBillingTaskRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTaskRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportEstimatedBillingTaskRowChanging != null)
                {
                    this.ReportEstimatedBillingTaskRowChanging(this, new CloudAccountDA.ReportEstimatedBillingTaskRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTaskRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportEstimatedBillingTaskRowDeleted != null)
                {
                    this.ReportEstimatedBillingTaskRowDeleted(this, new CloudAccountDA.ReportEstimatedBillingTaskRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTaskRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportEstimatedBillingTaskRowDeleting != null)
                {
                    this.ReportEstimatedBillingTaskRowDeleting(this, new CloudAccountDA.ReportEstimatedBillingTaskRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTaskRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportEstimatedBillingTaskRow(CloudAccountDA.ReportEstimatedBillingTaskRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientColumn
            {
                get
                {
                    return this.columnClient;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Estimated_BillingColumn
            {
                get
                {
                    return this.columnEstimated_Billing;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportEstimatedBillingTaskRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportEstimatedBillingTaskRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ProjectColumn
            {
                get
                {
                    return this.columnProject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }
        }
        
        public class ReportEstimatedBillingTaskRow : DataRow
        {
            private CloudAccountDA.ReportEstimatedBillingTaskDataTable tableReportEstimatedBillingTask;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportEstimatedBillingTaskRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportEstimatedBillingTask = (CloudAccountDA.ReportEstimatedBillingTaskDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.BilledColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClientNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.ClientColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.DateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEstimated_BillingNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.Estimated_BillingColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.HoursColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsProjectNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.ProjectColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeamNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTask.TeamColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBilledNull()
            {
                base[this.tableReportEstimatedBillingTask.BilledColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClientNull()
            {
                base[this.tableReportEstimatedBillingTask.ClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDateNull()
            {
                base[this.tableReportEstimatedBillingTask.DateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEstimated_BillingNull()
            {
                base[this.tableReportEstimatedBillingTask.Estimated_BillingColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableReportEstimatedBillingTask.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableReportEstimatedBillingTask.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetProjectNull()
            {
                base[this.tableReportEstimatedBillingTask.ProjectColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTeamNull()
            {
                base[this.tableReportEstimatedBillingTask.TeamColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTask.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.BilledColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Client
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTask.ClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.ClientColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTask.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Estimated_Billing
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingTask.Estimated_BillingColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Estimated Billing' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.Estimated_BillingColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingTask.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTask.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Project
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTask.ProjectColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Project' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.ProjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Team
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTask.TeamColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Team' in table 'ReportEstimatedBillingTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTask.TeamColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportEstimatedBillingTaskRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportEstimatedBillingTaskRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportEstimatedBillingTaskRowChangeEvent(CloudAccountDA.ReportEstimatedBillingTaskRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingTaskRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportEstimatedBillingTaskRowChangeEventHandler(object sender, CloudAccountDA.ReportEstimatedBillingTaskRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportEstimatedBillingTeamDataTable : TypedTableBase<CloudAccountDA.ReportEstimatedBillingTeamRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnClient;
            private DataColumn columnDate;
            private DataColumn columnEstimated_Billing;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnProject;
            private DataColumn columnTask;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTeamRowChangeEventHandler ReportEstimatedBillingTeamRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTeamRowChangeEventHandler ReportEstimatedBillingTeamRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTeamRowChangeEventHandler ReportEstimatedBillingTeamRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportEstimatedBillingTeamRowChangeEventHandler ReportEstimatedBillingTeamRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportEstimatedBillingTeamDataTable()
            {
                base.TableName = "ReportEstimatedBillingTeam";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportEstimatedBillingTeamDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ReportEstimatedBillingTeamDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportEstimatedBillingTeamRow(CloudAccountDA.ReportEstimatedBillingTeamRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportEstimatedBillingTeamRow AddReportEstimatedBillingTeamRow(string Date, string Client, string Project, string Task, string Notes, string Billed, decimal Hours, decimal Estimated_Billing)
            {
                CloudAccountDA.ReportEstimatedBillingTeamRow row = (CloudAccountDA.ReportEstimatedBillingTeamRow) base.NewRow();
                row.ItemArray = new object[] { Date, Client, Project, Task, Notes, Billed, Hours, Estimated_Billing };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportEstimatedBillingTeamDataTable table = (CloudAccountDA.ReportEstimatedBillingTeamDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportEstimatedBillingTeamDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportEstimatedBillingTeamRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportEstimatedBillingTeamDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnClient = new DataColumn("Client", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnProject = new DataColumn("Project", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnTask = new DataColumn("Task", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTask);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnEstimated_Billing = new DataColumn("Estimated Billing", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnEstimated_Billing);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnClient.ReadOnly = true;
                this.columnClient.MaxLength = 200;
                this.columnProject.MaxLength = 150;
                this.columnTask.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
                this.columnEstimated_Billing.ReadOnly = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnClient = base.Columns["Client"];
                this.columnProject = base.Columns["Project"];
                this.columnTask = base.Columns["Task"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
                this.columnEstimated_Billing = base.Columns["Estimated Billing"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportEstimatedBillingTeamRow NewReportEstimatedBillingTeamRow()
            {
                return (CloudAccountDA.ReportEstimatedBillingTeamRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportEstimatedBillingTeamRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportEstimatedBillingTeamRowChanged != null)
                {
                    this.ReportEstimatedBillingTeamRowChanged(this, new CloudAccountDA.ReportEstimatedBillingTeamRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTeamRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportEstimatedBillingTeamRowChanging != null)
                {
                    this.ReportEstimatedBillingTeamRowChanging(this, new CloudAccountDA.ReportEstimatedBillingTeamRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTeamRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportEstimatedBillingTeamRowDeleted != null)
                {
                    this.ReportEstimatedBillingTeamRowDeleted(this, new CloudAccountDA.ReportEstimatedBillingTeamRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTeamRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportEstimatedBillingTeamRowDeleting != null)
                {
                    this.ReportEstimatedBillingTeamRowDeleting(this, new CloudAccountDA.ReportEstimatedBillingTeamRowChangeEvent((CloudAccountDA.ReportEstimatedBillingTeamRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportEstimatedBillingTeamRow(CloudAccountDA.ReportEstimatedBillingTeamRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientColumn
            {
                get
                {
                    return this.columnClient;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Estimated_BillingColumn
            {
                get
                {
                    return this.columnEstimated_Billing;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingTeamRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportEstimatedBillingTeamRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectColumn
            {
                get
                {
                    return this.columnProject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskColumn
            {
                get
                {
                    return this.columnTask;
                }
            }
        }
        
        public class ReportEstimatedBillingTeamRow : DataRow
        {
            private CloudAccountDA.ReportEstimatedBillingTeamDataTable tableReportEstimatedBillingTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportEstimatedBillingTeamRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportEstimatedBillingTeam = (CloudAccountDA.ReportEstimatedBillingTeamDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.BilledColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClientNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.ClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.DateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEstimated_BillingNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.Estimated_BillingColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.ProjectColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskNull()
            {
                return base.IsNull(this.tableReportEstimatedBillingTeam.TaskColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBilledNull()
            {
                base[this.tableReportEstimatedBillingTeam.BilledColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetClientNull()
            {
                base[this.tableReportEstimatedBillingTeam.ClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDateNull()
            {
                base[this.tableReportEstimatedBillingTeam.DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEstimated_BillingNull()
            {
                base[this.tableReportEstimatedBillingTeam.Estimated_BillingColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableReportEstimatedBillingTeam.HoursColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tableReportEstimatedBillingTeam.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectNull()
            {
                base[this.tableReportEstimatedBillingTeam.ProjectColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaskNull()
            {
                base[this.tableReportEstimatedBillingTeam.TaskColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTeam.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.BilledColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Client
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTeam.ClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.ClientColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTeam.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Estimated_Billing
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingTeam.Estimated_BillingColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Estimated Billing' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.Estimated_BillingColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportEstimatedBillingTeam.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTeam.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Project
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTeam.ProjectColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Project' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.ProjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Task
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportEstimatedBillingTeam.TaskColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Task' in table 'ReportEstimatedBillingTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportEstimatedBillingTeam.TaskColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportEstimatedBillingTeamRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportEstimatedBillingTeamRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportEstimatedBillingTeamRowChangeEvent(CloudAccountDA.ReportEstimatedBillingTeamRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportEstimatedBillingTeamRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportEstimatedBillingTeamRowChangeEventHandler(object sender, CloudAccountDA.ReportEstimatedBillingTeamRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportExpensesDataTable : TypedTableBase<CloudAccountDA.ReportExpensesRow>
        {
            private DataColumn columnAmount;
            private DataColumn columnCategory;
            private DataColumn columnClient;
            private DataColumn columnDate;
            private DataColumn columnNotes;
            private DataColumn columnVendor;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportExpensesRowChangeEventHandler ReportExpensesRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportExpensesRowChangeEventHandler ReportExpensesRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportExpensesRowChangeEventHandler ReportExpensesRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportExpensesRowChangeEventHandler ReportExpensesRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportExpensesDataTable()
            {
                base.TableName = "ReportExpenses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportExpensesDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ReportExpensesDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportExpensesRow(CloudAccountDA.ReportExpensesRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportExpensesRow AddReportExpensesRow(string Date, string Category, string Vendor, string Client, string Notes, decimal Amount)
            {
                CloudAccountDA.ReportExpensesRow row = (CloudAccountDA.ReportExpensesRow) base.NewRow();
                row.ItemArray = new object[] { Date, Category, Vendor, Client, Notes, Amount };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportExpensesDataTable table = (CloudAccountDA.ReportExpensesDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportExpensesDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportExpensesRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportExpensesDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnCategory = new DataColumn("Category", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnVendor = new DataColumn("Vendor", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnVendor);
                this.columnClient = new DataColumn("Client", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnAmount = new DataColumn("Amount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 8;
                this.columnCategory.MaxLength = 250;
                this.columnVendor.MaxLength = 250;
                this.columnClient.MaxLength = 200;
                this.columnNotes.MaxLength = 0x7fffffff;
                this.columnAmount.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnCategory = base.Columns["Category"];
                this.columnVendor = base.Columns["Vendor"];
                this.columnClient = base.Columns["Client"];
                this.columnNotes = base.Columns["Notes"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportExpensesRow NewReportExpensesRow()
            {
                return (CloudAccountDA.ReportExpensesRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportExpensesRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportExpensesRowChanged != null)
                {
                    this.ReportExpensesRowChanged(this, new CloudAccountDA.ReportExpensesRowChangeEvent((CloudAccountDA.ReportExpensesRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportExpensesRowChanging != null)
                {
                    this.ReportExpensesRowChanging(this, new CloudAccountDA.ReportExpensesRowChangeEvent((CloudAccountDA.ReportExpensesRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportExpensesRowDeleted != null)
                {
                    this.ReportExpensesRowDeleted(this, new CloudAccountDA.ReportExpensesRowChangeEvent((CloudAccountDA.ReportExpensesRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportExpensesRowDeleting != null)
                {
                    this.ReportExpensesRowDeleting(this, new CloudAccountDA.ReportExpensesRowChangeEvent((CloudAccountDA.ReportExpensesRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportExpensesRow(CloudAccountDA.ReportExpensesRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AmountColumn
            {
                get
                {
                    return this.columnAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CategoryColumn
            {
                get
                {
                    return this.columnCategory;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientColumn
            {
                get
                {
                    return this.columnClient;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportExpensesRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportExpensesRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn VendorColumn
            {
                get
                {
                    return this.columnVendor;
                }
            }
        }
        
        public class ReportExpensesRow : DataRow
        {
            private CloudAccountDA.ReportExpensesDataTable tableReportExpenses;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportExpensesRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportExpenses = (CloudAccountDA.ReportExpensesDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCategoryNull()
            {
                return base.IsNull(this.tableReportExpenses.CategoryColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClientNull()
            {
                return base.IsNull(this.tableReportExpenses.ClientColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportExpenses.DateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportExpenses.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsVendorNull()
            {
                return base.IsNull(this.tableReportExpenses.VendorColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCategoryNull()
            {
                base[this.tableReportExpenses.CategoryColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetClientNull()
            {
                base[this.tableReportExpenses.ClientColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateNull()
            {
                base[this.tableReportExpenses.DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tableReportExpenses.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVendorNull()
            {
                base[this.tableReportExpenses.VendorColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Amount
            {
                get
                {
                    return (decimal) base[this.tableReportExpenses.AmountColumn];
                }
                set
                {
                    base[this.tableReportExpenses.AmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Category
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportExpenses.CategoryColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Category' in table 'ReportExpenses' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportExpenses.CategoryColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Client
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportExpenses.ClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client' in table 'ReportExpenses' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportExpenses.ClientColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportExpenses.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportExpenses' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportExpenses.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportExpenses.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportExpenses' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportExpenses.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Vendor
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportExpenses.VendorColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Vendor' in table 'ReportExpenses' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportExpenses.VendorColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportExpensesRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportExpensesRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportExpensesRowChangeEvent(CloudAccountDA.ReportExpensesRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportExpensesRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportExpensesRowChangeEventHandler(object sender, CloudAccountDA.ReportExpensesRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportInvoiceDetailsDataTable : TypedTableBase<CloudAccountDA.ReportInvoiceDetailsRow>
        {
            private DataColumn _columnInvoice__;
            private DataColumn columnAmount;
            private DataColumn columnID;
            private DataColumn columnInvoice_Date;
            private DataColumn columnItem;
            private DataColumn columnQuantity;
            private DataColumn columnStatus;
            private DataColumn columnTax_1;
            private DataColumn columnTax_2;
            private DataColumn columnUnit_Cost;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportInvoiceDetailsRowChangeEventHandler ReportInvoiceDetailsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportInvoiceDetailsRowChangeEventHandler ReportInvoiceDetailsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportInvoiceDetailsRowChangeEventHandler ReportInvoiceDetailsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportInvoiceDetailsRowChangeEventHandler ReportInvoiceDetailsRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportInvoiceDetailsDataTable()
            {
                base.TableName = "ReportInvoiceDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportInvoiceDetailsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ReportInvoiceDetailsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportInvoiceDetailsRow(CloudAccountDA.ReportInvoiceDetailsRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportInvoiceDetailsRow AddReportInvoiceDetailsRow(int ID, string _Invoice__, DateTime Invoice_Date, string Status, string Item, decimal Unit_Cost, decimal Quantity, int Tax_1, int Tax_2, decimal Amount)
            {
                CloudAccountDA.ReportInvoiceDetailsRow row = (CloudAccountDA.ReportInvoiceDetailsRow) base.NewRow();
                row.ItemArray = new object[] { ID, _Invoice__, Invoice_Date, Status, Item, Unit_Cost, Quantity, Tax_1, Tax_2, Amount };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportInvoiceDetailsDataTable table = (CloudAccountDA.ReportInvoiceDetailsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportInvoiceDetailsDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportInvoiceDetailsRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportInvoiceDetailsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnID = new DataColumn("ID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnID);
                this._columnInvoice__ = new DataColumn("Invoice #", typeof(string), null, MappingType.Element);
                this._columnInvoice__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnInvoice__");
                this._columnInvoice__.ExtendedProperties.Add("Generator_UserColumnName", "Invoice #");
                base.Columns.Add(this._columnInvoice__);
                this.columnInvoice_Date = new DataColumn("Invoice Date", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnInvoice_Date);
                this.columnStatus = new DataColumn("Status", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnItem = new DataColumn("Item", typeof(string), null, MappingType.Element);
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Item");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ItemColumn");
                this.columnItem.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnItem");
                this.columnItem.ExtendedProperties.Add("Generator_UserColumnName", "Item");
                base.Columns.Add(this.columnItem);
                this.columnUnit_Cost = new DataColumn("Unit Cost", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUnit_Cost);
                this.columnQuantity = new DataColumn("Quantity", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnTax_1 = new DataColumn("Tax 1", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax_1);
                this.columnTax_2 = new DataColumn("Tax 2", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTax_2);
                this.columnAmount = new DataColumn("Amount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnID.ReadOnly = true;
                this._columnInvoice__.ReadOnly = true;
                this._columnInvoice__.MaxLength = 50;
                this.columnInvoice_Date.ReadOnly = true;
                this.columnStatus.ReadOnly = true;
                this.columnStatus.MaxLength = 50;
                this.columnItem.ReadOnly = true;
                this.columnItem.MaxLength = 100;
                this.columnUnit_Cost.ReadOnly = true;
                this.columnQuantity.ReadOnly = true;
                this.columnTax_1.ReadOnly = true;
                this.columnTax_2.ReadOnly = true;
                this.columnAmount.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnID = base.Columns["ID"];
                this._columnInvoice__ = base.Columns["Invoice #"];
                this.columnInvoice_Date = base.Columns["Invoice Date"];
                this.columnStatus = base.Columns["Status"];
                this.columnItem = base.Columns["Item"];
                this.columnUnit_Cost = base.Columns["Unit Cost"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnTax_1 = base.Columns["Tax 1"];
                this.columnTax_2 = base.Columns["Tax 2"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportInvoiceDetailsRow NewReportInvoiceDetailsRow()
            {
                return (CloudAccountDA.ReportInvoiceDetailsRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportInvoiceDetailsRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportInvoiceDetailsRowChanged != null)
                {
                    this.ReportInvoiceDetailsRowChanged(this, new CloudAccountDA.ReportInvoiceDetailsRowChangeEvent((CloudAccountDA.ReportInvoiceDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportInvoiceDetailsRowChanging != null)
                {
                    this.ReportInvoiceDetailsRowChanging(this, new CloudAccountDA.ReportInvoiceDetailsRowChangeEvent((CloudAccountDA.ReportInvoiceDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportInvoiceDetailsRowDeleted != null)
                {
                    this.ReportInvoiceDetailsRowDeleted(this, new CloudAccountDA.ReportInvoiceDetailsRowChangeEvent((CloudAccountDA.ReportInvoiceDetailsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportInvoiceDetailsRowDeleting != null)
                {
                    this.ReportInvoiceDetailsRowDeleting(this, new CloudAccountDA.ReportInvoiceDetailsRowChangeEvent((CloudAccountDA.ReportInvoiceDetailsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportInvoiceDetailsRow(CloudAccountDA.ReportInvoiceDetailsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn _Invoice__Column
            {
                get
                {
                    return this._columnInvoice__;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn AmountColumn
            {
                get
                {
                    return this.columnAmount;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn IDColumn
            {
                get
                {
                    return this.columnID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Invoice_DateColumn
            {
                get
                {
                    return this.columnInvoice_Date;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportInvoiceDetailsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportInvoiceDetailsRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ItemColumn
            {
                get
                {
                    return this.columnItem;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax_1Column
            {
                get
                {
                    return this.columnTax_1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Tax_2Column
            {
                get
                {
                    return this.columnTax_2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Unit_CostColumn
            {
                get
                {
                    return this.columnUnit_Cost;
                }
            }
        }
        
        public class ReportInvoiceDetailsRow : DataRow
        {
            private CloudAccountDA.ReportInvoiceDetailsDataTable tableReportInvoiceDetails;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportInvoiceDetailsRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportInvoiceDetails = (CloudAccountDA.ReportInvoiceDetailsDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Is_Invoice__Null()
            {
                return base.IsNull(this.tableReportInvoiceDetails._Invoice__Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAmountNull()
            {
                return base.IsNull(this.tableReportInvoiceDetails.AmountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDNull()
            {
                return base.IsNull(this.tableReportInvoiceDetails.IDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoice_DateNull()
            {
                return base.IsNull(this.tableReportInvoiceDetails.Invoice_DateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsItemNull()
            {
                return base.IsNull(this.tableReportInvoiceDetails.ItemColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQuantityNull()
            {
                return base.IsNull(this.tableReportInvoiceDetails.QuantityColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStatusNull()
            {
                return base.IsNull(this.tableReportInvoiceDetails.StatusColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax_1Null()
            {
                return base.IsNull(this.tableReportInvoiceDetails.Tax_1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTax_2Null()
            {
                return base.IsNull(this.tableReportInvoiceDetails.Tax_2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnit_CostNull()
            {
                return base.IsNull(this.tableReportInvoiceDetails.Unit_CostColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void Set_Invoice__Null()
            {
                base[this.tableReportInvoiceDetails._Invoice__Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAmountNull()
            {
                base[this.tableReportInvoiceDetails.AmountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetIDNull()
            {
                base[this.tableReportInvoiceDetails.IDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetInvoice_DateNull()
            {
                base[this.tableReportInvoiceDetails.Invoice_DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetItemNull()
            {
                base[this.tableReportInvoiceDetails.ItemColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetQuantityNull()
            {
                base[this.tableReportInvoiceDetails.QuantityColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetStatusNull()
            {
                base[this.tableReportInvoiceDetails.StatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax_1Null()
            {
                base[this.tableReportInvoiceDetails.Tax_1Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTax_2Null()
            {
                base[this.tableReportInvoiceDetails.Tax_2Column] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUnit_CostNull()
            {
                base[this.tableReportInvoiceDetails.Unit_CostColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string _Invoice__
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportInvoiceDetails._Invoice__Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Invoice #' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportInvoiceDetails._Invoice__Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Amount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportInvoiceDetails.AmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Amount' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.AmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableReportInvoiceDetails.IDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ID' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.IDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime Invoice_Date
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableReportInvoiceDetails.Invoice_DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Invoice Date' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.Invoice_DateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Item
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportInvoiceDetails.ItemColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Item' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.ItemColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Quantity
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportInvoiceDetails.QuantityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Quantity' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.QuantityColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Status
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportInvoiceDetails.StatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Status' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.StatusColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Tax_1
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableReportInvoiceDetails.Tax_1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax 1' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.Tax_1Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Tax_2
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableReportInvoiceDetails.Tax_2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Tax 2' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.Tax_2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Unit_Cost
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportInvoiceDetails.Unit_CostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Unit Cost' in table 'ReportInvoiceDetails' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportInvoiceDetails.Unit_CostColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportInvoiceDetailsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportInvoiceDetailsRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportInvoiceDetailsRowChangeEvent(CloudAccountDA.ReportInvoiceDetailsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportInvoiceDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportInvoiceDetailsRowChangeEventHandler(object sender, CloudAccountDA.ReportInvoiceDetailsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportItemSalesDataTable : TypedTableBase<CloudAccountDA.ReportItemSalesRow>
        {
            private DataColumn columnClient_Name;
            private DataColumn columnDiscount_Amount;
            private DataColumn columnInvoice;
            private DataColumn columnInvoice_Date;
            private DataColumn columnQuantity;
            private DataColumn columnTotal;
            private DataColumn columnUnit_Cost;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportItemSalesRowChangeEventHandler ReportItemSalesRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportItemSalesRowChangeEventHandler ReportItemSalesRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportItemSalesRowChangeEventHandler ReportItemSalesRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportItemSalesRowChangeEventHandler ReportItemSalesRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportItemSalesDataTable()
            {
                base.TableName = "ReportItemSales";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportItemSalesDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportItemSalesDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportItemSalesRow(CloudAccountDA.ReportItemSalesRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportItemSalesRow AddReportItemSalesRow(int Client_Name, string Invoice, DateTime Invoice_Date, decimal Unit_Cost, decimal Quantity, decimal Discount_Amount, decimal Total)
            {
                CloudAccountDA.ReportItemSalesRow row = (CloudAccountDA.ReportItemSalesRow) base.NewRow();
                row.ItemArray = new object[] { Client_Name, Invoice, Invoice_Date, Unit_Cost, Quantity, Discount_Amount, Total };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportItemSalesDataTable table = (CloudAccountDA.ReportItemSalesDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportItemSalesDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportItemSalesRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportItemSalesDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnClient_Name = new DataColumn("Client Name", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClient_Name);
                this.columnInvoice = new DataColumn("Invoice", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoice);
                this.columnInvoice_Date = new DataColumn("Invoice Date", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnInvoice_Date);
                this.columnUnit_Cost = new DataColumn("Unit Cost", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnUnit_Cost);
                this.columnQuantity = new DataColumn("Quantity", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnDiscount_Amount = new DataColumn("Discount Amount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscount_Amount);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnInvoice.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnClient_Name = base.Columns["Client Name"];
                this.columnInvoice = base.Columns["Invoice"];
                this.columnInvoice_Date = base.Columns["Invoice Date"];
                this.columnUnit_Cost = base.Columns["Unit Cost"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnDiscount_Amount = base.Columns["Discount Amount"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportItemSalesRow NewReportItemSalesRow()
            {
                return (CloudAccountDA.ReportItemSalesRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportItemSalesRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportItemSalesRowChanged != null)
                {
                    this.ReportItemSalesRowChanged(this, new CloudAccountDA.ReportItemSalesRowChangeEvent((CloudAccountDA.ReportItemSalesRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportItemSalesRowChanging != null)
                {
                    this.ReportItemSalesRowChanging(this, new CloudAccountDA.ReportItemSalesRowChangeEvent((CloudAccountDA.ReportItemSalesRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportItemSalesRowDeleted != null)
                {
                    this.ReportItemSalesRowDeleted(this, new CloudAccountDA.ReportItemSalesRowChangeEvent((CloudAccountDA.ReportItemSalesRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportItemSalesRowDeleting != null)
                {
                    this.ReportItemSalesRowDeleting(this, new CloudAccountDA.ReportItemSalesRowChangeEvent((CloudAccountDA.ReportItemSalesRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportItemSalesRow(CloudAccountDA.ReportItemSalesRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Client_NameColumn
            {
                get
                {
                    return this.columnClient_Name;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Discount_AmountColumn
            {
                get
                {
                    return this.columnDiscount_Amount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Invoice_DateColumn
            {
                get
                {
                    return this.columnInvoice_Date;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceColumn
            {
                get
                {
                    return this.columnInvoice;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportItemSalesRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportItemSalesRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Unit_CostColumn
            {
                get
                {
                    return this.columnUnit_Cost;
                }
            }
        }
        
        public class ReportItemSalesRow : DataRow
        {
            private CloudAccountDA.ReportItemSalesDataTable tableReportItemSales;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportItemSalesRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportItemSales = (CloudAccountDA.ReportItemSalesDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClient_NameNull()
            {
                return base.IsNull(this.tableReportItemSales.Client_NameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDiscount_AmountNull()
            {
                return base.IsNull(this.tableReportItemSales.Discount_AmountColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoice_DateNull()
            {
                return base.IsNull(this.tableReportItemSales.Invoice_DateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoiceNull()
            {
                return base.IsNull(this.tableReportItemSales.InvoiceColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsQuantityNull()
            {
                return base.IsNull(this.tableReportItemSales.QuantityColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableReportItemSales.TotalColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsUnit_CostNull()
            {
                return base.IsNull(this.tableReportItemSales.Unit_CostColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClient_NameNull()
            {
                base[this.tableReportItemSales.Client_NameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDiscount_AmountNull()
            {
                base[this.tableReportItemSales.Discount_AmountColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoice_DateNull()
            {
                base[this.tableReportItemSales.Invoice_DateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceNull()
            {
                base[this.tableReportItemSales.InvoiceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQuantityNull()
            {
                base[this.tableReportItemSales.QuantityColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalNull()
            {
                base[this.tableReportItemSales.TotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUnit_CostNull()
            {
                base[this.tableReportItemSales.Unit_CostColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Client_Name
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableReportItemSales.Client_NameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client Name' in table 'ReportItemSales' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportItemSales.Client_NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Discount_Amount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportItemSales.Discount_AmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Discount Amount' in table 'ReportItemSales' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportItemSales.Discount_AmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Invoice
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportItemSales.InvoiceColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Invoice' in table 'ReportItemSales' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportItemSales.InvoiceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime Invoice_Date
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableReportItemSales.Invoice_DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Invoice Date' in table 'ReportItemSales' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableReportItemSales.Invoice_DateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Quantity
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportItemSales.QuantityColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Quantity' in table 'ReportItemSales' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportItemSales.QuantityColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportItemSales.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'ReportItemSales' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportItemSales.TotalColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Unit_Cost
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportItemSales.Unit_CostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Unit Cost' in table 'ReportItemSales' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportItemSales.Unit_CostColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportItemSalesRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportItemSalesRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportItemSalesRowChangeEvent(CloudAccountDA.ReportItemSalesRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportItemSalesRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportItemSalesRowChangeEventHandler(object sender, CloudAccountDA.ReportItemSalesRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportPaymentsCollectedDataTable : TypedTableBase<CloudAccountDA.ReportPaymentsCollectedRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnDate;
            private DataColumn columnInvoiceID;
            private DataColumn columnMethod;
            private DataColumn columnNotes;
            private DataColumn columnPaymentAmount;
            private DataColumn columnPaymentID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportPaymentsCollectedRowChangeEventHandler ReportPaymentsCollectedRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportPaymentsCollectedRowChangeEventHandler ReportPaymentsCollectedRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportPaymentsCollectedRowChangeEventHandler ReportPaymentsCollectedRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportPaymentsCollectedRowChangeEventHandler ReportPaymentsCollectedRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportPaymentsCollectedDataTable()
            {
                base.TableName = "ReportPaymentsCollected";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportPaymentsCollectedDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportPaymentsCollectedDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportPaymentsCollectedRow(CloudAccountDA.ReportPaymentsCollectedRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportPaymentsCollectedRow AddReportPaymentsCollectedRow(int CompanyID, int InvoiceID, decimal PaymentAmount, string Method, DateTime Date, string Notes)
            {
                CloudAccountDA.ReportPaymentsCollectedRow row = (CloudAccountDA.ReportPaymentsCollectedRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CompanyID;
                objArray2[2] = InvoiceID;
                objArray2[3] = PaymentAmount;
                objArray2[4] = Method;
                objArray2[5] = Date;
                objArray2[6] = Notes;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportPaymentsCollectedDataTable table = (CloudAccountDA.ReportPaymentsCollectedDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportPaymentsCollectedDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportPaymentsCollectedRow FindByPaymentID(int PaymentID)
            {
                return (CloudAccountDA.ReportPaymentsCollectedRow) base.Rows.Find(new object[] { PaymentID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportPaymentsCollectedRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportPaymentsCollectedDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnPaymentID = new DataColumn("PaymentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnInvoiceID = new DataColumn("InvoiceID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceID);
                this.columnPaymentAmount = new DataColumn("PaymentAmount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentAmount);
                this.columnMethod = new DataColumn("Method", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMethod);
                this.columnDate = new DataColumn("Date", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnPaymentID }, true));
                this.columnPaymentID.AutoIncrement = true;
                this.columnPaymentID.AutoIncrementSeed = -1L;
                this.columnPaymentID.AutoIncrementStep = -1L;
                this.columnPaymentID.AllowDBNull = false;
                this.columnPaymentID.ReadOnly = true;
                this.columnPaymentID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnInvoiceID.AllowDBNull = false;
                this.columnMethod.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnPaymentID = base.Columns["PaymentID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnInvoiceID = base.Columns["InvoiceID"];
                this.columnPaymentAmount = base.Columns["PaymentAmount"];
                this.columnMethod = base.Columns["Method"];
                this.columnDate = base.Columns["Date"];
                this.columnNotes = base.Columns["Notes"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportPaymentsCollectedRow NewReportPaymentsCollectedRow()
            {
                return (CloudAccountDA.ReportPaymentsCollectedRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportPaymentsCollectedRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportPaymentsCollectedRowChanged != null)
                {
                    this.ReportPaymentsCollectedRowChanged(this, new CloudAccountDA.ReportPaymentsCollectedRowChangeEvent((CloudAccountDA.ReportPaymentsCollectedRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportPaymentsCollectedRowChanging != null)
                {
                    this.ReportPaymentsCollectedRowChanging(this, new CloudAccountDA.ReportPaymentsCollectedRowChangeEvent((CloudAccountDA.ReportPaymentsCollectedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportPaymentsCollectedRowDeleted != null)
                {
                    this.ReportPaymentsCollectedRowDeleted(this, new CloudAccountDA.ReportPaymentsCollectedRowChangeEvent((CloudAccountDA.ReportPaymentsCollectedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportPaymentsCollectedRowDeleting != null)
                {
                    this.ReportPaymentsCollectedRowDeleting(this, new CloudAccountDA.ReportPaymentsCollectedRowChangeEvent((CloudAccountDA.ReportPaymentsCollectedRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportPaymentsCollectedRow(CloudAccountDA.ReportPaymentsCollectedRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn InvoiceIDColumn
            {
                get
                {
                    return this.columnInvoiceID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportPaymentsCollectedRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportPaymentsCollectedRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MethodColumn
            {
                get
                {
                    return this.columnMethod;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PaymentAmountColumn
            {
                get
                {
                    return this.columnPaymentAmount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PaymentIDColumn
            {
                get
                {
                    return this.columnPaymentID;
                }
            }
        }
        
        public class ReportPaymentsCollectedRow : DataRow
        {
            private CloudAccountDA.ReportPaymentsCollectedDataTable tableReportPaymentsCollected;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportPaymentsCollectedRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportPaymentsCollected = (CloudAccountDA.ReportPaymentsCollectedDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportPaymentsCollected.DateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsMethodNull()
            {
                return base.IsNull(this.tableReportPaymentsCollected.MethodColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportPaymentsCollected.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPaymentAmountNull()
            {
                return base.IsNull(this.tableReportPaymentsCollected.PaymentAmountColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateNull()
            {
                base[this.tableReportPaymentsCollected.DateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMethodNull()
            {
                base[this.tableReportPaymentsCollected.MethodColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableReportPaymentsCollected.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPaymentAmountNull()
            {
                base[this.tableReportPaymentsCollected.PaymentAmountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableReportPaymentsCollected.CompanyIDColumn];
                }
                set
                {
                    base[this.tableReportPaymentsCollected.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime Date
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableReportPaymentsCollected.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportPaymentsCollected' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableReportPaymentsCollected.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int InvoiceID
            {
                get
                {
                    return (int) base[this.tableReportPaymentsCollected.InvoiceIDColumn];
                }
                set
                {
                    base[this.tableReportPaymentsCollected.InvoiceIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Method
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportPaymentsCollected.MethodColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Method' in table 'ReportPaymentsCollected' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportPaymentsCollected.MethodColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportPaymentsCollected.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportPaymentsCollected' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportPaymentsCollected.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal PaymentAmount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportPaymentsCollected.PaymentAmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'PaymentAmount' in table 'ReportPaymentsCollected' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportPaymentsCollected.PaymentAmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PaymentID
            {
                get
                {
                    return (int) base[this.tableReportPaymentsCollected.PaymentIDColumn];
                }
                set
                {
                    base[this.tableReportPaymentsCollected.PaymentIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportPaymentsCollectedRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportPaymentsCollectedRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportPaymentsCollectedRowChangeEvent(CloudAccountDA.ReportPaymentsCollectedRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportPaymentsCollectedRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportPaymentsCollectedRowChangeEventHandler(object sender, CloudAccountDA.ReportPaymentsCollectedRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportProjectTaskDataTable : TypedTableBase<CloudAccountDA.ReportProjectTaskRow>
        {
            private DataColumn columnAssigned_Users;
            private DataColumn columnHours_Logged;
            private DataColumn columnProject_Name;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectTaskRowChangeEventHandler ReportProjectTaskRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectTaskRowChangeEventHandler ReportProjectTaskRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectTaskRowChangeEventHandler ReportProjectTaskRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectTaskRowChangeEventHandler ReportProjectTaskRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportProjectTaskDataTable()
            {
                base.TableName = "ReportProjectTask";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportProjectTaskDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportProjectTaskDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportProjectTaskRow(CloudAccountDA.ReportProjectTaskRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportProjectTaskRow AddReportProjectTaskRow(string Project_Name, string Assigned_Users, decimal Hours_Logged)
            {
                CloudAccountDA.ReportProjectTaskRow row = (CloudAccountDA.ReportProjectTaskRow) base.NewRow();
                row.ItemArray = new object[] { Project_Name, Assigned_Users, Hours_Logged };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportProjectTaskDataTable table = (CloudAccountDA.ReportProjectTaskDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportProjectTaskDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportProjectTaskRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportProjectTaskDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnProject_Name = new DataColumn("Project Name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProject_Name);
                this.columnAssigned_Users = new DataColumn("Assigned Users", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAssigned_Users);
                this.columnHours_Logged = new DataColumn("Hours Logged", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours_Logged);
                this.columnProject_Name.MaxLength = 150;
                this.columnAssigned_Users.ReadOnly = true;
                this.columnAssigned_Users.MaxLength = 100;
                this.columnHours_Logged.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnProject_Name = base.Columns["Project Name"];
                this.columnAssigned_Users = base.Columns["Assigned Users"];
                this.columnHours_Logged = base.Columns["Hours Logged"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportProjectTaskRow NewReportProjectTaskRow()
            {
                return (CloudAccountDA.ReportProjectTaskRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportProjectTaskRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportProjectTaskRowChanged != null)
                {
                    this.ReportProjectTaskRowChanged(this, new CloudAccountDA.ReportProjectTaskRowChangeEvent((CloudAccountDA.ReportProjectTaskRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportProjectTaskRowChanging != null)
                {
                    this.ReportProjectTaskRowChanging(this, new CloudAccountDA.ReportProjectTaskRowChangeEvent((CloudAccountDA.ReportProjectTaskRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportProjectTaskRowDeleted != null)
                {
                    this.ReportProjectTaskRowDeleted(this, new CloudAccountDA.ReportProjectTaskRowChangeEvent((CloudAccountDA.ReportProjectTaskRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportProjectTaskRowDeleting != null)
                {
                    this.ReportProjectTaskRowDeleting(this, new CloudAccountDA.ReportProjectTaskRowChangeEvent((CloudAccountDA.ReportProjectTaskRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportProjectTaskRow(CloudAccountDA.ReportProjectTaskRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Assigned_UsersColumn
            {
                get
                {
                    return this.columnAssigned_Users;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Hours_LoggedColumn
            {
                get
                {
                    return this.columnHours_Logged;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportProjectTaskRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportProjectTaskRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Project_NameColumn
            {
                get
                {
                    return this.columnProject_Name;
                }
            }
        }
        
        public class ReportProjectTaskRow : DataRow
        {
            private CloudAccountDA.ReportProjectTaskDataTable tableReportProjectTask;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportProjectTaskRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportProjectTask = (CloudAccountDA.ReportProjectTaskDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsAssigned_UsersNull()
            {
                return base.IsNull(this.tableReportProjectTask.Assigned_UsersColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHours_LoggedNull()
            {
                return base.IsNull(this.tableReportProjectTask.Hours_LoggedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProject_NameNull()
            {
                return base.IsNull(this.tableReportProjectTask.Project_NameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAssigned_UsersNull()
            {
                base[this.tableReportProjectTask.Assigned_UsersColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHours_LoggedNull()
            {
                base[this.tableReportProjectTask.Hours_LoggedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetProject_NameNull()
            {
                base[this.tableReportProjectTask.Project_NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Assigned_Users
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportProjectTask.Assigned_UsersColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Assigned Users' in table 'ReportProjectTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportProjectTask.Assigned_UsersColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours_Logged
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportProjectTask.Hours_LoggedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours Logged' in table 'ReportProjectTask' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportProjectTask.Hours_LoggedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Project_Name
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportProjectTask.Project_NameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Project Name' in table 'ReportProjectTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportProjectTask.Project_NameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportProjectTaskRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportProjectTaskRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportProjectTaskRowChangeEvent(CloudAccountDA.ReportProjectTaskRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportProjectTaskRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportProjectTaskRowChangeEventHandler(object sender, CloudAccountDA.ReportProjectTaskRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportProjectUserDataTable : TypedTableBase<CloudAccountDA.ReportProjectUserRow>
        {
            private DataColumn columnAssigned_Tasks;
            private DataColumn columnHours_Logged;
            private DataColumn columnProject_Name;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectUserRowChangeEventHandler ReportProjectUserRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectUserRowChangeEventHandler ReportProjectUserRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectUserRowChangeEventHandler ReportProjectUserRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportProjectUserRowChangeEventHandler ReportProjectUserRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportProjectUserDataTable()
            {
                base.TableName = "ReportProjectUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportProjectUserDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportProjectUserDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportProjectUserRow(CloudAccountDA.ReportProjectUserRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportProjectUserRow AddReportProjectUserRow(int Project_Name, int Assigned_Tasks, decimal Hours_Logged)
            {
                CloudAccountDA.ReportProjectUserRow row = (CloudAccountDA.ReportProjectUserRow) base.NewRow();
                row.ItemArray = new object[] { Project_Name, Assigned_Tasks, Hours_Logged };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportProjectUserDataTable table = (CloudAccountDA.ReportProjectUserDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportProjectUserDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportProjectUserRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportProjectUserDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnProject_Name = new DataColumn("Project Name", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProject_Name);
                this.columnAssigned_Tasks = new DataColumn("Assigned Tasks", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnAssigned_Tasks);
                this.columnHours_Logged = new DataColumn("Hours Logged", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours_Logged);
                this.columnProject_Name.AllowDBNull = false;
                this.columnAssigned_Tasks.AllowDBNull = false;
                this.columnHours_Logged.ReadOnly = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnProject_Name = base.Columns["Project Name"];
                this.columnAssigned_Tasks = base.Columns["Assigned Tasks"];
                this.columnHours_Logged = base.Columns["Hours Logged"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportProjectUserRow NewReportProjectUserRow()
            {
                return (CloudAccountDA.ReportProjectUserRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportProjectUserRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportProjectUserRowChanged != null)
                {
                    this.ReportProjectUserRowChanged(this, new CloudAccountDA.ReportProjectUserRowChangeEvent((CloudAccountDA.ReportProjectUserRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportProjectUserRowChanging != null)
                {
                    this.ReportProjectUserRowChanging(this, new CloudAccountDA.ReportProjectUserRowChangeEvent((CloudAccountDA.ReportProjectUserRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportProjectUserRowDeleted != null)
                {
                    this.ReportProjectUserRowDeleted(this, new CloudAccountDA.ReportProjectUserRowChangeEvent((CloudAccountDA.ReportProjectUserRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportProjectUserRowDeleting != null)
                {
                    this.ReportProjectUserRowDeleting(this, new CloudAccountDA.ReportProjectUserRowChangeEvent((CloudAccountDA.ReportProjectUserRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportProjectUserRow(CloudAccountDA.ReportProjectUserRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Assigned_TasksColumn
            {
                get
                {
                    return this.columnAssigned_Tasks;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Hours_LoggedColumn
            {
                get
                {
                    return this.columnHours_Logged;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportProjectUserRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportProjectUserRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Project_NameColumn
            {
                get
                {
                    return this.columnProject_Name;
                }
            }
        }
        
        public class ReportProjectUserRow : DataRow
        {
            private CloudAccountDA.ReportProjectUserDataTable tableReportProjectUser;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportProjectUserRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportProjectUser = (CloudAccountDA.ReportProjectUserDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHours_LoggedNull()
            {
                return base.IsNull(this.tableReportProjectUser.Hours_LoggedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHours_LoggedNull()
            {
                base[this.tableReportProjectUser.Hours_LoggedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Assigned_Tasks
            {
                get
                {
                    return (int) base[this.tableReportProjectUser.Assigned_TasksColumn];
                }
                set
                {
                    base[this.tableReportProjectUser.Assigned_TasksColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours_Logged
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportProjectUser.Hours_LoggedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours Logged' in table 'ReportProjectUser' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportProjectUser.Hours_LoggedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Project_Name
            {
                get
                {
                    return (int) base[this.tableReportProjectUser.Project_NameColumn];
                }
                set
                {
                    base[this.tableReportProjectUser.Project_NameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportProjectUserRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportProjectUserRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportProjectUserRowChangeEvent(CloudAccountDA.ReportProjectUserRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportProjectUserRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportProjectUserRowChangeEventHandler(object sender, CloudAccountDA.ReportProjectUserRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportRecurringAnnualDataTable : TypedTableBase<CloudAccountDA.ReportRecurringAnnualRow>
        {
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringAnnualRowChangeEventHandler ReportRecurringAnnualRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringAnnualRowChangeEventHandler ReportRecurringAnnualRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringAnnualRowChangeEventHandler ReportRecurringAnnualRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringAnnualRowChangeEventHandler ReportRecurringAnnualRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportRecurringAnnualDataTable()
            {
                base.TableName = "ReportRecurringAnnual";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportRecurringAnnualDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportRecurringAnnualDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportRecurringAnnualRow AddReportRecurringAnnualRow()
            {
                CloudAccountDA.ReportRecurringAnnualRow row = (CloudAccountDA.ReportRecurringAnnualRow) base.NewRow();
                row.ItemArray = new object[0];
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportRecurringAnnualRow(CloudAccountDA.ReportRecurringAnnualRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportRecurringAnnualDataTable table = (CloudAccountDA.ReportRecurringAnnualDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportRecurringAnnualDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportRecurringAnnualRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportRecurringAnnualDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportRecurringAnnualRow NewReportRecurringAnnualRow()
            {
                return (CloudAccountDA.ReportRecurringAnnualRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportRecurringAnnualRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportRecurringAnnualRowChanged != null)
                {
                    this.ReportRecurringAnnualRowChanged(this, new CloudAccountDA.ReportRecurringAnnualRowChangeEvent((CloudAccountDA.ReportRecurringAnnualRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportRecurringAnnualRowChanging != null)
                {
                    this.ReportRecurringAnnualRowChanging(this, new CloudAccountDA.ReportRecurringAnnualRowChangeEvent((CloudAccountDA.ReportRecurringAnnualRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportRecurringAnnualRowDeleted != null)
                {
                    this.ReportRecurringAnnualRowDeleted(this, new CloudAccountDA.ReportRecurringAnnualRowChangeEvent((CloudAccountDA.ReportRecurringAnnualRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportRecurringAnnualRowDeleting != null)
                {
                    this.ReportRecurringAnnualRowDeleting(this, new CloudAccountDA.ReportRecurringAnnualRowChangeEvent((CloudAccountDA.ReportRecurringAnnualRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportRecurringAnnualRow(CloudAccountDA.ReportRecurringAnnualRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportRecurringAnnualRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportRecurringAnnualRow) base.Rows[index];
                }
            }
        }
        
        public class ReportRecurringAnnualRow : DataRow
        {
            private CloudAccountDA.ReportRecurringAnnualDataTable tableReportRecurringAnnual;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportRecurringAnnualRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportRecurringAnnual = (CloudAccountDA.ReportRecurringAnnualDataTable) base.Table;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportRecurringAnnualRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportRecurringAnnualRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportRecurringAnnualRowChangeEvent(CloudAccountDA.ReportRecurringAnnualRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportRecurringAnnualRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportRecurringAnnualRowChangeEventHandler(object sender, CloudAccountDA.ReportRecurringAnnualRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportRecurringDetailedDataTable : TypedTableBase<CloudAccountDA.ReportRecurringDetailedRow>
        {
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringDetailedRowChangeEventHandler ReportRecurringDetailedRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringDetailedRowChangeEventHandler ReportRecurringDetailedRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringDetailedRowChangeEventHandler ReportRecurringDetailedRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRecurringDetailedRowChangeEventHandler ReportRecurringDetailedRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportRecurringDetailedDataTable()
            {
                base.TableName = "ReportRecurringDetailed";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportRecurringDetailedDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ReportRecurringDetailedDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportRecurringDetailedRow AddReportRecurringDetailedRow()
            {
                CloudAccountDA.ReportRecurringDetailedRow row = (CloudAccountDA.ReportRecurringDetailedRow) base.NewRow();
                row.ItemArray = new object[0];
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportRecurringDetailedRow(CloudAccountDA.ReportRecurringDetailedRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportRecurringDetailedDataTable table = (CloudAccountDA.ReportRecurringDetailedDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportRecurringDetailedDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportRecurringDetailedRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportRecurringDetailedDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportRecurringDetailedRow NewReportRecurringDetailedRow()
            {
                return (CloudAccountDA.ReportRecurringDetailedRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportRecurringDetailedRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportRecurringDetailedRowChanged != null)
                {
                    this.ReportRecurringDetailedRowChanged(this, new CloudAccountDA.ReportRecurringDetailedRowChangeEvent((CloudAccountDA.ReportRecurringDetailedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportRecurringDetailedRowChanging != null)
                {
                    this.ReportRecurringDetailedRowChanging(this, new CloudAccountDA.ReportRecurringDetailedRowChangeEvent((CloudAccountDA.ReportRecurringDetailedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportRecurringDetailedRowDeleted != null)
                {
                    this.ReportRecurringDetailedRowDeleted(this, new CloudAccountDA.ReportRecurringDetailedRowChangeEvent((CloudAccountDA.ReportRecurringDetailedRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportRecurringDetailedRowDeleting != null)
                {
                    this.ReportRecurringDetailedRowDeleting(this, new CloudAccountDA.ReportRecurringDetailedRowChangeEvent((CloudAccountDA.ReportRecurringDetailedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportRecurringDetailedRow(CloudAccountDA.ReportRecurringDetailedRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportRecurringDetailedRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportRecurringDetailedRow) base.Rows[index];
                }
            }
        }
        
        public class ReportRecurringDetailedRow : DataRow
        {
            private CloudAccountDA.ReportRecurringDetailedDataTable tableReportRecurringDetailed;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportRecurringDetailedRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportRecurringDetailed = (CloudAccountDA.ReportRecurringDetailedDataTable) base.Table;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportRecurringDetailedRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportRecurringDetailedRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportRecurringDetailedRowChangeEvent(CloudAccountDA.ReportRecurringDetailedRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportRecurringDetailedRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportRecurringDetailedRowChangeEventHandler(object sender, CloudAccountDA.ReportRecurringDetailedRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportRevenueByClientDataTable : TypedTableBase<CloudAccountDA.ReportRevenueByClientRow>
        {
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRevenueByClientRowChangeEventHandler ReportRevenueByClientRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRevenueByClientRowChangeEventHandler ReportRevenueByClientRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRevenueByClientRowChangeEventHandler ReportRevenueByClientRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportRevenueByClientRowChangeEventHandler ReportRevenueByClientRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportRevenueByClientDataTable()
            {
                base.TableName = "ReportRevenueByClient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportRevenueByClientDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportRevenueByClientDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportRevenueByClientRow AddReportRevenueByClientRow()
            {
                CloudAccountDA.ReportRevenueByClientRow row = (CloudAccountDA.ReportRevenueByClientRow) base.NewRow();
                row.ItemArray = new object[0];
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportRevenueByClientRow(CloudAccountDA.ReportRevenueByClientRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportRevenueByClientDataTable table = (CloudAccountDA.ReportRevenueByClientDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportRevenueByClientDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportRevenueByClientRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportRevenueByClientDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportRevenueByClientRow NewReportRevenueByClientRow()
            {
                return (CloudAccountDA.ReportRevenueByClientRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportRevenueByClientRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportRevenueByClientRowChanged != null)
                {
                    this.ReportRevenueByClientRowChanged(this, new CloudAccountDA.ReportRevenueByClientRowChangeEvent((CloudAccountDA.ReportRevenueByClientRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportRevenueByClientRowChanging != null)
                {
                    this.ReportRevenueByClientRowChanging(this, new CloudAccountDA.ReportRevenueByClientRowChangeEvent((CloudAccountDA.ReportRevenueByClientRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportRevenueByClientRowDeleted != null)
                {
                    this.ReportRevenueByClientRowDeleted(this, new CloudAccountDA.ReportRevenueByClientRowChangeEvent((CloudAccountDA.ReportRevenueByClientRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportRevenueByClientRowDeleting != null)
                {
                    this.ReportRevenueByClientRowDeleting(this, new CloudAccountDA.ReportRevenueByClientRowChangeEvent((CloudAccountDA.ReportRevenueByClientRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportRevenueByClientRow(CloudAccountDA.ReportRevenueByClientRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportRevenueByClientRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportRevenueByClientRow) base.Rows[index];
                }
            }
        }
        
        public class ReportRevenueByClientRow : DataRow
        {
            private CloudAccountDA.ReportRevenueByClientDataTable tableReportRevenueByClient;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportRevenueByClientRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportRevenueByClient = (CloudAccountDA.ReportRevenueByClientDataTable) base.Table;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportRevenueByClientRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportRevenueByClientRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportRevenueByClientRowChangeEvent(CloudAccountDA.ReportRevenueByClientRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportRevenueByClientRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportRevenueByClientRowChangeEventHandler(object sender, CloudAccountDA.ReportRevenueByClientRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportTasksInvoicedDataTable : TypedTableBase<CloudAccountDA.ReportTasksInvoicedRow>
        {
            private DataColumn columnClient_Name;
            private DataColumn columnDiscount_Amount;
            private DataColumn columnHours;
            private DataColumn columnInvoice;
            private DataColumn columnInvoice_Date;
            private DataColumn columnRate;
            private DataColumn columnTotal;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTasksInvoicedRowChangeEventHandler ReportTasksInvoicedRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTasksInvoicedRowChangeEventHandler ReportTasksInvoicedRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTasksInvoicedRowChangeEventHandler ReportTasksInvoicedRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTasksInvoicedRowChangeEventHandler ReportTasksInvoicedRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTasksInvoicedDataTable()
            {
                base.TableName = "ReportTasksInvoiced";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportTasksInvoicedDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ReportTasksInvoicedDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportTasksInvoicedRow(CloudAccountDA.ReportTasksInvoicedRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTasksInvoicedRow AddReportTasksInvoicedRow(int Client_Name, string Invoice, DateTime Invoice_Date, decimal Rate, decimal Hours, decimal Discount_Amount, decimal Total)
            {
                CloudAccountDA.ReportTasksInvoicedRow row = (CloudAccountDA.ReportTasksInvoicedRow) base.NewRow();
                row.ItemArray = new object[] { Client_Name, Invoice, Invoice_Date, Rate, Hours, Discount_Amount, Total };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportTasksInvoicedDataTable table = (CloudAccountDA.ReportTasksInvoicedDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportTasksInvoicedDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportTasksInvoicedRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportTasksInvoicedDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnClient_Name = new DataColumn("Client Name", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClient_Name);
                this.columnInvoice = new DataColumn("Invoice", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoice);
                this.columnInvoice_Date = new DataColumn("Invoice Date", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnInvoice_Date);
                this.columnRate = new DataColumn("Rate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnDiscount_Amount = new DataColumn("Discount Amount", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnDiscount_Amount);
                this.columnTotal = new DataColumn("Total", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnInvoice.MaxLength = 50;
                this.columnRate.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnClient_Name = base.Columns["Client Name"];
                this.columnInvoice = base.Columns["Invoice"];
                this.columnInvoice_Date = base.Columns["Invoice Date"];
                this.columnRate = base.Columns["Rate"];
                this.columnHours = base.Columns["Hours"];
                this.columnDiscount_Amount = base.Columns["Discount Amount"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTasksInvoicedRow NewReportTasksInvoicedRow()
            {
                return (CloudAccountDA.ReportTasksInvoicedRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportTasksInvoicedRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportTasksInvoicedRowChanged != null)
                {
                    this.ReportTasksInvoicedRowChanged(this, new CloudAccountDA.ReportTasksInvoicedRowChangeEvent((CloudAccountDA.ReportTasksInvoicedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportTasksInvoicedRowChanging != null)
                {
                    this.ReportTasksInvoicedRowChanging(this, new CloudAccountDA.ReportTasksInvoicedRowChangeEvent((CloudAccountDA.ReportTasksInvoicedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportTasksInvoicedRowDeleted != null)
                {
                    this.ReportTasksInvoicedRowDeleted(this, new CloudAccountDA.ReportTasksInvoicedRowChangeEvent((CloudAccountDA.ReportTasksInvoicedRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportTasksInvoicedRowDeleting != null)
                {
                    this.ReportTasksInvoicedRowDeleting(this, new CloudAccountDA.ReportTasksInvoicedRowChangeEvent((CloudAccountDA.ReportTasksInvoicedRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportTasksInvoicedRow(CloudAccountDA.ReportTasksInvoicedRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Client_NameColumn
            {
                get
                {
                    return this.columnClient_Name;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Discount_AmountColumn
            {
                get
                {
                    return this.columnDiscount_Amount;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Invoice_DateColumn
            {
                get
                {
                    return this.columnInvoice_Date;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceColumn
            {
                get
                {
                    return this.columnInvoice;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTasksInvoicedRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportTasksInvoicedRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RateColumn
            {
                get
                {
                    return this.columnRate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TotalColumn
            {
                get
                {
                    return this.columnTotal;
                }
            }
        }
        
        public class ReportTasksInvoicedRow : DataRow
        {
            private CloudAccountDA.ReportTasksInvoicedDataTable tableReportTasksInvoiced;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTasksInvoicedRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportTasksInvoiced = (CloudAccountDA.ReportTasksInvoicedDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClient_NameNull()
            {
                return base.IsNull(this.tableReportTasksInvoiced.Client_NameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDiscount_AmountNull()
            {
                return base.IsNull(this.tableReportTasksInvoiced.Discount_AmountColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportTasksInvoiced.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsInvoice_DateNull()
            {
                return base.IsNull(this.tableReportTasksInvoiced.Invoice_DateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInvoiceNull()
            {
                return base.IsNull(this.tableReportTasksInvoiced.InvoiceColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTotalNull()
            {
                return base.IsNull(this.tableReportTasksInvoiced.TotalColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClient_NameNull()
            {
                base[this.tableReportTasksInvoiced.Client_NameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDiscount_AmountNull()
            {
                base[this.tableReportTasksInvoiced.Discount_AmountColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableReportTasksInvoiced.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoice_DateNull()
            {
                base[this.tableReportTasksInvoiced.Invoice_DateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceNull()
            {
                base[this.tableReportTasksInvoiced.InvoiceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTotalNull()
            {
                base[this.tableReportTasksInvoiced.TotalColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Client_Name
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableReportTasksInvoiced.Client_NameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client Name' in table 'ReportTasksInvoiced' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTasksInvoiced.Client_NameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Discount_Amount
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportTasksInvoiced.Discount_AmountColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Discount Amount' in table 'ReportTasksInvoiced' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTasksInvoiced.Discount_AmountColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportTasksInvoiced.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportTasksInvoiced' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTasksInvoiced.HoursColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Invoice
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTasksInvoiced.InvoiceColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Invoice' in table 'ReportTasksInvoiced' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTasksInvoiced.InvoiceColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime Invoice_Date
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableReportTasksInvoiced.Invoice_DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Invoice Date' in table 'ReportTasksInvoiced' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableReportTasksInvoiced.Invoice_DateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Rate
            {
                get
                {
                    return (decimal) base[this.tableReportTasksInvoiced.RateColumn];
                }
                set
                {
                    base[this.tableReportTasksInvoiced.RateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Total
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportTasksInvoiced.TotalColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Total' in table 'ReportTasksInvoiced' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTasksInvoiced.TotalColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportTasksInvoicedRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportTasksInvoicedRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTasksInvoicedRowChangeEvent(CloudAccountDA.ReportTasksInvoicedRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTasksInvoicedRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportTasksInvoicedRowChangeEventHandler(object sender, CloudAccountDA.ReportTasksInvoicedRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportTaxSummaryDataTable : TypedTableBase<CloudAccountDA.ReportTaxSummaryRow>
        {
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTaxSummaryRowChangeEventHandler ReportTaxSummaryRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTaxSummaryRowChangeEventHandler ReportTaxSummaryRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTaxSummaryRowChangeEventHandler ReportTaxSummaryRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTaxSummaryRowChangeEventHandler ReportTaxSummaryRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportTaxSummaryDataTable()
            {
                base.TableName = "ReportTaxSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTaxSummaryDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportTaxSummaryDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTaxSummaryRow AddReportTaxSummaryRow()
            {
                CloudAccountDA.ReportTaxSummaryRow row = (CloudAccountDA.ReportTaxSummaryRow) base.NewRow();
                row.ItemArray = new object[0];
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportTaxSummaryRow(CloudAccountDA.ReportTaxSummaryRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportTaxSummaryDataTable table = (CloudAccountDA.ReportTaxSummaryDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportTaxSummaryDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportTaxSummaryRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportTaxSummaryDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTaxSummaryRow NewReportTaxSummaryRow()
            {
                return (CloudAccountDA.ReportTaxSummaryRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportTaxSummaryRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportTaxSummaryRowChanged != null)
                {
                    this.ReportTaxSummaryRowChanged(this, new CloudAccountDA.ReportTaxSummaryRowChangeEvent((CloudAccountDA.ReportTaxSummaryRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportTaxSummaryRowChanging != null)
                {
                    this.ReportTaxSummaryRowChanging(this, new CloudAccountDA.ReportTaxSummaryRowChangeEvent((CloudAccountDA.ReportTaxSummaryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportTaxSummaryRowDeleted != null)
                {
                    this.ReportTaxSummaryRowDeleted(this, new CloudAccountDA.ReportTaxSummaryRowChangeEvent((CloudAccountDA.ReportTaxSummaryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportTaxSummaryRowDeleting != null)
                {
                    this.ReportTaxSummaryRowDeleting(this, new CloudAccountDA.ReportTaxSummaryRowChangeEvent((CloudAccountDA.ReportTaxSummaryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportTaxSummaryRow(CloudAccountDA.ReportTaxSummaryRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTaxSummaryRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportTaxSummaryRow) base.Rows[index];
                }
            }
        }
        
        public class ReportTaxSummaryRow : DataRow
        {
            private CloudAccountDA.ReportTaxSummaryDataTable tableReportTaxSummary;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTaxSummaryRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportTaxSummary = (CloudAccountDA.ReportTaxSummaryDataTable) base.Table;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportTaxSummaryRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportTaxSummaryRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTaxSummaryRowChangeEvent(CloudAccountDA.ReportTaxSummaryRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTaxSummaryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportTaxSummaryRowChangeEventHandler(object sender, CloudAccountDA.ReportTaxSummaryRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportTimesheetDataTable : TypedTableBase<CloudAccountDA.ReportTimesheetRow>
        {
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetRowChangeEventHandler ReportTimesheetRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetRowChangeEventHandler ReportTimesheetRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetRowChangeEventHandler ReportTimesheetRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetRowChangeEventHandler ReportTimesheetRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportTimesheetDataTable()
            {
                base.TableName = "ReportTimesheet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportTimesheetDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ReportTimesheetDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetRow AddReportTimesheetRow()
            {
                CloudAccountDA.ReportTimesheetRow row = (CloudAccountDA.ReportTimesheetRow) base.NewRow();
                row.ItemArray = new object[0];
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportTimesheetRow(CloudAccountDA.ReportTimesheetRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportTimesheetDataTable table = (CloudAccountDA.ReportTimesheetDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportTimesheetDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportTimesheetRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportTimesheetDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTimesheetRow NewReportTimesheetRow()
            {
                return (CloudAccountDA.ReportTimesheetRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportTimesheetRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportTimesheetRowChanged != null)
                {
                    this.ReportTimesheetRowChanged(this, new CloudAccountDA.ReportTimesheetRowChangeEvent((CloudAccountDA.ReportTimesheetRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportTimesheetRowChanging != null)
                {
                    this.ReportTimesheetRowChanging(this, new CloudAccountDA.ReportTimesheetRowChangeEvent((CloudAccountDA.ReportTimesheetRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportTimesheetRowDeleted != null)
                {
                    this.ReportTimesheetRowDeleted(this, new CloudAccountDA.ReportTimesheetRowChangeEvent((CloudAccountDA.ReportTimesheetRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportTimesheetRowDeleting != null)
                {
                    this.ReportTimesheetRowDeleting(this, new CloudAccountDA.ReportTimesheetRowChangeEvent((CloudAccountDA.ReportTimesheetRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveReportTimesheetRow(CloudAccountDA.ReportTimesheetRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportTimesheetRow) base.Rows[index];
                }
            }
        }
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportTimesheetDetailsClientDataTable : TypedTableBase<CloudAccountDA.ReportTimesheetDetailsClientRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnDate;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnProject;
            private DataColumn columnTask;
            private DataColumn columnTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsClientRowChangeEventHandler ReportTimesheetDetailsClientRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsClientRowChangeEventHandler ReportTimesheetDetailsClientRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsClientRowChangeEventHandler ReportTimesheetDetailsClientRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsClientRowChangeEventHandler ReportTimesheetDetailsClientRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportTimesheetDetailsClientDataTable()
            {
                base.TableName = "ReportTimesheetDetailsClient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTimesheetDetailsClientDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportTimesheetDetailsClientDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportTimesheetDetailsClientRow(CloudAccountDA.ReportTimesheetDetailsClientRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTimesheetDetailsClientRow AddReportTimesheetDetailsClientRow(string Date, string Team, string Project, string Task, string Notes, string Billed, decimal Hours)
            {
                CloudAccountDA.ReportTimesheetDetailsClientRow row = (CloudAccountDA.ReportTimesheetDetailsClientRow) base.NewRow();
                row.ItemArray = new object[] { Date, Team, Project, Task, Notes, Billed, Hours };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportTimesheetDetailsClientDataTable table = (CloudAccountDA.ReportTimesheetDetailsClientDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportTimesheetDetailsClientDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportTimesheetDetailsClientRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportTimesheetDetailsClientDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTeam = new DataColumn("Team", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnProject = new DataColumn("Project", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnTask = new DataColumn("Task", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTask);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnTeam.ReadOnly = true;
                this.columnTeam.MaxLength = 100;
                this.columnProject.MaxLength = 150;
                this.columnTask.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnTeam = base.Columns["Team"];
                this.columnProject = base.Columns["Project"];
                this.columnTask = base.Columns["Task"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTimesheetDetailsClientRow NewReportTimesheetDetailsClientRow()
            {
                return (CloudAccountDA.ReportTimesheetDetailsClientRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportTimesheetDetailsClientRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportTimesheetDetailsClientRowChanged != null)
                {
                    this.ReportTimesheetDetailsClientRowChanged(this, new CloudAccountDA.ReportTimesheetDetailsClientRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsClientRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportTimesheetDetailsClientRowChanging != null)
                {
                    this.ReportTimesheetDetailsClientRowChanging(this, new CloudAccountDA.ReportTimesheetDetailsClientRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsClientRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportTimesheetDetailsClientRowDeleted != null)
                {
                    this.ReportTimesheetDetailsClientRowDeleted(this, new CloudAccountDA.ReportTimesheetDetailsClientRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsClientRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportTimesheetDetailsClientRowDeleting != null)
                {
                    this.ReportTimesheetDetailsClientRowDeleting(this, new CloudAccountDA.ReportTimesheetDetailsClientRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsClientRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportTimesheetDetailsClientRow(CloudAccountDA.ReportTimesheetDetailsClientRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsClientRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportTimesheetDetailsClientRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectColumn
            {
                get
                {
                    return this.columnProject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskColumn
            {
                get
                {
                    return this.columnTask;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }
        }
        
        public class ReportTimesheetDetailsClientRow : DataRow
        {
            private CloudAccountDA.ReportTimesheetDetailsClientDataTable tableReportTimesheetDetailsClient;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportTimesheetDetailsClientRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportTimesheetDetailsClient = (CloudAccountDA.ReportTimesheetDetailsClientDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsClient.BilledColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsClient.DateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsClient.HoursColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsClient.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsClient.ProjectColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaskNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsClient.TaskColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTeamNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsClient.TeamColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBilledNull()
            {
                base[this.tableReportTimesheetDetailsClient.BilledColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateNull()
            {
                base[this.tableReportTimesheetDetailsClient.DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableReportTimesheetDetailsClient.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableReportTimesheetDetailsClient.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjectNull()
            {
                base[this.tableReportTimesheetDetailsClient.ProjectColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaskNull()
            {
                base[this.tableReportTimesheetDetailsClient.TaskColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTeamNull()
            {
                base[this.tableReportTimesheetDetailsClient.TeamColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsClient.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportTimesheetDetailsClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsClient.BilledColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsClient.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportTimesheetDetailsClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsClient.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportTimesheetDetailsClient.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportTimesheetDetailsClient' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsClient.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsClient.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportTimesheetDetailsClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsClient.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Project
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsClient.ProjectColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Project' in table 'ReportTimesheetDetailsClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsClient.ProjectColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Task
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsClient.TaskColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Task' in table 'ReportTimesheetDetailsClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsClient.TaskColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Team
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsClient.TeamColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Team' in table 'ReportTimesheetDetailsClient' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsClient.TeamColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportTimesheetDetailsClientRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportTimesheetDetailsClientRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTimesheetDetailsClientRowChangeEvent(CloudAccountDA.ReportTimesheetDetailsClientRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsClientRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportTimesheetDetailsClientRowChangeEventHandler(object sender, CloudAccountDA.ReportTimesheetDetailsClientRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportTimesheetDetailsProjectDataTable : TypedTableBase<CloudAccountDA.ReportTimesheetDetailsProjectRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnClient;
            private DataColumn columnDate;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnTask;
            private DataColumn columnTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEventHandler ReportTimesheetDetailsProjectRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEventHandler ReportTimesheetDetailsProjectRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEventHandler ReportTimesheetDetailsProjectRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEventHandler ReportTimesheetDetailsProjectRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportTimesheetDetailsProjectDataTable()
            {
                base.TableName = "ReportTimesheetDetailsProject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTimesheetDetailsProjectDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected ReportTimesheetDetailsProjectDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportTimesheetDetailsProjectRow(CloudAccountDA.ReportTimesheetDetailsProjectRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsProjectRow AddReportTimesheetDetailsProjectRow(string Date, string Team, string Client, string Task, string Notes, string Billed, decimal Hours)
            {
                CloudAccountDA.ReportTimesheetDetailsProjectRow row = (CloudAccountDA.ReportTimesheetDetailsProjectRow) base.NewRow();
                row.ItemArray = new object[] { Date, Team, Client, Task, Notes, Billed, Hours };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportTimesheetDetailsProjectDataTable table = (CloudAccountDA.ReportTimesheetDetailsProjectDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportTimesheetDetailsProjectDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportTimesheetDetailsProjectRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportTimesheetDetailsProjectDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTeam = new DataColumn("Team", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnClient = new DataColumn("Client", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnTask = new DataColumn("Task", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTask);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnTeam.ReadOnly = true;
                this.columnTeam.MaxLength = 100;
                this.columnClient.ReadOnly = true;
                this.columnClient.MaxLength = 200;
                this.columnTask.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnTeam = base.Columns["Team"];
                this.columnClient = base.Columns["Client"];
                this.columnTask = base.Columns["Task"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTimesheetDetailsProjectRow NewReportTimesheetDetailsProjectRow()
            {
                return (CloudAccountDA.ReportTimesheetDetailsProjectRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportTimesheetDetailsProjectRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportTimesheetDetailsProjectRowChanged != null)
                {
                    this.ReportTimesheetDetailsProjectRowChanged(this, new CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsProjectRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportTimesheetDetailsProjectRowChanging != null)
                {
                    this.ReportTimesheetDetailsProjectRowChanging(this, new CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsProjectRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportTimesheetDetailsProjectRowDeleted != null)
                {
                    this.ReportTimesheetDetailsProjectRowDeleted(this, new CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsProjectRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportTimesheetDetailsProjectRowDeleting != null)
                {
                    this.ReportTimesheetDetailsProjectRowDeleting(this, new CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsProjectRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportTimesheetDetailsProjectRow(CloudAccountDA.ReportTimesheetDetailsProjectRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientColumn
            {
                get
                {
                    return this.columnClient;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsProjectRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportTimesheetDetailsProjectRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskColumn
            {
                get
                {
                    return this.columnTask;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }
        }
        
        public class ReportTimesheetDetailsProjectRow : DataRow
        {
            private CloudAccountDA.ReportTimesheetDetailsProjectDataTable tableReportTimesheetDetailsProject;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTimesheetDetailsProjectRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportTimesheetDetailsProject = (CloudAccountDA.ReportTimesheetDetailsProjectDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsProject.BilledColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsClientNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsProject.ClientColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsProject.DateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsProject.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsProject.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsProject.TaskColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTeamNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsProject.TeamColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBilledNull()
            {
                base[this.tableReportTimesheetDetailsProject.BilledColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClientNull()
            {
                base[this.tableReportTimesheetDetailsProject.ClientColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateNull()
            {
                base[this.tableReportTimesheetDetailsProject.DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableReportTimesheetDetailsProject.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableReportTimesheetDetailsProject.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaskNull()
            {
                base[this.tableReportTimesheetDetailsProject.TaskColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTeamNull()
            {
                base[this.tableReportTimesheetDetailsProject.TeamColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsProject.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportTimesheetDetailsProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsProject.BilledColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Client
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsProject.ClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client' in table 'ReportTimesheetDetailsProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsProject.ClientColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsProject.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportTimesheetDetailsProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsProject.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportTimesheetDetailsProject.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportTimesheetDetailsProject' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsProject.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsProject.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportTimesheetDetailsProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsProject.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Task
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsProject.TaskColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Task' in table 'ReportTimesheetDetailsProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsProject.TaskColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsProject.TeamColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Team' in table 'ReportTimesheetDetailsProject' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsProject.TeamColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportTimesheetDetailsProjectRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportTimesheetDetailsProjectRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTimesheetDetailsProjectRowChangeEvent(CloudAccountDA.ReportTimesheetDetailsProjectRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsProjectRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportTimesheetDetailsProjectRowChangeEventHandler(object sender, CloudAccountDA.ReportTimesheetDetailsProjectRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportTimesheetDetailsTaskDataTable : TypedTableBase<CloudAccountDA.ReportTimesheetDetailsTaskRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnClient;
            private DataColumn columnDate;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnProject;
            private DataColumn columnTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEventHandler ReportTimesheetDetailsTaskRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEventHandler ReportTimesheetDetailsTaskRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEventHandler ReportTimesheetDetailsTaskRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEventHandler ReportTimesheetDetailsTaskRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTimesheetDetailsTaskDataTable()
            {
                base.TableName = "ReportTimesheetDetailsTask";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportTimesheetDetailsTaskDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportTimesheetDetailsTaskDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddReportTimesheetDetailsTaskRow(CloudAccountDA.ReportTimesheetDetailsTaskRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTimesheetDetailsTaskRow AddReportTimesheetDetailsTaskRow(string Date, string Team, string Client, string Project, string Notes, string Billed, decimal Hours)
            {
                CloudAccountDA.ReportTimesheetDetailsTaskRow row = (CloudAccountDA.ReportTimesheetDetailsTaskRow) base.NewRow();
                row.ItemArray = new object[] { Date, Team, Client, Project, Notes, Billed, Hours };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportTimesheetDetailsTaskDataTable table = (CloudAccountDA.ReportTimesheetDetailsTaskDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportTimesheetDetailsTaskDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportTimesheetDetailsTaskRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportTimesheetDetailsTaskDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTeam = new DataColumn("Team", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnClient = new DataColumn("Client", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnProject = new DataColumn("Project", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnTeam.ReadOnly = true;
                this.columnTeam.MaxLength = 100;
                this.columnClient.ReadOnly = true;
                this.columnClient.MaxLength = 200;
                this.columnProject.MaxLength = 150;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnTeam = base.Columns["Team"];
                this.columnClient = base.Columns["Client"];
                this.columnProject = base.Columns["Project"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsTaskRow NewReportTimesheetDetailsTaskRow()
            {
                return (CloudAccountDA.ReportTimesheetDetailsTaskRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportTimesheetDetailsTaskRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportTimesheetDetailsTaskRowChanged != null)
                {
                    this.ReportTimesheetDetailsTaskRowChanged(this, new CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTaskRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportTimesheetDetailsTaskRowChanging != null)
                {
                    this.ReportTimesheetDetailsTaskRowChanging(this, new CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTaskRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportTimesheetDetailsTaskRowDeleted != null)
                {
                    this.ReportTimesheetDetailsTaskRowDeleted(this, new CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTaskRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportTimesheetDetailsTaskRowDeleting != null)
                {
                    this.ReportTimesheetDetailsTaskRowDeleting(this, new CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTaskRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportTimesheetDetailsTaskRow(CloudAccountDA.ReportTimesheetDetailsTaskRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ClientColumn
            {
                get
                {
                    return this.columnClient;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.ReportTimesheetDetailsTaskRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportTimesheetDetailsTaskRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectColumn
            {
                get
                {
                    return this.columnProject;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TeamColumn
            {
                get
                {
                    return this.columnTeam;
                }
            }
        }
        
        public class ReportTimesheetDetailsTaskRow : DataRow
        {
            private CloudAccountDA.ReportTimesheetDetailsTaskDataTable tableReportTimesheetDetailsTask;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ReportTimesheetDetailsTaskRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportTimesheetDetailsTask = (CloudAccountDA.ReportTimesheetDetailsTaskDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTask.BilledColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsClientNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTask.ClientColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTask.DateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTask.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTask.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTask.ProjectColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTeamNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTask.TeamColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBilledNull()
            {
                base[this.tableReportTimesheetDetailsTask.BilledColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetClientNull()
            {
                base[this.tableReportTimesheetDetailsTask.ClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDateNull()
            {
                base[this.tableReportTimesheetDetailsTask.DateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableReportTimesheetDetailsTask.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableReportTimesheetDetailsTask.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetProjectNull()
            {
                base[this.tableReportTimesheetDetailsTask.ProjectColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTeamNull()
            {
                base[this.tableReportTimesheetDetailsTask.TeamColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTask.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportTimesheetDetailsTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTask.BilledColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Client
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTask.ClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client' in table 'ReportTimesheetDetailsTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTask.ClientColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTask.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportTimesheetDetailsTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTask.DateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportTimesheetDetailsTask.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportTimesheetDetailsTask' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTask.HoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTask.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportTimesheetDetailsTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTask.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Project
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTask.ProjectColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Project' in table 'ReportTimesheetDetailsTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTask.ProjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Team
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTask.TeamColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Team' in table 'ReportTimesheetDetailsTask' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTask.TeamColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportTimesheetDetailsTaskRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportTimesheetDetailsTaskRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportTimesheetDetailsTaskRowChangeEvent(CloudAccountDA.ReportTimesheetDetailsTaskRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsTaskRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportTimesheetDetailsTaskRowChangeEventHandler(object sender, CloudAccountDA.ReportTimesheetDetailsTaskRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class ReportTimesheetDetailsTeamDataTable : TypedTableBase<CloudAccountDA.ReportTimesheetDetailsTeamRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnClient;
            private DataColumn columnDate;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnProject;
            private DataColumn columnTask;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEventHandler ReportTimesheetDetailsTeamRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEventHandler ReportTimesheetDetailsTeamRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEventHandler ReportTimesheetDetailsTeamRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEventHandler ReportTimesheetDetailsTeamRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTimesheetDetailsTeamDataTable()
            {
                base.TableName = "ReportTimesheetDetailsTeam";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTimesheetDetailsTeamDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ReportTimesheetDetailsTeamDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddReportTimesheetDetailsTeamRow(CloudAccountDA.ReportTimesheetDetailsTeamRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsTeamRow AddReportTimesheetDetailsTeamRow(string Date, string Client, string Project, string Task, string Notes, string Billed, decimal Hours)
            {
                CloudAccountDA.ReportTimesheetDetailsTeamRow row = (CloudAccountDA.ReportTimesheetDetailsTeamRow) base.NewRow();
                row.ItemArray = new object[] { Date, Client, Project, Task, Notes, Billed, Hours };
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.ReportTimesheetDetailsTeamDataTable table = (CloudAccountDA.ReportTimesheetDetailsTeamDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.ReportTimesheetDetailsTeamDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.ReportTimesheetDetailsTeamRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "ReportTimesheetDetailsTeamDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnDate = new DataColumn("Date", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnClient = new DataColumn("Client", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnProject = new DataColumn("Project", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnTask = new DataColumn("Task", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTask);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnDate.ReadOnly = true;
                this.columnDate.MaxLength = 9;
                this.columnClient.ReadOnly = true;
                this.columnClient.MaxLength = 200;
                this.columnProject.MaxLength = 150;
                this.columnTask.MaxLength = 50;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.ReadOnly = true;
                this.columnBilled.MaxLength = 3;
                this.columnHours.ReadOnly = true;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnDate = base.Columns["Date"];
                this.columnClient = base.Columns["Client"];
                this.columnProject = base.Columns["Project"];
                this.columnTask = base.Columns["Task"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnHours = base.Columns["Hours"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsTeamRow NewReportTimesheetDetailsTeamRow()
            {
                return (CloudAccountDA.ReportTimesheetDetailsTeamRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.ReportTimesheetDetailsTeamRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.ReportTimesheetDetailsTeamRowChanged != null)
                {
                    this.ReportTimesheetDetailsTeamRowChanged(this, new CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTeamRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.ReportTimesheetDetailsTeamRowChanging != null)
                {
                    this.ReportTimesheetDetailsTeamRowChanging(this, new CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTeamRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.ReportTimesheetDetailsTeamRowDeleted != null)
                {
                    this.ReportTimesheetDetailsTeamRowDeleted(this, new CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTeamRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.ReportTimesheetDetailsTeamRowDeleting != null)
                {
                    this.ReportTimesheetDetailsTeamRowDeleting(this, new CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEvent((CloudAccountDA.ReportTimesheetDetailsTeamRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveReportTimesheetDetailsTeamRow(CloudAccountDA.ReportTimesheetDetailsTeamRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientColumn
            {
                get
                {
                    return this.columnClient;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsTeamRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.ReportTimesheetDetailsTeamRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ProjectColumn
            {
                get
                {
                    return this.columnProject;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskColumn
            {
                get
                {
                    return this.columnTask;
                }
            }
        }
        
        public class ReportTimesheetDetailsTeamRow : DataRow
        {
            private CloudAccountDA.ReportTimesheetDetailsTeamDataTable tableReportTimesheetDetailsTeam;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTimesheetDetailsTeamRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportTimesheetDetailsTeam = (CloudAccountDA.ReportTimesheetDetailsTeamDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsBilledNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTeam.BilledColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsClientNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTeam.ClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTeam.DateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTeam.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTeam.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjectNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTeam.ProjectColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaskNull()
            {
                return base.IsNull(this.tableReportTimesheetDetailsTeam.TaskColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBilledNull()
            {
                base[this.tableReportTimesheetDetailsTeam.BilledColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClientNull()
            {
                base[this.tableReportTimesheetDetailsTeam.ClientColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetDateNull()
            {
                base[this.tableReportTimesheetDetailsTeam.DateColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHoursNull()
            {
                base[this.tableReportTimesheetDetailsTeam.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNotesNull()
            {
                base[this.tableReportTimesheetDetailsTeam.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetProjectNull()
            {
                base[this.tableReportTimesheetDetailsTeam.ProjectColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaskNull()
            {
                base[this.tableReportTimesheetDetailsTeam.TaskColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Billed
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTeam.BilledColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Billed' in table 'ReportTimesheetDetailsTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTeam.BilledColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Client
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTeam.ClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Client' in table 'ReportTimesheetDetailsTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTeam.ClientColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Date
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTeam.DateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Date' in table 'ReportTimesheetDetailsTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTeam.DateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableReportTimesheetDetailsTeam.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'ReportTimesheetDetailsTeam' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTeam.HoursColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTeam.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'ReportTimesheetDetailsTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTeam.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Project
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTeam.ProjectColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Project' in table 'ReportTimesheetDetailsTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTeam.ProjectColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Task
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableReportTimesheetDetailsTeam.TaskColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Task' in table 'ReportTimesheetDetailsTeam' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableReportTimesheetDetailsTeam.TaskColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportTimesheetDetailsTeamRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportTimesheetDetailsTeamRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public ReportTimesheetDetailsTeamRowChangeEvent(CloudAccountDA.ReportTimesheetDetailsTeamRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetDetailsTeamRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportTimesheetDetailsTeamRowChangeEventHandler(object sender, CloudAccountDA.ReportTimesheetDetailsTeamRowChangeEvent e);
        
        public class ReportTimesheetRow : DataRow
        {
            private CloudAccountDA.ReportTimesheetDataTable tableReportTimesheet;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal ReportTimesheetRow(DataRowBuilder rb) : base(rb)
            {
                this.tableReportTimesheet = (CloudAccountDA.ReportTimesheetDataTable) base.Table;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ReportTimesheetRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.ReportTimesheetRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ReportTimesheetRowChangeEvent(CloudAccountDA.ReportTimesheetRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.ReportTimesheetRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ReportTimesheetRowChangeEventHandler(object sender, CloudAccountDA.ReportTimesheetRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class RunningFromMasterDataTable : TypedTableBase<CloudAccountDA.RunningFromMasterRow>
        {
            private DataColumn columnRunningFrom;
            private DataColumn columnRunningFromDesc;
            private DataColumn columnRunningFromID;
            private DataColumn columnRunningFromStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RunningFromMasterRowChangeEventHandler RunningFromMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RunningFromMasterRowChangeEventHandler RunningFromMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RunningFromMasterRowChangeEventHandler RunningFromMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.RunningFromMasterRowChangeEventHandler RunningFromMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RunningFromMasterDataTable()
            {
                base.TableName = "RunningFromMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RunningFromMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected RunningFromMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddRunningFromMasterRow(CloudAccountDA.RunningFromMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RunningFromMasterRow AddRunningFromMasterRow(string RunningFrom, string RunningFromDesc, bool RunningFromStatus)
            {
                CloudAccountDA.RunningFromMasterRow row = (CloudAccountDA.RunningFromMasterRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = RunningFrom;
                objArray2[2] = RunningFromDesc;
                objArray2[3] = RunningFromStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.RunningFromMasterDataTable table = (CloudAccountDA.RunningFromMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.RunningFromMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RunningFromMasterRow FindByRunningFromID(int RunningFromID)
            {
                return (CloudAccountDA.RunningFromMasterRow) base.Rows.Find(new object[] { RunningFromID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.RunningFromMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "RunningFromMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnRunningFromID = new DataColumn("RunningFromID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnRunningFromID);
                this.columnRunningFrom = new DataColumn("RunningFrom", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRunningFrom);
                this.columnRunningFromDesc = new DataColumn("RunningFromDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnRunningFromDesc);
                this.columnRunningFromStatus = new DataColumn("RunningFromStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnRunningFromStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnRunningFromID }, true));
                this.columnRunningFromID.AutoIncrement = true;
                this.columnRunningFromID.AutoIncrementSeed = -1L;
                this.columnRunningFromID.AutoIncrementStep = -1L;
                this.columnRunningFromID.AllowDBNull = false;
                this.columnRunningFromID.ReadOnly = true;
                this.columnRunningFromID.Unique = true;
                this.columnRunningFrom.AllowDBNull = false;
                this.columnRunningFrom.MaxLength = 100;
                this.columnRunningFromDesc.MaxLength = 500;
                this.columnRunningFromStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnRunningFromID = base.Columns["RunningFromID"];
                this.columnRunningFrom = base.Columns["RunningFrom"];
                this.columnRunningFromDesc = base.Columns["RunningFromDesc"];
                this.columnRunningFromStatus = base.Columns["RunningFromStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.RunningFromMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RunningFromMasterRow NewRunningFromMasterRow()
            {
                return (CloudAccountDA.RunningFromMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.RunningFromMasterRowChanged != null)
                {
                    this.RunningFromMasterRowChanged(this, new CloudAccountDA.RunningFromMasterRowChangeEvent((CloudAccountDA.RunningFromMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.RunningFromMasterRowChanging != null)
                {
                    this.RunningFromMasterRowChanging(this, new CloudAccountDA.RunningFromMasterRowChangeEvent((CloudAccountDA.RunningFromMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.RunningFromMasterRowDeleted != null)
                {
                    this.RunningFromMasterRowDeleted(this, new CloudAccountDA.RunningFromMasterRowChangeEvent((CloudAccountDA.RunningFromMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.RunningFromMasterRowDeleting != null)
                {
                    this.RunningFromMasterRowDeleting(this, new CloudAccountDA.RunningFromMasterRowChangeEvent((CloudAccountDA.RunningFromMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRunningFromMasterRow(CloudAccountDA.RunningFromMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RunningFromMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.RunningFromMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RunningFromColumn
            {
                get
                {
                    return this.columnRunningFrom;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RunningFromDescColumn
            {
                get
                {
                    return this.columnRunningFromDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RunningFromIDColumn
            {
                get
                {
                    return this.columnRunningFromID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RunningFromStatusColumn
            {
                get
                {
                    return this.columnRunningFromStatus;
                }
            }
        }
        
        public class RunningFromMasterRow : DataRow
        {
            private CloudAccountDA.RunningFromMasterDataTable tableRunningFromMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal RunningFromMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableRunningFromMaster = (CloudAccountDA.RunningFromMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRunningFromDescNull()
            {
                return base.IsNull(this.tableRunningFromMaster.RunningFromDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRunningFromDescNull()
            {
                base[this.tableRunningFromMaster.RunningFromDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string RunningFrom
            {
                get
                {
                    return (string) base[this.tableRunningFromMaster.RunningFromColumn];
                }
                set
                {
                    base[this.tableRunningFromMaster.RunningFromColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string RunningFromDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableRunningFromMaster.RunningFromDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RunningFromDesc' in table 'RunningFromMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableRunningFromMaster.RunningFromDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RunningFromID
            {
                get
                {
                    return (int) base[this.tableRunningFromMaster.RunningFromIDColumn];
                }
                set
                {
                    base[this.tableRunningFromMaster.RunningFromIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool RunningFromStatus
            {
                get
                {
                    return (bool) base[this.tableRunningFromMaster.RunningFromStatusColumn];
                }
                set
                {
                    base[this.tableRunningFromMaster.RunningFromStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RunningFromMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.RunningFromMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RunningFromMasterRowChangeEvent(CloudAccountDA.RunningFromMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.RunningFromMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RunningFromMasterRowChangeEventHandler(object sender, CloudAccountDA.RunningFromMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class SecurityQuestionMasterDataTable : TypedTableBase<CloudAccountDA.SecurityQuestionMasterRow>
        {
            private DataColumn columnDefaultAnswer;
            private DataColumn columnDescription;
            private DataColumn columnQuestion;
            private DataColumn columnSecurityQuestionID;
            private DataColumn columnStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SecurityQuestionMasterRowChangeEventHandler SecurityQuestionMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SecurityQuestionMasterRowChangeEventHandler SecurityQuestionMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SecurityQuestionMasterRowChangeEventHandler SecurityQuestionMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SecurityQuestionMasterRowChangeEventHandler SecurityQuestionMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SecurityQuestionMasterDataTable()
            {
                base.TableName = "SecurityQuestionMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal SecurityQuestionMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SecurityQuestionMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddSecurityQuestionMasterRow(CloudAccountDA.SecurityQuestionMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SecurityQuestionMasterRow AddSecurityQuestionMasterRow(string Question, string DefaultAnswer, string Description, bool Status)
            {
                CloudAccountDA.SecurityQuestionMasterRow row = (CloudAccountDA.SecurityQuestionMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = Question;
                objArray2[2] = DefaultAnswer;
                objArray2[3] = Description;
                objArray2[4] = Status;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.SecurityQuestionMasterDataTable table = (CloudAccountDA.SecurityQuestionMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.SecurityQuestionMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SecurityQuestionMasterRow FindBySecurityQuestionID(int SecurityQuestionID)
            {
                return (CloudAccountDA.SecurityQuestionMasterRow) base.Rows.Find(new object[] { SecurityQuestionID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.SecurityQuestionMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "SecurityQuestionMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnSecurityQuestionID = new DataColumn("SecurityQuestionID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSecurityQuestionID);
                this.columnQuestion = new DataColumn("Question", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnQuestion);
                this.columnDefaultAnswer = new DataColumn("DefaultAnswer", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDefaultAnswer);
                this.columnDescription = new DataColumn("Description", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnStatus = new DataColumn("Status", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnSecurityQuestionID }, true));
                this.columnSecurityQuestionID.AutoIncrement = true;
                this.columnSecurityQuestionID.AutoIncrementSeed = -1L;
                this.columnSecurityQuestionID.AutoIncrementStep = -1L;
                this.columnSecurityQuestionID.AllowDBNull = false;
                this.columnSecurityQuestionID.ReadOnly = true;
                this.columnSecurityQuestionID.Unique = true;
                this.columnQuestion.AllowDBNull = false;
                this.columnQuestion.MaxLength = 200;
                this.columnDefaultAnswer.AllowDBNull = false;
                this.columnDefaultAnswer.MaxLength = 200;
                this.columnDescription.MaxLength = 500;
                this.columnStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnSecurityQuestionID = base.Columns["SecurityQuestionID"];
                this.columnQuestion = base.Columns["Question"];
                this.columnDefaultAnswer = base.Columns["DefaultAnswer"];
                this.columnDescription = base.Columns["Description"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.SecurityQuestionMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SecurityQuestionMasterRow NewSecurityQuestionMasterRow()
            {
                return (CloudAccountDA.SecurityQuestionMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.SecurityQuestionMasterRowChanged != null)
                {
                    this.SecurityQuestionMasterRowChanged(this, new CloudAccountDA.SecurityQuestionMasterRowChangeEvent((CloudAccountDA.SecurityQuestionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.SecurityQuestionMasterRowChanging != null)
                {
                    this.SecurityQuestionMasterRowChanging(this, new CloudAccountDA.SecurityQuestionMasterRowChangeEvent((CloudAccountDA.SecurityQuestionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.SecurityQuestionMasterRowDeleted != null)
                {
                    this.SecurityQuestionMasterRowDeleted(this, new CloudAccountDA.SecurityQuestionMasterRowChangeEvent((CloudAccountDA.SecurityQuestionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.SecurityQuestionMasterRowDeleting != null)
                {
                    this.SecurityQuestionMasterRowDeleting(this, new CloudAccountDA.SecurityQuestionMasterRowChangeEvent((CloudAccountDA.SecurityQuestionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSecurityQuestionMasterRow(CloudAccountDA.SecurityQuestionMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DefaultAnswerColumn
            {
                get
                {
                    return this.columnDefaultAnswer;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SecurityQuestionMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.SecurityQuestionMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn QuestionColumn
            {
                get
                {
                    return this.columnQuestion;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SecurityQuestionIDColumn
            {
                get
                {
                    return this.columnSecurityQuestionID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StatusColumn
            {
                get
                {
                    return this.columnStatus;
                }
            }
        }
        
        public class SecurityQuestionMasterRow : DataRow
        {
            private CloudAccountDA.SecurityQuestionMasterDataTable tableSecurityQuestionMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SecurityQuestionMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableSecurityQuestionMaster = (CloudAccountDA.SecurityQuestionMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDescriptionNull()
            {
                return base.IsNull(this.tableSecurityQuestionMaster.DescriptionColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDescriptionNull()
            {
                base[this.tableSecurityQuestionMaster.DescriptionColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultAnswer
            {
                get
                {
                    return (string) base[this.tableSecurityQuestionMaster.DefaultAnswerColumn];
                }
                set
                {
                    base[this.tableSecurityQuestionMaster.DefaultAnswerColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Description
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableSecurityQuestionMaster.DescriptionColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Description' in table 'SecurityQuestionMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableSecurityQuestionMaster.DescriptionColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Question
            {
                get
                {
                    return (string) base[this.tableSecurityQuestionMaster.QuestionColumn];
                }
                set
                {
                    base[this.tableSecurityQuestionMaster.QuestionColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int SecurityQuestionID
            {
                get
                {
                    return (int) base[this.tableSecurityQuestionMaster.SecurityQuestionIDColumn];
                }
                set
                {
                    base[this.tableSecurityQuestionMaster.SecurityQuestionIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Status
            {
                get
                {
                    return (bool) base[this.tableSecurityQuestionMaster.StatusColumn];
                }
                set
                {
                    base[this.tableSecurityQuestionMaster.StatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SecurityQuestionMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.SecurityQuestionMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SecurityQuestionMasterRowChangeEvent(CloudAccountDA.SecurityQuestionMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SecurityQuestionMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SecurityQuestionMasterRowChangeEventHandler(object sender, CloudAccountDA.SecurityQuestionMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class SMTPSettingsDataTable : TypedTableBase<CloudAccountDA.SMTPSettingsRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnEmailSignature;
            private DataColumn columnEnableSSL;
            private DataColumn columnHost;
            private DataColumn columnPassword;
            private DataColumn columnPort;
            private DataColumn columnSMTPFrom;
            private DataColumn columnSMTPSettingsID;
            private DataColumn columnUsername;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SMTPSettingsRowChangeEventHandler SMTPSettingsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SMTPSettingsRowChangeEventHandler SMTPSettingsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SMTPSettingsRowChangeEventHandler SMTPSettingsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SMTPSettingsRowChangeEventHandler SMTPSettingsRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public SMTPSettingsDataTable()
            {
                base.TableName = "SMTPSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SMTPSettingsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected SMTPSettingsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSMTPSettingsRow(CloudAccountDA.SMTPSettingsRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SMTPSettingsRow AddSMTPSettingsRow(int CompanyID, string SMTPFrom, string Host, int Port, bool EnableSSL, string Password, string Username, string EmailSignature)
            {
                CloudAccountDA.SMTPSettingsRow row = (CloudAccountDA.SMTPSettingsRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = CompanyID;
                objArray2[2] = SMTPFrom;
                objArray2[3] = Host;
                objArray2[4] = Port;
                objArray2[5] = EnableSSL;
                objArray2[6] = Password;
                objArray2[7] = Username;
                objArray2[8] = EmailSignature;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.SMTPSettingsDataTable table = (CloudAccountDA.SMTPSettingsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.SMTPSettingsDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SMTPSettingsRow FindBySMTPSettingsID(int SMTPSettingsID)
            {
                return (CloudAccountDA.SMTPSettingsRow) base.Rows.Find(new object[] { SMTPSettingsID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.SMTPSettingsRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "SMTPSettingsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnSMTPSettingsID = new DataColumn("SMTPSettingsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSMTPSettingsID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnSMTPFrom = new DataColumn("SMTPFrom", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSMTPFrom);
                this.columnHost = new DataColumn("Host", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHost);
                this.columnPort = new DataColumn("Port", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnPort);
                this.columnEnableSSL = new DataColumn("EnableSSL", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEnableSSL);
                this.columnPassword = new DataColumn("Password", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnUsername = new DataColumn("Username", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.columnEmailSignature = new DataColumn("EmailSignature", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmailSignature);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnSMTPSettingsID }, true));
                this.columnSMTPSettingsID.AutoIncrement = true;
                this.columnSMTPSettingsID.AutoIncrementSeed = -1L;
                this.columnSMTPSettingsID.AutoIncrementStep = -1L;
                this.columnSMTPSettingsID.AllowDBNull = false;
                this.columnSMTPSettingsID.ReadOnly = true;
                this.columnSMTPSettingsID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnSMTPFrom.MaxLength = 50;
                this.columnHost.MaxLength = 50;
                this.columnPassword.MaxLength = 50;
                this.columnUsername.MaxLength = 50;
                this.columnEmailSignature.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnSMTPSettingsID = base.Columns["SMTPSettingsID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnSMTPFrom = base.Columns["SMTPFrom"];
                this.columnHost = base.Columns["Host"];
                this.columnPort = base.Columns["Port"];
                this.columnEnableSSL = base.Columns["EnableSSL"];
                this.columnPassword = base.Columns["Password"];
                this.columnUsername = base.Columns["Username"];
                this.columnEmailSignature = base.Columns["EmailSignature"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.SMTPSettingsRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SMTPSettingsRow NewSMTPSettingsRow()
            {
                return (CloudAccountDA.SMTPSettingsRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.SMTPSettingsRowChanged != null)
                {
                    this.SMTPSettingsRowChanged(this, new CloudAccountDA.SMTPSettingsRowChangeEvent((CloudAccountDA.SMTPSettingsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.SMTPSettingsRowChanging != null)
                {
                    this.SMTPSettingsRowChanging(this, new CloudAccountDA.SMTPSettingsRowChangeEvent((CloudAccountDA.SMTPSettingsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.SMTPSettingsRowDeleted != null)
                {
                    this.SMTPSettingsRowDeleted(this, new CloudAccountDA.SMTPSettingsRowChangeEvent((CloudAccountDA.SMTPSettingsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.SMTPSettingsRowDeleting != null)
                {
                    this.SMTPSettingsRowDeleting(this, new CloudAccountDA.SMTPSettingsRowChangeEvent((CloudAccountDA.SMTPSettingsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveSMTPSettingsRow(CloudAccountDA.SMTPSettingsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EmailSignatureColumn
            {
                get
                {
                    return this.columnEmailSignature;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EnableSSLColumn
            {
                get
                {
                    return this.columnEnableSSL;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HostColumn
            {
                get
                {
                    return this.columnHost;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SMTPSettingsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.SMTPSettingsRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PasswordColumn
            {
                get
                {
                    return this.columnPassword;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PortColumn
            {
                get
                {
                    return this.columnPort;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SMTPFromColumn
            {
                get
                {
                    return this.columnSMTPFrom;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SMTPSettingsIDColumn
            {
                get
                {
                    return this.columnSMTPSettingsID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn UsernameColumn
            {
                get
                {
                    return this.columnUsername;
                }
            }
        }
        
        public class SMTPSettingsRow : DataRow
        {
            private CloudAccountDA.SMTPSettingsDataTable tableSMTPSettings;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SMTPSettingsRow(DataRowBuilder rb) : base(rb)
            {
                this.tableSMTPSettings = (CloudAccountDA.SMTPSettingsDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEmailSignatureNull()
            {
                return base.IsNull(this.tableSMTPSettings.EmailSignatureColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEnableSSLNull()
            {
                return base.IsNull(this.tableSMTPSettings.EnableSSLColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHostNull()
            {
                return base.IsNull(this.tableSMTPSettings.HostColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsPasswordNull()
            {
                return base.IsNull(this.tableSMTPSettings.PasswordColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPortNull()
            {
                return base.IsNull(this.tableSMTPSettings.PortColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSMTPFromNull()
            {
                return base.IsNull(this.tableSMTPSettings.SMTPFromColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsUsernameNull()
            {
                return base.IsNull(this.tableSMTPSettings.UsernameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEmailSignatureNull()
            {
                base[this.tableSMTPSettings.EmailSignatureColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEnableSSLNull()
            {
                base[this.tableSMTPSettings.EnableSSLColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHostNull()
            {
                base[this.tableSMTPSettings.HostColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetPasswordNull()
            {
                base[this.tableSMTPSettings.PasswordColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPortNull()
            {
                base[this.tableSMTPSettings.PortColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSMTPFromNull()
            {
                base[this.tableSMTPSettings.SMTPFromColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUsernameNull()
            {
                base[this.tableSMTPSettings.UsernameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableSMTPSettings.CompanyIDColumn];
                }
                set
                {
                    base[this.tableSMTPSettings.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EmailSignature
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableSMTPSettings.EmailSignatureColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EmailSignature' in table 'SMTPSettings' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableSMTPSettings.EmailSignatureColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool EnableSSL
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableSMTPSettings.EnableSSLColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EnableSSL' in table 'SMTPSettings' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableSMTPSettings.EnableSSLColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Host
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableSMTPSettings.HostColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Host' in table 'SMTPSettings' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableSMTPSettings.HostColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Password
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableSMTPSettings.PasswordColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Password' in table 'SMTPSettings' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableSMTPSettings.PasswordColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Port
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableSMTPSettings.PortColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Port' in table 'SMTPSettings' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableSMTPSettings.PortColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SMTPFrom
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableSMTPSettings.SMTPFromColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SMTPFrom' in table 'SMTPSettings' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableSMTPSettings.SMTPFromColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int SMTPSettingsID
            {
                get
                {
                    return (int) base[this.tableSMTPSettings.SMTPSettingsIDColumn];
                }
                set
                {
                    base[this.tableSMTPSettings.SMTPSettingsIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Username
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableSMTPSettings.UsernameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Username' in table 'SMTPSettings' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableSMTPSettings.UsernameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SMTPSettingsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.SMTPSettingsRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public SMTPSettingsRowChangeEvent(CloudAccountDA.SMTPSettingsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SMTPSettingsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SMTPSettingsRowChangeEventHandler(object sender, CloudAccountDA.SMTPSettingsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class StaffClientAssignDetailDataTable : TypedTableBase<CloudAccountDA.StaffClientAssignDetailRow>
        {
            private DataColumn columnClientID;
            private DataColumn columnCompanyID;
            private DataColumn columnIsAssign;
            private DataColumn columnStaffClientAssignID;
            private DataColumn columnStaffID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffClientAssignDetailRowChangeEventHandler StaffClientAssignDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffClientAssignDetailRowChangeEventHandler StaffClientAssignDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffClientAssignDetailRowChangeEventHandler StaffClientAssignDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffClientAssignDetailRowChangeEventHandler StaffClientAssignDetailRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StaffClientAssignDetailDataTable()
            {
                base.TableName = "StaffClientAssignDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StaffClientAssignDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected StaffClientAssignDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddStaffClientAssignDetailRow(CloudAccountDA.StaffClientAssignDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffClientAssignDetailRow AddStaffClientAssignDetailRow(int CompanyID, int StaffID, int ClientID, bool IsAssign)
            {
                CloudAccountDA.StaffClientAssignDetailRow row = (CloudAccountDA.StaffClientAssignDetailRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = CompanyID;
                objArray2[2] = StaffID;
                objArray2[3] = ClientID;
                objArray2[4] = IsAssign;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.StaffClientAssignDetailDataTable table = (CloudAccountDA.StaffClientAssignDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.StaffClientAssignDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffClientAssignDetailRow FindByStaffClientAssignID(int StaffClientAssignID)
            {
                return (CloudAccountDA.StaffClientAssignDetailRow) base.Rows.Find(new object[] { StaffClientAssignID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.StaffClientAssignDetailRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "StaffClientAssignDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnStaffClientAssignID = new DataColumn("StaffClientAssignID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStaffClientAssignID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnStaffID = new DataColumn("StaffID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStaffID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnIsAssign = new DataColumn("IsAssign", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnIsAssign);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnStaffClientAssignID }, true));
                this.columnStaffClientAssignID.AutoIncrement = true;
                this.columnStaffClientAssignID.AutoIncrementSeed = -1L;
                this.columnStaffClientAssignID.AutoIncrementStep = -1L;
                this.columnStaffClientAssignID.AllowDBNull = false;
                this.columnStaffClientAssignID.ReadOnly = true;
                this.columnStaffClientAssignID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnStaffID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnIsAssign.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnStaffClientAssignID = base.Columns["StaffClientAssignID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnStaffID = base.Columns["StaffID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnIsAssign = base.Columns["IsAssign"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.StaffClientAssignDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffClientAssignDetailRow NewStaffClientAssignDetailRow()
            {
                return (CloudAccountDA.StaffClientAssignDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.StaffClientAssignDetailRowChanged != null)
                {
                    this.StaffClientAssignDetailRowChanged(this, new CloudAccountDA.StaffClientAssignDetailRowChangeEvent((CloudAccountDA.StaffClientAssignDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.StaffClientAssignDetailRowChanging != null)
                {
                    this.StaffClientAssignDetailRowChanging(this, new CloudAccountDA.StaffClientAssignDetailRowChangeEvent((CloudAccountDA.StaffClientAssignDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.StaffClientAssignDetailRowDeleted != null)
                {
                    this.StaffClientAssignDetailRowDeleted(this, new CloudAccountDA.StaffClientAssignDetailRowChangeEvent((CloudAccountDA.StaffClientAssignDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.StaffClientAssignDetailRowDeleting != null)
                {
                    this.StaffClientAssignDetailRowDeleting(this, new CloudAccountDA.StaffClientAssignDetailRowChangeEvent((CloudAccountDA.StaffClientAssignDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStaffClientAssignDetailRow(CloudAccountDA.StaffClientAssignDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn IsAssignColumn
            {
                get
                {
                    return this.columnIsAssign;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffClientAssignDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.StaffClientAssignDetailRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StaffClientAssignIDColumn
            {
                get
                {
                    return this.columnStaffClientAssignID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StaffIDColumn
            {
                get
                {
                    return this.columnStaffID;
                }
            }
        }
        
        public class StaffClientAssignDetailRow : DataRow
        {
            private CloudAccountDA.StaffClientAssignDetailDataTable tableStaffClientAssignDetail;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal StaffClientAssignDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableStaffClientAssignDetail = (CloudAccountDA.StaffClientAssignDetailDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ClientID
            {
                get
                {
                    return (int) base[this.tableStaffClientAssignDetail.ClientIDColumn];
                }
                set
                {
                    base[this.tableStaffClientAssignDetail.ClientIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableStaffClientAssignDetail.CompanyIDColumn];
                }
                set
                {
                    base[this.tableStaffClientAssignDetail.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAssign
            {
                get
                {
                    return (bool) base[this.tableStaffClientAssignDetail.IsAssignColumn];
                }
                set
                {
                    base[this.tableStaffClientAssignDetail.IsAssignColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int StaffClientAssignID
            {
                get
                {
                    return (int) base[this.tableStaffClientAssignDetail.StaffClientAssignIDColumn];
                }
                set
                {
                    base[this.tableStaffClientAssignDetail.StaffClientAssignIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int StaffID
            {
                get
                {
                    return (int) base[this.tableStaffClientAssignDetail.StaffIDColumn];
                }
                set
                {
                    base[this.tableStaffClientAssignDetail.StaffIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StaffClientAssignDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.StaffClientAssignDetailRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StaffClientAssignDetailRowChangeEvent(CloudAccountDA.StaffClientAssignDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffClientAssignDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StaffClientAssignDetailRowChangeEventHandler(object sender, CloudAccountDA.StaffClientAssignDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class StaffMasterDataTable : TypedTableBase<CloudAccountDA.StaffMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnAddress1;
            private DataColumn columnAddress2;
            private DataColumn columnArchived;
            private DataColumn columnBillingRate;
            private DataColumn columnBussinessPhone;
            private DataColumn columnCityID;
            private DataColumn columnCompanyID;
            private DataColumn columnCountryID;
            private DataColumn columnDeleted;
            private DataColumn columnEmail;
            private DataColumn columnFax;
            private DataColumn columnFirstName;
            private DataColumn columnHomePhone;
            private DataColumn columnLastName;
            private DataColumn columnMobile;
            private DataColumn columnNotes;
            private DataColumn columnStaffID;
            private DataColumn columnStateID;
            private DataColumn columnUserName;
            private DataColumn columnZipCode;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffMasterRowChangeEventHandler StaffMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffMasterRowChangeEventHandler StaffMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffMasterRowChangeEventHandler StaffMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffMasterRowChangeEventHandler StaffMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public StaffMasterDataTable()
            {
                base.TableName = "StaffMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal StaffMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected StaffMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddStaffMasterRow(CloudAccountDA.StaffMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffMasterRow AddStaffMasterRow(int CompanyID, string Email, string FirstName, string LastName, decimal BillingRate, string UserName, string Address1, string Address2, int CountryID, int StateID, int CityID, string ZipCode, string HomePhone, string Mobile, string BussinessPhone, string Fax, string Notes, bool Active, bool Archived, bool Deleted)
            {
                CloudAccountDA.StaffMasterRow row = (CloudAccountDA.StaffMasterRow) base.NewRow();
                object[] objArray2 = new object[0x15];
                objArray2[1] = CompanyID;
                objArray2[2] = Email;
                objArray2[3] = FirstName;
                objArray2[4] = LastName;
                objArray2[5] = BillingRate;
                objArray2[6] = UserName;
                objArray2[7] = Address1;
                objArray2[8] = Address2;
                objArray2[9] = CountryID;
                objArray2[10] = StateID;
                objArray2[11] = CityID;
                objArray2[12] = ZipCode;
                objArray2[13] = HomePhone;
                objArray2[14] = Mobile;
                objArray2[15] = BussinessPhone;
                objArray2[0x10] = Fax;
                objArray2[0x11] = Notes;
                objArray2[0x12] = Active;
                objArray2[0x13] = Archived;
                objArray2[20] = Deleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.StaffMasterDataTable table = (CloudAccountDA.StaffMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.StaffMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffMasterRow FindByStaffID(int StaffID)
            {
                return (CloudAccountDA.StaffMasterRow) base.Rows.Find(new object[] { StaffID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.StaffMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "StaffMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnStaffID = new DataColumn("StaffID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStaffID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnEmail = new DataColumn("Email", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnBillingRate = new DataColumn("BillingRate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnBillingRate);
                this.columnUserName = new DataColumn("UserName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnAddress1 = new DataColumn("Address1", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new DataColumn("Address2", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnStateID = new DataColumn("StateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStateID);
                this.columnCityID = new DataColumn("CityID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCityID);
                this.columnZipCode = new DataColumn("ZipCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnZipCode);
                this.columnHomePhone = new DataColumn("HomePhone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnHomePhone);
                this.columnMobile = new DataColumn("Mobile", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnMobile);
                this.columnBussinessPhone = new DataColumn("BussinessPhone", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnBussinessPhone);
                this.columnFax = new DataColumn("Fax", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnStaffID }, true));
                this.columnStaffID.AutoIncrement = true;
                this.columnStaffID.AutoIncrementSeed = -1L;
                this.columnStaffID.AutoIncrementStep = -1L;
                this.columnStaffID.AllowDBNull = false;
                this.columnStaffID.ReadOnly = true;
                this.columnStaffID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnEmail.MaxLength = 50;
                this.columnFirstName.MaxLength = 50;
                this.columnLastName.MaxLength = 50;
                this.columnUserName.MaxLength = 50;
                this.columnAddress1.MaxLength = 50;
                this.columnAddress2.MaxLength = 50;
                this.columnZipCode.MaxLength = 20;
                this.columnHomePhone.MaxLength = 15;
                this.columnMobile.MaxLength = 10;
                this.columnBussinessPhone.MaxLength = 20;
                this.columnFax.MaxLength = 20;
                this.columnNotes.MaxLength = 500;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnStaffID = base.Columns["StaffID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnEmail = base.Columns["Email"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnBillingRate = base.Columns["BillingRate"];
                this.columnUserName = base.Columns["UserName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnStateID = base.Columns["StateID"];
                this.columnCityID = base.Columns["CityID"];
                this.columnZipCode = base.Columns["ZipCode"];
                this.columnHomePhone = base.Columns["HomePhone"];
                this.columnMobile = base.Columns["Mobile"];
                this.columnBussinessPhone = base.Columns["BussinessPhone"];
                this.columnFax = base.Columns["Fax"];
                this.columnNotes = base.Columns["Notes"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.StaffMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffMasterRow NewStaffMasterRow()
            {
                return (CloudAccountDA.StaffMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.StaffMasterRowChanged != null)
                {
                    this.StaffMasterRowChanged(this, new CloudAccountDA.StaffMasterRowChangeEvent((CloudAccountDA.StaffMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.StaffMasterRowChanging != null)
                {
                    this.StaffMasterRowChanging(this, new CloudAccountDA.StaffMasterRowChangeEvent((CloudAccountDA.StaffMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.StaffMasterRowDeleted != null)
                {
                    this.StaffMasterRowDeleted(this, new CloudAccountDA.StaffMasterRowChangeEvent((CloudAccountDA.StaffMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.StaffMasterRowDeleting != null)
                {
                    this.StaffMasterRowDeleting(this, new CloudAccountDA.StaffMasterRowChangeEvent((CloudAccountDA.StaffMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStaffMasterRow(CloudAccountDA.StaffMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn BillingRateColumn
            {
                get
                {
                    return this.columnBillingRate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BussinessPhoneColumn
            {
                get
                {
                    return this.columnBussinessPhone;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CityIDColumn
            {
                get
                {
                    return this.columnCityID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CountryIDColumn
            {
                get
                {
                    return this.columnCountryID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EmailColumn
            {
                get
                {
                    return this.columnEmail;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FaxColumn
            {
                get
                {
                    return this.columnFax;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn FirstNameColumn
            {
                get
                {
                    return this.columnFirstName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HomePhoneColumn
            {
                get
                {
                    return this.columnHomePhone;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.StaffMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn LastNameColumn
            {
                get
                {
                    return this.columnLastName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn MobileColumn
            {
                get
                {
                    return this.columnMobile;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StaffIDColumn
            {
                get
                {
                    return this.columnStaffID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StateIDColumn
            {
                get
                {
                    return this.columnStateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UserNameColumn
            {
                get
                {
                    return this.columnUserName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ZipCodeColumn
            {
                get
                {
                    return this.columnZipCode;
                }
            }
        }
        
        public class StaffMasterRow : DataRow
        {
            private CloudAccountDA.StaffMasterDataTable tableStaffMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal StaffMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableStaffMaster = (CloudAccountDA.StaffMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableStaffMaster.ActiveColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddress1Null()
            {
                return base.IsNull(this.tableStaffMaster.Address1Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddress2Null()
            {
                return base.IsNull(this.tableStaffMaster.Address2Column);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableStaffMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBillingRateNull()
            {
                return base.IsNull(this.tableStaffMaster.BillingRateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBussinessPhoneNull()
            {
                return base.IsNull(this.tableStaffMaster.BussinessPhoneColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCityIDNull()
            {
                return base.IsNull(this.tableStaffMaster.CityIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsCountryIDNull()
            {
                return base.IsNull(this.tableStaffMaster.CountryIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableStaffMaster.DeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsEmailNull()
            {
                return base.IsNull(this.tableStaffMaster.EmailColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFaxNull()
            {
                return base.IsNull(this.tableStaffMaster.FaxColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsFirstNameNull()
            {
                return base.IsNull(this.tableStaffMaster.FirstNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHomePhoneNull()
            {
                return base.IsNull(this.tableStaffMaster.HomePhoneColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastNameNull()
            {
                return base.IsNull(this.tableStaffMaster.LastNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsMobileNull()
            {
                return base.IsNull(this.tableStaffMaster.MobileColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableStaffMaster.NotesColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStateIDNull()
            {
                return base.IsNull(this.tableStaffMaster.StateIDColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUserNameNull()
            {
                return base.IsNull(this.tableStaffMaster.UserNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsZipCodeNull()
            {
                return base.IsNull(this.tableStaffMaster.ZipCodeColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetActiveNull()
            {
                base[this.tableStaffMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetAddress1Null()
            {
                base[this.tableStaffMaster.Address1Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddress2Null()
            {
                base[this.tableStaffMaster.Address2Column] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetArchivedNull()
            {
                base[this.tableStaffMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBillingRateNull()
            {
                base[this.tableStaffMaster.BillingRateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBussinessPhoneNull()
            {
                base[this.tableStaffMaster.BussinessPhoneColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCityIDNull()
            {
                base[this.tableStaffMaster.CityIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetCountryIDNull()
            {
                base[this.tableStaffMaster.CountryIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeletedNull()
            {
                base[this.tableStaffMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEmailNull()
            {
                base[this.tableStaffMaster.EmailColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFaxNull()
            {
                base[this.tableStaffMaster.FaxColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFirstNameNull()
            {
                base[this.tableStaffMaster.FirstNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHomePhoneNull()
            {
                base[this.tableStaffMaster.HomePhoneColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetLastNameNull()
            {
                base[this.tableStaffMaster.LastNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetMobileNull()
            {
                base[this.tableStaffMaster.MobileColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tableStaffMaster.NotesColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStateIDNull()
            {
                base[this.tableStaffMaster.StateIDColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetUserNameNull()
            {
                base[this.tableStaffMaster.UserNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetZipCodeNull()
            {
                base[this.tableStaffMaster.ZipCodeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableStaffMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableStaffMaster.ActiveColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Address1
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.Address1Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address1' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.Address1Column] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Address2
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.Address2Column];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Address2' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.Address2Column] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableStaffMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableStaffMaster.ArchivedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal BillingRate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableStaffMaster.BillingRateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BillingRate' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableStaffMaster.BillingRateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string BussinessPhone
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.BussinessPhoneColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BussinessPhone' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.BussinessPhoneColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CityID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableStaffMaster.CityIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CityID' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableStaffMaster.CityIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableStaffMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableStaffMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CountryID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableStaffMaster.CountryIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'CountryID' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableStaffMaster.CountryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableStaffMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableStaffMaster.DeletedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Email
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.EmailColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Email' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.EmailColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Fax
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.FaxColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Fax' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.FaxColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string FirstName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.FirstNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'FirstName' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.FirstNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string HomePhone
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.HomePhoneColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'HomePhone' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.HomePhoneColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string LastName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.LastNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'LastName' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.LastNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Mobile
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.MobileColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Mobile' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.MobileColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.NotesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int StaffID
            {
                get
                {
                    return (int) base[this.tableStaffMaster.StaffIDColumn];
                }
                set
                {
                    base[this.tableStaffMaster.StaffIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int StateID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableStaffMaster.StateIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'StateID' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableStaffMaster.StateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string UserName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.UserNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'UserName' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.UserNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string ZipCode
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStaffMaster.ZipCodeColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'ZipCode' in table 'StaffMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStaffMaster.ZipCodeColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StaffMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.StaffMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public StaffMasterRowChangeEvent(CloudAccountDA.StaffMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StaffMasterRowChangeEventHandler(object sender, CloudAccountDA.StaffMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class StaffPermissionMasterDataTable : TypedTableBase<CloudAccountDA.StaffPermissionMasterRow>
        {
            private DataColumn columnClientManagement;
            private DataColumn columnCompanyID;
            private DataColumn columnDocuments;
            private DataColumn columnEstimate;
            private DataColumn columnExpenses;
            private DataColumn columnInvoice;
            private DataColumn columnPeople;
            private DataColumn columnProjectAccess;
            private DataColumn columnReports;
            private DataColumn columnSendInvEstCre;
            private DataColumn columnStaffPermissionID;
            private DataColumn columnSupport;
            private DataColumn columnTicketAdministration;
            private DataColumn columnTimeTracking;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffPermissionMasterRowChangeEventHandler StaffPermissionMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffPermissionMasterRowChangeEventHandler StaffPermissionMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffPermissionMasterRowChangeEventHandler StaffPermissionMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffPermissionMasterRowChangeEventHandler StaffPermissionMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public StaffPermissionMasterDataTable()
            {
                base.TableName = "StaffPermissionMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal StaffPermissionMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected StaffPermissionMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddStaffPermissionMasterRow(CloudAccountDA.StaffPermissionMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffPermissionMasterRow AddStaffPermissionMasterRow(int CompanyID, bool People, bool Invoice, bool Estimate, bool Expenses, bool TimeTracking, bool Support, bool Documents, bool Reports, bool ProjectAccess, bool SendInvEstCre, bool ClientManagement, bool TicketAdministration)
            {
                CloudAccountDA.StaffPermissionMasterRow row = (CloudAccountDA.StaffPermissionMasterRow) base.NewRow();
                object[] objArray2 = new object[14];
                objArray2[1] = CompanyID;
                objArray2[2] = People;
                objArray2[3] = Invoice;
                objArray2[4] = Estimate;
                objArray2[5] = Expenses;
                objArray2[6] = TimeTracking;
                objArray2[7] = Support;
                objArray2[8] = Documents;
                objArray2[9] = Reports;
                objArray2[10] = ProjectAccess;
                objArray2[11] = SendInvEstCre;
                objArray2[12] = ClientManagement;
                objArray2[13] = TicketAdministration;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.StaffPermissionMasterDataTable table = (CloudAccountDA.StaffPermissionMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.StaffPermissionMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffPermissionMasterRow FindByStaffPermissionID(int StaffPermissionID)
            {
                return (CloudAccountDA.StaffPermissionMasterRow) base.Rows.Find(new object[] { StaffPermissionID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.StaffPermissionMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "StaffPermissionMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnStaffPermissionID = new DataColumn("StaffPermissionID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStaffPermissionID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnPeople = new DataColumn("People", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPeople);
                this.columnInvoice = new DataColumn("Invoice", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnInvoice);
                this.columnEstimate = new DataColumn("Estimate", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnEstimate);
                this.columnExpenses = new DataColumn("Expenses", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnExpenses);
                this.columnTimeTracking = new DataColumn("TimeTracking", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnTimeTracking);
                this.columnSupport = new DataColumn("Support", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnSupport);
                this.columnDocuments = new DataColumn("Documents", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDocuments);
                this.columnReports = new DataColumn("Reports", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnReports);
                this.columnProjectAccess = new DataColumn("ProjectAccess", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnProjectAccess);
                this.columnSendInvEstCre = new DataColumn("SendInvEstCre", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnSendInvEstCre);
                this.columnClientManagement = new DataColumn("ClientManagement", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnClientManagement);
                this.columnTicketAdministration = new DataColumn("TicketAdministration", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnTicketAdministration);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnStaffPermissionID }, true));
                this.columnStaffPermissionID.AutoIncrement = true;
                this.columnStaffPermissionID.AutoIncrementSeed = -1L;
                this.columnStaffPermissionID.AutoIncrementStep = -1L;
                this.columnStaffPermissionID.AllowDBNull = false;
                this.columnStaffPermissionID.ReadOnly = true;
                this.columnStaffPermissionID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnPeople.AllowDBNull = false;
                this.columnInvoice.AllowDBNull = false;
                this.columnEstimate.AllowDBNull = false;
                this.columnExpenses.AllowDBNull = false;
                this.columnTimeTracking.AllowDBNull = false;
                this.columnSupport.AllowDBNull = false;
                this.columnDocuments.AllowDBNull = false;
                this.columnReports.AllowDBNull = false;
                this.columnProjectAccess.AllowDBNull = false;
                this.columnSendInvEstCre.AllowDBNull = false;
                this.columnClientManagement.AllowDBNull = false;
                this.columnTicketAdministration.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnStaffPermissionID = base.Columns["StaffPermissionID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnPeople = base.Columns["People"];
                this.columnInvoice = base.Columns["Invoice"];
                this.columnEstimate = base.Columns["Estimate"];
                this.columnExpenses = base.Columns["Expenses"];
                this.columnTimeTracking = base.Columns["TimeTracking"];
                this.columnSupport = base.Columns["Support"];
                this.columnDocuments = base.Columns["Documents"];
                this.columnReports = base.Columns["Reports"];
                this.columnProjectAccess = base.Columns["ProjectAccess"];
                this.columnSendInvEstCre = base.Columns["SendInvEstCre"];
                this.columnClientManagement = base.Columns["ClientManagement"];
                this.columnTicketAdministration = base.Columns["TicketAdministration"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.StaffPermissionMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffPermissionMasterRow NewStaffPermissionMasterRow()
            {
                return (CloudAccountDA.StaffPermissionMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.StaffPermissionMasterRowChanged != null)
                {
                    this.StaffPermissionMasterRowChanged(this, new CloudAccountDA.StaffPermissionMasterRowChangeEvent((CloudAccountDA.StaffPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.StaffPermissionMasterRowChanging != null)
                {
                    this.StaffPermissionMasterRowChanging(this, new CloudAccountDA.StaffPermissionMasterRowChangeEvent((CloudAccountDA.StaffPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.StaffPermissionMasterRowDeleted != null)
                {
                    this.StaffPermissionMasterRowDeleted(this, new CloudAccountDA.StaffPermissionMasterRowChangeEvent((CloudAccountDA.StaffPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.StaffPermissionMasterRowDeleting != null)
                {
                    this.StaffPermissionMasterRowDeleting(this, new CloudAccountDA.StaffPermissionMasterRowChangeEvent((CloudAccountDA.StaffPermissionMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStaffPermissionMasterRow(CloudAccountDA.StaffPermissionMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ClientManagementColumn
            {
                get
                {
                    return this.columnClientManagement;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn DocumentsColumn
            {
                get
                {
                    return this.columnDocuments;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EstimateColumn
            {
                get
                {
                    return this.columnEstimate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ExpensesColumn
            {
                get
                {
                    return this.columnExpenses;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceColumn
            {
                get
                {
                    return this.columnInvoice;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffPermissionMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.StaffPermissionMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PeopleColumn
            {
                get
                {
                    return this.columnPeople;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ProjectAccessColumn
            {
                get
                {
                    return this.columnProjectAccess;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ReportsColumn
            {
                get
                {
                    return this.columnReports;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SendInvEstCreColumn
            {
                get
                {
                    return this.columnSendInvEstCre;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StaffPermissionIDColumn
            {
                get
                {
                    return this.columnStaffPermissionID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportColumn
            {
                get
                {
                    return this.columnSupport;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TicketAdministrationColumn
            {
                get
                {
                    return this.columnTicketAdministration;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TimeTrackingColumn
            {
                get
                {
                    return this.columnTimeTracking;
                }
            }
        }
        
        public class StaffPermissionMasterRow : DataRow
        {
            private CloudAccountDA.StaffPermissionMasterDataTable tableStaffPermissionMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StaffPermissionMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableStaffPermissionMaster = (CloudAccountDA.StaffPermissionMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ClientManagement
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.ClientManagementColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.ClientManagementColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableStaffPermissionMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Documents
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.DocumentsColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.DocumentsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Estimate
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.EstimateColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.EstimateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Expenses
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.ExpensesColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.ExpensesColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Invoice
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.InvoiceColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.InvoiceColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool People
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.PeopleColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.PeopleColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool ProjectAccess
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.ProjectAccessColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.ProjectAccessColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Reports
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.ReportsColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.ReportsColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool SendInvEstCre
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.SendInvEstCreColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.SendInvEstCreColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int StaffPermissionID
            {
                get
                {
                    return (int) base[this.tableStaffPermissionMaster.StaffPermissionIDColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.StaffPermissionIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Support
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.SupportColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.SupportColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool TicketAdministration
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.TicketAdministrationColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.TicketAdministrationColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool TimeTracking
            {
                get
                {
                    return (bool) base[this.tableStaffPermissionMaster.TimeTrackingColumn];
                }
                set
                {
                    base[this.tableStaffPermissionMaster.TimeTrackingColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StaffPermissionMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.StaffPermissionMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public StaffPermissionMasterRowChangeEvent(CloudAccountDA.StaffPermissionMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffPermissionMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StaffPermissionMasterRowChangeEventHandler(object sender, CloudAccountDA.StaffPermissionMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class StaffProjectDetailDataTable : TypedTableBase<CloudAccountDA.StaffProjectDetailRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnProjectID;
            private DataColumn columnStaffID;
            private DataColumn columnStaffProjectDetailID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffProjectDetailRowChangeEventHandler StaffProjectDetailRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffProjectDetailRowChangeEventHandler StaffProjectDetailRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffProjectDetailRowChangeEventHandler StaffProjectDetailRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StaffProjectDetailRowChangeEventHandler StaffProjectDetailRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StaffProjectDetailDataTable()
            {
                base.TableName = "StaffProjectDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StaffProjectDetailDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected StaffProjectDetailDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddStaffProjectDetailRow(CloudAccountDA.StaffProjectDetailRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffProjectDetailRow AddStaffProjectDetailRow(int CompanyID, int StaffID, int ProjectID)
            {
                CloudAccountDA.StaffProjectDetailRow row = (CloudAccountDA.StaffProjectDetailRow) base.NewRow();
                object[] objArray2 = new object[4];
                objArray2[1] = CompanyID;
                objArray2[2] = StaffID;
                objArray2[3] = ProjectID;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.StaffProjectDetailDataTable table = (CloudAccountDA.StaffProjectDetailDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.StaffProjectDetailDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffProjectDetailRow FindByStaffProjectDetailID(int StaffProjectDetailID)
            {
                return (CloudAccountDA.StaffProjectDetailRow) base.Rows.Find(new object[] { StaffProjectDetailID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.StaffProjectDetailRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "StaffProjectDetailDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnStaffProjectDetailID = new DataColumn("StaffProjectDetailID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStaffProjectDetailID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnStaffID = new DataColumn("StaffID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStaffID);
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnStaffProjectDetailID }, true));
                this.columnStaffProjectDetailID.AutoIncrement = true;
                this.columnStaffProjectDetailID.AutoIncrementSeed = -1L;
                this.columnStaffProjectDetailID.AutoIncrementStep = -1L;
                this.columnStaffProjectDetailID.AllowDBNull = false;
                this.columnStaffProjectDetailID.ReadOnly = true;
                this.columnStaffProjectDetailID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnStaffProjectDetailID = base.Columns["StaffProjectDetailID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnStaffID = base.Columns["StaffID"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.StaffProjectDetailRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffProjectDetailRow NewStaffProjectDetailRow()
            {
                return (CloudAccountDA.StaffProjectDetailRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.StaffProjectDetailRowChanged != null)
                {
                    this.StaffProjectDetailRowChanged(this, new CloudAccountDA.StaffProjectDetailRowChangeEvent((CloudAccountDA.StaffProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.StaffProjectDetailRowChanging != null)
                {
                    this.StaffProjectDetailRowChanging(this, new CloudAccountDA.StaffProjectDetailRowChangeEvent((CloudAccountDA.StaffProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.StaffProjectDetailRowDeleted != null)
                {
                    this.StaffProjectDetailRowDeleted(this, new CloudAccountDA.StaffProjectDetailRowChangeEvent((CloudAccountDA.StaffProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.StaffProjectDetailRowDeleting != null)
                {
                    this.StaffProjectDetailRowDeleting(this, new CloudAccountDA.StaffProjectDetailRowChangeEvent((CloudAccountDA.StaffProjectDetailRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStaffProjectDetailRow(CloudAccountDA.StaffProjectDetailRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.StaffProjectDetailRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.StaffProjectDetailRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return this.columnProjectID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StaffIDColumn
            {
                get
                {
                    return this.columnStaffID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StaffProjectDetailIDColumn
            {
                get
                {
                    return this.columnStaffProjectDetailID;
                }
            }
        }
        
        public class StaffProjectDetailRow : DataRow
        {
            private CloudAccountDA.StaffProjectDetailDataTable tableStaffProjectDetail;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StaffProjectDetailRow(DataRowBuilder rb) : base(rb)
            {
                this.tableStaffProjectDetail = (CloudAccountDA.StaffProjectDetailDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStaffIDNull()
            {
                return base.IsNull(this.tableStaffProjectDetail.StaffIDColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetStaffIDNull()
            {
                base[this.tableStaffProjectDetail.StaffIDColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableStaffProjectDetail.CompanyIDColumn];
                }
                set
                {
                    base[this.tableStaffProjectDetail.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int ProjectID
            {
                get
                {
                    return (int) base[this.tableStaffProjectDetail.ProjectIDColumn];
                }
                set
                {
                    base[this.tableStaffProjectDetail.ProjectIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int StaffID
            {
                get
                {
                    int num;
                    try
                    {
                        num = (int) base[this.tableStaffProjectDetail.StaffIDColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'StaffID' in table 'StaffProjectDetail' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableStaffProjectDetail.StaffIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int StaffProjectDetailID
            {
                get
                {
                    return (int) base[this.tableStaffProjectDetail.StaffProjectDetailIDColumn];
                }
                set
                {
                    base[this.tableStaffProjectDetail.StaffProjectDetailIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StaffProjectDetailRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.StaffProjectDetailRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StaffProjectDetailRowChangeEvent(CloudAccountDA.StaffProjectDetailRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StaffProjectDetailRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StaffProjectDetailRowChangeEventHandler(object sender, CloudAccountDA.StaffProjectDetailRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class StateMasterDataTable : TypedTableBase<CloudAccountDA.StateMasterRow>
        {
            private DataColumn columnCountryID;
            private DataColumn columnStateCode;
            private DataColumn columnStateDesc;
            private DataColumn columnStateID;
            private DataColumn columnStateName;
            private DataColumn columnStateStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StateMasterRowChangeEventHandler StateMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StateMasterRowChangeEventHandler StateMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StateMasterRowChangeEventHandler StateMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.StateMasterRowChangeEventHandler StateMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public StateMasterDataTable()
            {
                base.TableName = "StateMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal StateMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected StateMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddStateMasterRow(CloudAccountDA.StateMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StateMasterRow AddStateMasterRow(int CountryID, string StateCode, string StateName, string StateDesc, bool StateStatus)
            {
                CloudAccountDA.StateMasterRow row = (CloudAccountDA.StateMasterRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = CountryID;
                objArray2[2] = StateCode;
                objArray2[3] = StateName;
                objArray2[4] = StateDesc;
                objArray2[5] = StateStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.StateMasterDataTable table = (CloudAccountDA.StateMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.StateMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StateMasterRow FindByStateID(int StateID)
            {
                return (CloudAccountDA.StateMasterRow) base.Rows.Find(new object[] { StateID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.StateMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "StateMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnStateID = new DataColumn("StateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnStateID);
                this.columnCountryID = new DataColumn("CountryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnStateCode = new DataColumn("StateCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnStateCode);
                this.columnStateName = new DataColumn("StateName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnStateName);
                this.columnStateDesc = new DataColumn("StateDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnStateDesc);
                this.columnStateStatus = new DataColumn("StateStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnStateStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnStateID }, true));
                this.columnStateID.AutoIncrement = true;
                this.columnStateID.AutoIncrementSeed = -1L;
                this.columnStateID.AutoIncrementStep = -1L;
                this.columnStateID.AllowDBNull = false;
                this.columnStateID.ReadOnly = true;
                this.columnStateID.Unique = true;
                this.columnCountryID.AllowDBNull = false;
                this.columnStateCode.AllowDBNull = false;
                this.columnStateCode.MaxLength = 30;
                this.columnStateName.AllowDBNull = false;
                this.columnStateName.MaxLength = 100;
                this.columnStateDesc.MaxLength = 500;
                this.columnStateStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnStateID = base.Columns["StateID"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnStateCode = base.Columns["StateCode"];
                this.columnStateName = base.Columns["StateName"];
                this.columnStateDesc = base.Columns["StateDesc"];
                this.columnStateStatus = base.Columns["StateStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.StateMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StateMasterRow NewStateMasterRow()
            {
                return (CloudAccountDA.StateMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.StateMasterRowChanged != null)
                {
                    this.StateMasterRowChanged(this, new CloudAccountDA.StateMasterRowChangeEvent((CloudAccountDA.StateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.StateMasterRowChanging != null)
                {
                    this.StateMasterRowChanging(this, new CloudAccountDA.StateMasterRowChangeEvent((CloudAccountDA.StateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.StateMasterRowDeleted != null)
                {
                    this.StateMasterRowDeleted(this, new CloudAccountDA.StateMasterRowChangeEvent((CloudAccountDA.StateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.StateMasterRowDeleting != null)
                {
                    this.StateMasterRowDeleting(this, new CloudAccountDA.StateMasterRowChangeEvent((CloudAccountDA.StateMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStateMasterRow(CloudAccountDA.StateMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CountryIDColumn
            {
                get
                {
                    return this.columnCountryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StateMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.StateMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StateCodeColumn
            {
                get
                {
                    return this.columnStateCode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StateDescColumn
            {
                get
                {
                    return this.columnStateDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn StateIDColumn
            {
                get
                {
                    return this.columnStateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StateNameColumn
            {
                get
                {
                    return this.columnStateName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn StateStatusColumn
            {
                get
                {
                    return this.columnStateStatus;
                }
            }
        }
        
        public class StateMasterRow : DataRow
        {
            private CloudAccountDA.StateMasterDataTable tableStateMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal StateMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableStateMaster = (CloudAccountDA.StateMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsStateDescNull()
            {
                return base.IsNull(this.tableStateMaster.StateDescColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStateDescNull()
            {
                base[this.tableStateMaster.StateDescColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CountryID
            {
                get
                {
                    return (int) base[this.tableStateMaster.CountryIDColumn];
                }
                set
                {
                    base[this.tableStateMaster.CountryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string StateCode
            {
                get
                {
                    return (string) base[this.tableStateMaster.StateCodeColumn];
                }
                set
                {
                    base[this.tableStateMaster.StateCodeColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string StateDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableStateMaster.StateDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'StateDesc' in table 'StateMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableStateMaster.StateDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int StateID
            {
                get
                {
                    return (int) base[this.tableStateMaster.StateIDColumn];
                }
                set
                {
                    base[this.tableStateMaster.StateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string StateName
            {
                get
                {
                    return (string) base[this.tableStateMaster.StateNameColumn];
                }
                set
                {
                    base[this.tableStateMaster.StateNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool StateStatus
            {
                get
                {
                    return (bool) base[this.tableStateMaster.StateStatusColumn];
                }
                set
                {
                    base[this.tableStateMaster.StateStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StateMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.StateMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public StateMasterRowChangeEvent(CloudAccountDA.StateMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.StateMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StateMasterRowChangeEventHandler(object sender, CloudAccountDA.StateMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class SubCategoryMasterDataTable : TypedTableBase<CloudAccountDA.SubCategoryMasterRow>
        {
            private DataColumn columnCategoryID;
            private DataColumn columnSubCategoryCode;
            private DataColumn columnSubCategoryDesc;
            private DataColumn columnSubCategoryID;
            private DataColumn columnSubCategoryName;
            private DataColumn columnSubCategoryStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SubCategoryMasterRowChangeEventHandler SubCategoryMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SubCategoryMasterRowChangeEventHandler SubCategoryMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SubCategoryMasterRowChangeEventHandler SubCategoryMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SubCategoryMasterRowChangeEventHandler SubCategoryMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SubCategoryMasterDataTable()
            {
                base.TableName = "SubCategoryMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal SubCategoryMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected SubCategoryMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSubCategoryMasterRow(CloudAccountDA.SubCategoryMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SubCategoryMasterRow AddSubCategoryMasterRow(int CategoryID, string SubCategoryCode, string SubCategoryName, string SubCategoryDesc, bool SubCategoryStatus)
            {
                CloudAccountDA.SubCategoryMasterRow row = (CloudAccountDA.SubCategoryMasterRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = CategoryID;
                objArray2[2] = SubCategoryCode;
                objArray2[3] = SubCategoryName;
                objArray2[4] = SubCategoryDesc;
                objArray2[5] = SubCategoryStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.SubCategoryMasterDataTable table = (CloudAccountDA.SubCategoryMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.SubCategoryMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SubCategoryMasterRow FindBySubCategoryID(int SubCategoryID)
            {
                return (CloudAccountDA.SubCategoryMasterRow) base.Rows.Find(new object[] { SubCategoryID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.SubCategoryMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "SubCategoryMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnSubCategoryID = new DataColumn("SubCategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSubCategoryID);
                this.columnCategoryID = new DataColumn("CategoryID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnSubCategoryCode = new DataColumn("SubCategoryCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSubCategoryCode);
                this.columnSubCategoryName = new DataColumn("SubCategoryName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSubCategoryName);
                this.columnSubCategoryDesc = new DataColumn("SubCategoryDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSubCategoryDesc);
                this.columnSubCategoryStatus = new DataColumn("SubCategoryStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnSubCategoryStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnSubCategoryID }, true));
                this.columnSubCategoryID.AutoIncrement = true;
                this.columnSubCategoryID.AutoIncrementSeed = -1L;
                this.columnSubCategoryID.AutoIncrementStep = -1L;
                this.columnSubCategoryID.AllowDBNull = false;
                this.columnSubCategoryID.ReadOnly = true;
                this.columnSubCategoryID.Unique = true;
                this.columnCategoryID.AllowDBNull = false;
                this.columnSubCategoryCode.AllowDBNull = false;
                this.columnSubCategoryCode.MaxLength = 50;
                this.columnSubCategoryName.AllowDBNull = false;
                this.columnSubCategoryName.MaxLength = 250;
                this.columnSubCategoryDesc.AllowDBNull = false;
                this.columnSubCategoryDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnSubCategoryID = base.Columns["SubCategoryID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnSubCategoryCode = base.Columns["SubCategoryCode"];
                this.columnSubCategoryName = base.Columns["SubCategoryName"];
                this.columnSubCategoryDesc = base.Columns["SubCategoryDesc"];
                this.columnSubCategoryStatus = base.Columns["SubCategoryStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.SubCategoryMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SubCategoryMasterRow NewSubCategoryMasterRow()
            {
                return (CloudAccountDA.SubCategoryMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.SubCategoryMasterRowChanged != null)
                {
                    this.SubCategoryMasterRowChanged(this, new CloudAccountDA.SubCategoryMasterRowChangeEvent((CloudAccountDA.SubCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.SubCategoryMasterRowChanging != null)
                {
                    this.SubCategoryMasterRowChanging(this, new CloudAccountDA.SubCategoryMasterRowChangeEvent((CloudAccountDA.SubCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.SubCategoryMasterRowDeleted != null)
                {
                    this.SubCategoryMasterRowDeleted(this, new CloudAccountDA.SubCategoryMasterRowChangeEvent((CloudAccountDA.SubCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.SubCategoryMasterRowDeleting != null)
                {
                    this.SubCategoryMasterRowDeleting(this, new CloudAccountDA.SubCategoryMasterRowChangeEvent((CloudAccountDA.SubCategoryMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveSubCategoryMasterRow(CloudAccountDA.SubCategoryMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CategoryIDColumn
            {
                get
                {
                    return this.columnCategoryID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SubCategoryMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.SubCategoryMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SubCategoryCodeColumn
            {
                get
                {
                    return this.columnSubCategoryCode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SubCategoryDescColumn
            {
                get
                {
                    return this.columnSubCategoryDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SubCategoryIDColumn
            {
                get
                {
                    return this.columnSubCategoryID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SubCategoryNameColumn
            {
                get
                {
                    return this.columnSubCategoryName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SubCategoryStatusColumn
            {
                get
                {
                    return this.columnSubCategoryStatus;
                }
            }
        }
        
        public class SubCategoryMasterRow : DataRow
        {
            private CloudAccountDA.SubCategoryMasterDataTable tableSubCategoryMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SubCategoryMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableSubCategoryMaster = (CloudAccountDA.SubCategoryMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsSubCategoryStatusNull()
            {
                return base.IsNull(this.tableSubCategoryMaster.SubCategoryStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetSubCategoryStatusNull()
            {
                base[this.tableSubCategoryMaster.SubCategoryStatusColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CategoryID
            {
                get
                {
                    return (int) base[this.tableSubCategoryMaster.CategoryIDColumn];
                }
                set
                {
                    base[this.tableSubCategoryMaster.CategoryIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SubCategoryCode
            {
                get
                {
                    return (string) base[this.tableSubCategoryMaster.SubCategoryCodeColumn];
                }
                set
                {
                    base[this.tableSubCategoryMaster.SubCategoryCodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SubCategoryDesc
            {
                get
                {
                    return (string) base[this.tableSubCategoryMaster.SubCategoryDescColumn];
                }
                set
                {
                    base[this.tableSubCategoryMaster.SubCategoryDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SubCategoryID
            {
                get
                {
                    return (int) base[this.tableSubCategoryMaster.SubCategoryIDColumn];
                }
                set
                {
                    base[this.tableSubCategoryMaster.SubCategoryIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SubCategoryName
            {
                get
                {
                    return (string) base[this.tableSubCategoryMaster.SubCategoryNameColumn];
                }
                set
                {
                    base[this.tableSubCategoryMaster.SubCategoryNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool SubCategoryStatus
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableSubCategoryMaster.SubCategoryStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'SubCategoryStatus' in table 'SubCategoryMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableSubCategoryMaster.SubCategoryStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SubCategoryMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.SubCategoryMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public SubCategoryMasterRowChangeEvent(CloudAccountDA.SubCategoryMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SubCategoryMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SubCategoryMasterRowChangeEventHandler(object sender, CloudAccountDA.SubCategoryMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class SupportDepartmentMasterDataTable : TypedTableBase<CloudAccountDA.SupportDepartmentMasterRow>
        {
            private DataColumn columnSupportDepartmentCode;
            private DataColumn columnSupportDepartmentDesc;
            private DataColumn columnSupportDepartmentID;
            private DataColumn columnSupportDepartmentName;
            private DataColumn columnSupportDepartmentStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SupportDepartmentMasterRowChangeEventHandler SupportDepartmentMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SupportDepartmentMasterRowChangeEventHandler SupportDepartmentMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SupportDepartmentMasterRowChangeEventHandler SupportDepartmentMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.SupportDepartmentMasterRowChangeEventHandler SupportDepartmentMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public SupportDepartmentMasterDataTable()
            {
                base.TableName = "SupportDepartmentMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal SupportDepartmentMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SupportDepartmentMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddSupportDepartmentMasterRow(CloudAccountDA.SupportDepartmentMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SupportDepartmentMasterRow AddSupportDepartmentMasterRow(string SupportDepartmentCode, string SupportDepartmentName, bool SupportDepartmentStatus, string SupportDepartmentDesc)
            {
                CloudAccountDA.SupportDepartmentMasterRow row = (CloudAccountDA.SupportDepartmentMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = SupportDepartmentCode;
                objArray2[2] = SupportDepartmentName;
                objArray2[3] = SupportDepartmentStatus;
                objArray2[4] = SupportDepartmentDesc;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.SupportDepartmentMasterDataTable table = (CloudAccountDA.SupportDepartmentMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.SupportDepartmentMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SupportDepartmentMasterRow FindBySupportDepartmentID(int SupportDepartmentID)
            {
                return (CloudAccountDA.SupportDepartmentMasterRow) base.Rows.Find(new object[] { SupportDepartmentID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.SupportDepartmentMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "SupportDepartmentMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnSupportDepartmentID = new DataColumn("SupportDepartmentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnSupportDepartmentID);
                this.columnSupportDepartmentCode = new DataColumn("SupportDepartmentCode", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSupportDepartmentCode);
                this.columnSupportDepartmentName = new DataColumn("SupportDepartmentName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSupportDepartmentName);
                this.columnSupportDepartmentStatus = new DataColumn("SupportDepartmentStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnSupportDepartmentStatus);
                this.columnSupportDepartmentDesc = new DataColumn("SupportDepartmentDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnSupportDepartmentDesc);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnSupportDepartmentID }, true));
                this.columnSupportDepartmentID.AutoIncrement = true;
                this.columnSupportDepartmentID.AutoIncrementSeed = -1L;
                this.columnSupportDepartmentID.AutoIncrementStep = -1L;
                this.columnSupportDepartmentID.AllowDBNull = false;
                this.columnSupportDepartmentID.ReadOnly = true;
                this.columnSupportDepartmentID.Unique = true;
                this.columnSupportDepartmentCode.AllowDBNull = false;
                this.columnSupportDepartmentCode.MaxLength = 50;
                this.columnSupportDepartmentName.AllowDBNull = false;
                this.columnSupportDepartmentName.MaxLength = 50;
                this.columnSupportDepartmentStatus.AllowDBNull = false;
                this.columnSupportDepartmentDesc.AllowDBNull = false;
                this.columnSupportDepartmentDesc.MaxLength = 500;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnSupportDepartmentID = base.Columns["SupportDepartmentID"];
                this.columnSupportDepartmentCode = base.Columns["SupportDepartmentCode"];
                this.columnSupportDepartmentName = base.Columns["SupportDepartmentName"];
                this.columnSupportDepartmentStatus = base.Columns["SupportDepartmentStatus"];
                this.columnSupportDepartmentDesc = base.Columns["SupportDepartmentDesc"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.SupportDepartmentMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SupportDepartmentMasterRow NewSupportDepartmentMasterRow()
            {
                return (CloudAccountDA.SupportDepartmentMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.SupportDepartmentMasterRowChanged != null)
                {
                    this.SupportDepartmentMasterRowChanged(this, new CloudAccountDA.SupportDepartmentMasterRowChangeEvent((CloudAccountDA.SupportDepartmentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.SupportDepartmentMasterRowChanging != null)
                {
                    this.SupportDepartmentMasterRowChanging(this, new CloudAccountDA.SupportDepartmentMasterRowChangeEvent((CloudAccountDA.SupportDepartmentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.SupportDepartmentMasterRowDeleted != null)
                {
                    this.SupportDepartmentMasterRowDeleted(this, new CloudAccountDA.SupportDepartmentMasterRowChangeEvent((CloudAccountDA.SupportDepartmentMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.SupportDepartmentMasterRowDeleting != null)
                {
                    this.SupportDepartmentMasterRowDeleting(this, new CloudAccountDA.SupportDepartmentMasterRowChangeEvent((CloudAccountDA.SupportDepartmentMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveSupportDepartmentMasterRow(CloudAccountDA.SupportDepartmentMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.SupportDepartmentMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.SupportDepartmentMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportDepartmentCodeColumn
            {
                get
                {
                    return this.columnSupportDepartmentCode;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportDepartmentDescColumn
            {
                get
                {
                    return this.columnSupportDepartmentDesc;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SupportDepartmentIDColumn
            {
                get
                {
                    return this.columnSupportDepartmentID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn SupportDepartmentNameColumn
            {
                get
                {
                    return this.columnSupportDepartmentName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SupportDepartmentStatusColumn
            {
                get
                {
                    return this.columnSupportDepartmentStatus;
                }
            }
        }
        
        public class SupportDepartmentMasterRow : DataRow
        {
            private CloudAccountDA.SupportDepartmentMasterDataTable tableSupportDepartmentMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal SupportDepartmentMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableSupportDepartmentMaster = (CloudAccountDA.SupportDepartmentMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SupportDepartmentCode
            {
                get
                {
                    return (string) base[this.tableSupportDepartmentMaster.SupportDepartmentCodeColumn];
                }
                set
                {
                    base[this.tableSupportDepartmentMaster.SupportDepartmentCodeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SupportDepartmentDesc
            {
                get
                {
                    return (string) base[this.tableSupportDepartmentMaster.SupportDepartmentDescColumn];
                }
                set
                {
                    base[this.tableSupportDepartmentMaster.SupportDepartmentDescColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SupportDepartmentID
            {
                get
                {
                    return (int) base[this.tableSupportDepartmentMaster.SupportDepartmentIDColumn];
                }
                set
                {
                    base[this.tableSupportDepartmentMaster.SupportDepartmentIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string SupportDepartmentName
            {
                get
                {
                    return (string) base[this.tableSupportDepartmentMaster.SupportDepartmentNameColumn];
                }
                set
                {
                    base[this.tableSupportDepartmentMaster.SupportDepartmentNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool SupportDepartmentStatus
            {
                get
                {
                    return (bool) base[this.tableSupportDepartmentMaster.SupportDepartmentStatusColumn];
                }
                set
                {
                    base[this.tableSupportDepartmentMaster.SupportDepartmentStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SupportDepartmentMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.SupportDepartmentMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SupportDepartmentMasterRowChangeEvent(CloudAccountDA.SupportDepartmentMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.SupportDepartmentMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SupportDepartmentMasterRowChangeEventHandler(object sender, CloudAccountDA.SupportDepartmentMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TaskMasterDataTable : TypedTableBase<CloudAccountDA.TaskMasterRow>
        {
            private DataColumn columnActive;
            private DataColumn columnArchived;
            private DataColumn columnBillToClient;
            private DataColumn columnCompanyID;
            private DataColumn columnDeleted;
            private DataColumn columnRatePerHours;
            private DataColumn columnTaskDesc;
            private DataColumn columnTaskID;
            private DataColumn columnTaskName;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaskMasterRowChangeEventHandler TaskMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaskMasterRowChangeEventHandler TaskMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaskMasterRowChangeEventHandler TaskMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaskMasterRowChangeEventHandler TaskMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TaskMasterDataTable()
            {
                base.TableName = "TaskMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TaskMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected TaskMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTaskMasterRow(CloudAccountDA.TaskMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TaskMasterRow AddTaskMasterRow(int CompanyID, string TaskName, string TaskDesc, bool BillToClient, decimal RatePerHours, bool Active, bool Archived, bool Deleted)
            {
                CloudAccountDA.TaskMasterRow row = (CloudAccountDA.TaskMasterRow) base.NewRow();
                object[] objArray2 = new object[9];
                objArray2[1] = CompanyID;
                objArray2[2] = TaskName;
                objArray2[3] = TaskDesc;
                objArray2[4] = BillToClient;
                objArray2[5] = RatePerHours;
                objArray2[6] = Active;
                objArray2[7] = Archived;
                objArray2[8] = Deleted;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.TaskMasterDataTable table = (CloudAccountDA.TaskMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TaskMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TaskMasterRow FindByTaskID(int TaskID)
            {
                return (CloudAccountDA.TaskMasterRow) base.Rows.Find(new object[] { TaskID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TaskMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TaskMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnTaskName = new DataColumn("TaskName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaskName);
                this.columnTaskDesc = new DataColumn("TaskDesc", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaskDesc);
                this.columnBillToClient = new DataColumn("BillToClient", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnBillToClient);
                this.columnRatePerHours = new DataColumn("RatePerHours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnRatePerHours);
                this.columnActive = new DataColumn("Active", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnArchived = new DataColumn("Archived", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnTaskID }, true));
                this.columnTaskID.AutoIncrement = true;
                this.columnTaskID.AutoIncrementSeed = -1L;
                this.columnTaskID.AutoIncrementStep = -1L;
                this.columnTaskID.AllowDBNull = false;
                this.columnTaskID.ReadOnly = true;
                this.columnTaskID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnTaskName.MaxLength = 50;
                this.columnTaskDesc.MaxLength = 0x7fffffff;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnTaskID = base.Columns["TaskID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnTaskName = base.Columns["TaskName"];
                this.columnTaskDesc = base.Columns["TaskDesc"];
                this.columnBillToClient = base.Columns["BillToClient"];
                this.columnRatePerHours = base.Columns["RatePerHours"];
                this.columnActive = base.Columns["Active"];
                this.columnArchived = base.Columns["Archived"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TaskMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TaskMasterRow NewTaskMasterRow()
            {
                return (CloudAccountDA.TaskMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TaskMasterRowChanged != null)
                {
                    this.TaskMasterRowChanged(this, new CloudAccountDA.TaskMasterRowChangeEvent((CloudAccountDA.TaskMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TaskMasterRowChanging != null)
                {
                    this.TaskMasterRowChanging(this, new CloudAccountDA.TaskMasterRowChangeEvent((CloudAccountDA.TaskMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TaskMasterRowDeleted != null)
                {
                    this.TaskMasterRowDeleted(this, new CloudAccountDA.TaskMasterRowChangeEvent((CloudAccountDA.TaskMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TaskMasterRowDeleting != null)
                {
                    this.TaskMasterRowDeleting(this, new CloudAccountDA.TaskMasterRowChangeEvent((CloudAccountDA.TaskMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveTaskMasterRow(CloudAccountDA.TaskMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ActiveColumn
            {
                get
                {
                    return this.columnActive;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ArchivedColumn
            {
                get
                {
                    return this.columnArchived;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BillToClientColumn
            {
                get
                {
                    return this.columnBillToClient;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TaskMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TaskMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn RatePerHoursColumn
            {
                get
                {
                    return this.columnRatePerHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskDescColumn
            {
                get
                {
                    return this.columnTaskDesc;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskNameColumn
            {
                get
                {
                    return this.columnTaskName;
                }
            }
        }
        
        public class TaskMasterRow : DataRow
        {
            private CloudAccountDA.TaskMasterDataTable tableTaskMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TaskMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTaskMaster = (CloudAccountDA.TaskMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsActiveNull()
            {
                return base.IsNull(this.tableTaskMaster.ActiveColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchivedNull()
            {
                return base.IsNull(this.tableTaskMaster.ArchivedColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBillToClientNull()
            {
                return base.IsNull(this.tableTaskMaster.BillToClientColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeletedNull()
            {
                return base.IsNull(this.tableTaskMaster.DeletedColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsRatePerHoursNull()
            {
                return base.IsNull(this.tableTaskMaster.RatePerHoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskDescNull()
            {
                return base.IsNull(this.tableTaskMaster.TaskDescColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaskNameNull()
            {
                return base.IsNull(this.tableTaskMaster.TaskNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetActiveNull()
            {
                base[this.tableTaskMaster.ActiveColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetArchivedNull()
            {
                base[this.tableTaskMaster.ArchivedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetBillToClientNull()
            {
                base[this.tableTaskMaster.BillToClientColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDeletedNull()
            {
                base[this.tableTaskMaster.DeletedColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetRatePerHoursNull()
            {
                base[this.tableTaskMaster.RatePerHoursColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaskDescNull()
            {
                base[this.tableTaskMaster.TaskDescColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaskNameNull()
            {
                base[this.tableTaskMaster.TaskNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Active
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableTaskMaster.ActiveColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Active' in table 'TaskMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableTaskMaster.ActiveColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Archived
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableTaskMaster.ArchivedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Archived' in table 'TaskMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableTaskMaster.ArchivedColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool BillToClient
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableTaskMaster.BillToClientColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'BillToClient' in table 'TaskMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableTaskMaster.BillToClientColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableTaskMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableTaskMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Deleted
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableTaskMaster.DeletedColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Deleted' in table 'TaskMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableTaskMaster.DeletedColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal RatePerHours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableTaskMaster.RatePerHoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'RatePerHours' in table 'TaskMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableTaskMaster.RatePerHoursColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TaskDesc
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTaskMaster.TaskDescColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaskDesc' in table 'TaskMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTaskMaster.TaskDescColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TaskID
            {
                get
                {
                    return (int) base[this.tableTaskMaster.TaskIDColumn];
                }
                set
                {
                    base[this.tableTaskMaster.TaskIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TaskName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTaskMaster.TaskNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaskName' in table 'TaskMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTaskMaster.TaskNameColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TaskMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TaskMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TaskMasterRowChangeEvent(CloudAccountDA.TaskMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TaskMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TaskMasterRowChangeEventHandler(object sender, CloudAccountDA.TaskMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TaxMasterDataTable : TypedTableBase<CloudAccountDA.TaxMasterRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnTaxID;
            private DataColumn columnTaxName;
            private DataColumn columnTaxNumber;
            private DataColumn columnTaxRate;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaxMasterRowChangeEventHandler TaxMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaxMasterRowChangeEventHandler TaxMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaxMasterRowChangeEventHandler TaxMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TaxMasterRowChangeEventHandler TaxMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TaxMasterDataTable()
            {
                base.TableName = "TaxMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TaxMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TaxMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTaxMasterRow(CloudAccountDA.TaxMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TaxMasterRow AddTaxMasterRow(int CompanyID, string TaxName, decimal TaxRate, string TaxNumber)
            {
                CloudAccountDA.TaxMasterRow row = (CloudAccountDA.TaxMasterRow) base.NewRow();
                object[] objArray2 = new object[5];
                objArray2[1] = CompanyID;
                objArray2[2] = TaxName;
                objArray2[3] = TaxRate;
                objArray2[4] = TaxNumber;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.TaxMasterDataTable table = (CloudAccountDA.TaxMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TaxMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TaxMasterRow FindByTaxID(int TaxID)
            {
                return (CloudAccountDA.TaxMasterRow) base.Rows.Find(new object[] { TaxID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TaxMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TaxMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnTaxID = new DataColumn("TaxID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaxID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnTaxName = new DataColumn("TaxName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaxName);
                this.columnTaxRate = new DataColumn("TaxRate", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnTaxRate);
                this.columnTaxNumber = new DataColumn("TaxNumber", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTaxNumber);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnTaxID }, true));
                this.columnTaxID.AutoIncrement = true;
                this.columnTaxID.AutoIncrementSeed = -1L;
                this.columnTaxID.AutoIncrementStep = -1L;
                this.columnTaxID.AllowDBNull = false;
                this.columnTaxID.ReadOnly = true;
                this.columnTaxID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnTaxName.MaxLength = 50;
                this.columnTaxNumber.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnTaxID = base.Columns["TaxID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnTaxName = base.Columns["TaxName"];
                this.columnTaxRate = base.Columns["TaxRate"];
                this.columnTaxNumber = base.Columns["TaxNumber"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TaxMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TaxMasterRow NewTaxMasterRow()
            {
                return (CloudAccountDA.TaxMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TaxMasterRowChanged != null)
                {
                    this.TaxMasterRowChanged(this, new CloudAccountDA.TaxMasterRowChangeEvent((CloudAccountDA.TaxMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TaxMasterRowChanging != null)
                {
                    this.TaxMasterRowChanging(this, new CloudAccountDA.TaxMasterRowChangeEvent((CloudAccountDA.TaxMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TaxMasterRowDeleted != null)
                {
                    this.TaxMasterRowDeleted(this, new CloudAccountDA.TaxMasterRowChangeEvent((CloudAccountDA.TaxMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TaxMasterRowDeleting != null)
                {
                    this.TaxMasterRowDeleting(this, new CloudAccountDA.TaxMasterRowChangeEvent((CloudAccountDA.TaxMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveTaxMasterRow(CloudAccountDA.TaxMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TaxMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TaxMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaxIDColumn
            {
                get
                {
                    return this.columnTaxID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaxNameColumn
            {
                get
                {
                    return this.columnTaxName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TaxNumberColumn
            {
                get
                {
                    return this.columnTaxNumber;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaxRateColumn
            {
                get
                {
                    return this.columnTaxRate;
                }
            }
        }
        
        public class TaxMasterRow : DataRow
        {
            private CloudAccountDA.TaxMasterDataTable tableTaxMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TaxMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTaxMaster = (CloudAccountDA.TaxMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTaxNameNull()
            {
                return base.IsNull(this.tableTaxMaster.TaxNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaxNumberNull()
            {
                return base.IsNull(this.tableTaxMaster.TaxNumberColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaxRateNull()
            {
                return base.IsNull(this.tableTaxMaster.TaxRateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTaxNameNull()
            {
                base[this.tableTaxMaster.TaxNameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaxNumberNull()
            {
                base[this.tableTaxMaster.TaxNumberColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaxRateNull()
            {
                base[this.tableTaxMaster.TaxRateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableTaxMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableTaxMaster.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaxID
            {
                get
                {
                    return (int) base[this.tableTaxMaster.TaxIDColumn];
                }
                set
                {
                    base[this.tableTaxMaster.TaxIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TaxName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTaxMaster.TaxNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxName' in table 'TaxMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTaxMaster.TaxNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TaxNumber
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTaxMaster.TaxNumberColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxNumber' in table 'TaxMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTaxMaster.TaxNumberColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TaxRate
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableTaxMaster.TaxRateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TaxRate' in table 'TaxMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableTaxMaster.TaxRateColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TaxMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TaxMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TaxMasterRowChangeEvent(CloudAccountDA.TaxMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TaxMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TaxMasterRowChangeEventHandler(object sender, CloudAccountDA.TaxMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TeamSummaryDataTable : TypedTableBase<CloudAccountDA.TeamSummaryRow>
        {
            private DataColumn columnEntryFor;
            private DataColumn columnHours;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TeamSummaryRowChangeEventHandler TeamSummaryRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TeamSummaryRowChangeEventHandler TeamSummaryRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TeamSummaryRowChangeEventHandler TeamSummaryRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TeamSummaryRowChangeEventHandler TeamSummaryRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TeamSummaryDataTable()
            {
                base.TableName = "TeamSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TeamSummaryDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TeamSummaryDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTeamSummaryRow(CloudAccountDA.TeamSummaryRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TeamSummaryRow AddTeamSummaryRow(decimal Hours, string EntryFor)
            {
                CloudAccountDA.TeamSummaryRow row = (CloudAccountDA.TeamSummaryRow) base.NewRow();
                row.ItemArray = new object[] { Hours, EntryFor };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.TeamSummaryDataTable table = (CloudAccountDA.TeamSummaryDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TeamSummaryDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TeamSummaryRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TeamSummaryDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnEntryFor = new DataColumn("EntryFor", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEntryFor);
                this.columnHours.ReadOnly = true;
                this.columnEntryFor.AllowDBNull = false;
                this.columnEntryFor.MaxLength = 50;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                this.columnHours = base.Columns["Hours"];
                this.columnEntryFor = base.Columns["EntryFor"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TeamSummaryRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TeamSummaryRow NewTeamSummaryRow()
            {
                return (CloudAccountDA.TeamSummaryRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TeamSummaryRowChanged != null)
                {
                    this.TeamSummaryRowChanged(this, new CloudAccountDA.TeamSummaryRowChangeEvent((CloudAccountDA.TeamSummaryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TeamSummaryRowChanging != null)
                {
                    this.TeamSummaryRowChanging(this, new CloudAccountDA.TeamSummaryRowChangeEvent((CloudAccountDA.TeamSummaryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TeamSummaryRowDeleted != null)
                {
                    this.TeamSummaryRowDeleted(this, new CloudAccountDA.TeamSummaryRowChangeEvent((CloudAccountDA.TeamSummaryRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TeamSummaryRowDeleting != null)
                {
                    this.TeamSummaryRowDeleting(this, new CloudAccountDA.TeamSummaryRowChangeEvent((CloudAccountDA.TeamSummaryRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTeamSummaryRow(CloudAccountDA.TeamSummaryRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, Browsable(false)]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EntryForColumn
            {
                get
                {
                    return this.columnEntryFor;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TeamSummaryRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TeamSummaryRow) base.Rows[index];
                }
            }
        }
        
        public class TeamSummaryRow : DataRow
        {
            private CloudAccountDA.TeamSummaryDataTable tableTeamSummary;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TeamSummaryRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTeamSummary = (CloudAccountDA.TeamSummaryDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableTeamSummary.HoursColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHoursNull()
            {
                base[this.tableTeamSummary.HoursColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EntryFor
            {
                get
                {
                    return (string) base[this.tableTeamSummary.EntryForColumn];
                }
                set
                {
                    base[this.tableTeamSummary.EntryForColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableTeamSummary.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'TeamSummary' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableTeamSummary.HoursColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TeamSummaryRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TeamSummaryRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TeamSummaryRowChangeEvent(CloudAccountDA.TeamSummaryRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TeamSummaryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TeamSummaryRowChangeEventHandler(object sender, CloudAccountDA.TeamSummaryRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TemplateMasterDataTable : TypedTableBase<CloudAccountDA.TemplateMasterRow>
        {
            private DataColumn columnTemplateHTMLFileName;
            private DataColumn columnTemplateID;
            private DataColumn columnTemplateImage;
            private DataColumn columnTemplateName;
            private DataColumn columnTemplatePDF;
            private DataColumn columnTemplateStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateMasterRowChangeEventHandler TemplateMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateMasterRowChangeEventHandler TemplateMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateMasterRowChangeEventHandler TemplateMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateMasterRowChangeEventHandler TemplateMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TemplateMasterDataTable()
            {
                base.TableName = "TemplateMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TemplateMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TemplateMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddTemplateMasterRow(CloudAccountDA.TemplateMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TemplateMasterRow AddTemplateMasterRow(string TemplateName, byte[] TemplateImage, byte[] TemplatePDF, string TemplateHTMLFileName, bool TemplateStatus)
            {
                CloudAccountDA.TemplateMasterRow row = (CloudAccountDA.TemplateMasterRow) base.NewRow();
                object[] objArray2 = new object[6];
                objArray2[1] = TemplateName;
                objArray2[2] = TemplateImage;
                objArray2[3] = TemplatePDF;
                objArray2[4] = TemplateHTMLFileName;
                objArray2[5] = TemplateStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.TemplateMasterDataTable table = (CloudAccountDA.TemplateMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TemplateMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TemplateMasterRow FindByTemplateID(int TemplateID)
            {
                return (CloudAccountDA.TemplateMasterRow) base.Rows.Find(new object[] { TemplateID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TemplateMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TemplateMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnTemplateID = new DataColumn("TemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnTemplateName = new DataColumn("TemplateName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnTemplateImage = new DataColumn("TemplateImage", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateImage);
                this.columnTemplatePDF = new DataColumn("TemplatePDF", typeof(byte[]), null, MappingType.Element);
                base.Columns.Add(this.columnTemplatePDF);
                this.columnTemplateHTMLFileName = new DataColumn("TemplateHTMLFileName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateHTMLFileName);
                this.columnTemplateStatus = new DataColumn("TemplateStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnTemplateID }, true));
                this.columnTemplateID.AutoIncrement = true;
                this.columnTemplateID.AutoIncrementSeed = -1L;
                this.columnTemplateID.AutoIncrementStep = -1L;
                this.columnTemplateID.AllowDBNull = false;
                this.columnTemplateID.ReadOnly = true;
                this.columnTemplateID.Unique = true;
                this.columnTemplateName.AllowDBNull = false;
                this.columnTemplateName.MaxLength = 50;
                this.columnTemplateImage.AllowDBNull = false;
                this.columnTemplatePDF.AllowDBNull = false;
                this.columnTemplateHTMLFileName.AllowDBNull = false;
                this.columnTemplateHTMLFileName.MaxLength = 50;
                this.columnTemplateStatus.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnTemplateImage = base.Columns["TemplateImage"];
                this.columnTemplatePDF = base.Columns["TemplatePDF"];
                this.columnTemplateHTMLFileName = base.Columns["TemplateHTMLFileName"];
                this.columnTemplateStatus = base.Columns["TemplateStatus"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TemplateMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TemplateMasterRow NewTemplateMasterRow()
            {
                return (CloudAccountDA.TemplateMasterRow) base.NewRow();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TemplateMasterRowChanged != null)
                {
                    this.TemplateMasterRowChanged(this, new CloudAccountDA.TemplateMasterRowChangeEvent((CloudAccountDA.TemplateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TemplateMasterRowChanging != null)
                {
                    this.TemplateMasterRowChanging(this, new CloudAccountDA.TemplateMasterRowChangeEvent((CloudAccountDA.TemplateMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TemplateMasterRowDeleted != null)
                {
                    this.TemplateMasterRowDeleted(this, new CloudAccountDA.TemplateMasterRowChangeEvent((CloudAccountDA.TemplateMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TemplateMasterRowDeleting != null)
                {
                    this.TemplateMasterRowDeleting(this, new CloudAccountDA.TemplateMasterRowChangeEvent((CloudAccountDA.TemplateMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveTemplateMasterRow(CloudAccountDA.TemplateMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), Browsable(false), DebuggerNonUserCode]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TemplateMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TemplateMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TemplateHTMLFileNameColumn
            {
                get
                {
                    return this.columnTemplateHTMLFileName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TemplateIDColumn
            {
                get
                {
                    return this.columnTemplateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TemplateImageColumn
            {
                get
                {
                    return this.columnTemplateImage;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TemplateNameColumn
            {
                get
                {
                    return this.columnTemplateName;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TemplatePDFColumn
            {
                get
                {
                    return this.columnTemplatePDF;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TemplateStatusColumn
            {
                get
                {
                    return this.columnTemplateStatus;
                }
            }
        }
        
        public class TemplateMasterRow : DataRow
        {
            private CloudAccountDA.TemplateMasterDataTable tableTemplateMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TemplateMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTemplateMaster = (CloudAccountDA.TemplateMasterDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TemplateHTMLFileName
            {
                get
                {
                    return (string) base[this.tableTemplateMaster.TemplateHTMLFileNameColumn];
                }
                set
                {
                    base[this.tableTemplateMaster.TemplateHTMLFileNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TemplateID
            {
                get
                {
                    return (int) base[this.tableTemplateMaster.TemplateIDColumn];
                }
                set
                {
                    base[this.tableTemplateMaster.TemplateIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public byte[] TemplateImage
            {
                get
                {
                    return (byte[]) base[this.tableTemplateMaster.TemplateImageColumn];
                }
                set
                {
                    base[this.tableTemplateMaster.TemplateImageColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TemplateName
            {
                get
                {
                    return (string) base[this.tableTemplateMaster.TemplateNameColumn];
                }
                set
                {
                    base[this.tableTemplateMaster.TemplateNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public byte[] TemplatePDF
            {
                get
                {
                    return (byte[]) base[this.tableTemplateMaster.TemplatePDFColumn];
                }
                set
                {
                    base[this.tableTemplateMaster.TemplatePDFColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool TemplateStatus
            {
                get
                {
                    return (bool) base[this.tableTemplateMaster.TemplateStatusColumn];
                }
                set
                {
                    base[this.tableTemplateMaster.TemplateStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TemplateMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TemplateMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TemplateMasterRowChangeEvent(CloudAccountDA.TemplateMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TemplateMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TemplateMasterRowChangeEventHandler(object sender, CloudAccountDA.TemplateMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TemplateSettingsDataTable : TypedTableBase<CloudAccountDA.TemplateSettingsRow>
        {
            private DataColumn columnCompanyID;
            private DataColumn columnCreditTitle;
            private DataColumn columnEstimateTitle;
            private DataColumn columnInvoiceTitle;
            private DataColumn columnPaymentStub;
            private DataColumn columnTemplateID;
            private DataColumn columnTemplateSettingsID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateSettingsRowChangeEventHandler TemplateSettingsRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateSettingsRowChangeEventHandler TemplateSettingsRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateSettingsRowChangeEventHandler TemplateSettingsRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TemplateSettingsRowChangeEventHandler TemplateSettingsRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TemplateSettingsDataTable()
            {
                base.TableName = "TemplateSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TemplateSettingsDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TemplateSettingsDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddTemplateSettingsRow(CloudAccountDA.TemplateSettingsRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TemplateSettingsRow AddTemplateSettingsRow(int CompanyID, int TemplateID, string InvoiceTitle, string EstimateTitle, string CreditTitle, bool PaymentStub)
            {
                CloudAccountDA.TemplateSettingsRow row = (CloudAccountDA.TemplateSettingsRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = CompanyID;
                objArray2[2] = TemplateID;
                objArray2[3] = InvoiceTitle;
                objArray2[4] = EstimateTitle;
                objArray2[5] = CreditTitle;
                objArray2[6] = PaymentStub;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.TemplateSettingsDataTable table = (CloudAccountDA.TemplateSettingsDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TemplateSettingsDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TemplateSettingsRow FindByTemplateSettingsID(int TemplateSettingsID)
            {
                return (CloudAccountDA.TemplateSettingsRow) base.Rows.Find(new object[] { TemplateSettingsID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TemplateSettingsRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TemplateSettingsDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnTemplateSettingsID = new DataColumn("TemplateSettingsID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateSettingsID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnTemplateID = new DataColumn("TemplateID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnInvoiceTitle = new DataColumn("InvoiceTitle", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnInvoiceTitle);
                this.columnEstimateTitle = new DataColumn("EstimateTitle", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEstimateTitle);
                this.columnCreditTitle = new DataColumn("CreditTitle", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnCreditTitle);
                this.columnPaymentStub = new DataColumn("PaymentStub", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnPaymentStub);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnTemplateSettingsID }, true));
                this.columnTemplateSettingsID.AutoIncrement = true;
                this.columnTemplateSettingsID.AutoIncrementSeed = -1L;
                this.columnTemplateSettingsID.AutoIncrementStep = -1L;
                this.columnTemplateSettingsID.AllowDBNull = false;
                this.columnTemplateSettingsID.ReadOnly = true;
                this.columnTemplateSettingsID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnTemplateID.AllowDBNull = false;
                this.columnInvoiceTitle.AllowDBNull = false;
                this.columnInvoiceTitle.MaxLength = 50;
                this.columnEstimateTitle.AllowDBNull = false;
                this.columnEstimateTitle.MaxLength = 50;
                this.columnCreditTitle.AllowDBNull = false;
                this.columnCreditTitle.MaxLength = 50;
                this.columnPaymentStub.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnTemplateSettingsID = base.Columns["TemplateSettingsID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnInvoiceTitle = base.Columns["InvoiceTitle"];
                this.columnEstimateTitle = base.Columns["EstimateTitle"];
                this.columnCreditTitle = base.Columns["CreditTitle"];
                this.columnPaymentStub = base.Columns["PaymentStub"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TemplateSettingsRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TemplateSettingsRow NewTemplateSettingsRow()
            {
                return (CloudAccountDA.TemplateSettingsRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TemplateSettingsRowChanged != null)
                {
                    this.TemplateSettingsRowChanged(this, new CloudAccountDA.TemplateSettingsRowChangeEvent((CloudAccountDA.TemplateSettingsRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TemplateSettingsRowChanging != null)
                {
                    this.TemplateSettingsRowChanging(this, new CloudAccountDA.TemplateSettingsRowChangeEvent((CloudAccountDA.TemplateSettingsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TemplateSettingsRowDeleted != null)
                {
                    this.TemplateSettingsRowDeleted(this, new CloudAccountDA.TemplateSettingsRowChangeEvent((CloudAccountDA.TemplateSettingsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TemplateSettingsRowDeleting != null)
                {
                    this.TemplateSettingsRowDeleting(this, new CloudAccountDA.TemplateSettingsRowChangeEvent((CloudAccountDA.TemplateSettingsRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTemplateSettingsRow(CloudAccountDA.TemplateSettingsRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CreditTitleColumn
            {
                get
                {
                    return this.columnCreditTitle;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EstimateTitleColumn
            {
                get
                {
                    return this.columnEstimateTitle;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn InvoiceTitleColumn
            {
                get
                {
                    return this.columnInvoiceTitle;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TemplateSettingsRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TemplateSettingsRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn PaymentStubColumn
            {
                get
                {
                    return this.columnPaymentStub;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TemplateIDColumn
            {
                get
                {
                    return this.columnTemplateID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TemplateSettingsIDColumn
            {
                get
                {
                    return this.columnTemplateSettingsID;
                }
            }
        }
        
        public class TemplateSettingsRow : DataRow
        {
            private CloudAccountDA.TemplateSettingsDataTable tableTemplateSettings;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TemplateSettingsRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTemplateSettings = (CloudAccountDA.TemplateSettingsDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableTemplateSettings.CompanyIDColumn];
                }
                set
                {
                    base[this.tableTemplateSettings.CompanyIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CreditTitle
            {
                get
                {
                    return (string) base[this.tableTemplateSettings.CreditTitleColumn];
                }
                set
                {
                    base[this.tableTemplateSettings.CreditTitleColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EstimateTitle
            {
                get
                {
                    return (string) base[this.tableTemplateSettings.EstimateTitleColumn];
                }
                set
                {
                    base[this.tableTemplateSettings.EstimateTitleColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string InvoiceTitle
            {
                get
                {
                    return (string) base[this.tableTemplateSettings.InvoiceTitleColumn];
                }
                set
                {
                    base[this.tableTemplateSettings.InvoiceTitleColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool PaymentStub
            {
                get
                {
                    return (bool) base[this.tableTemplateSettings.PaymentStubColumn];
                }
                set
                {
                    base[this.tableTemplateSettings.PaymentStubColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TemplateID
            {
                get
                {
                    return (int) base[this.tableTemplateSettings.TemplateIDColumn];
                }
                set
                {
                    base[this.tableTemplateSettings.TemplateIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TemplateSettingsID
            {
                get
                {
                    return (int) base[this.tableTemplateSettings.TemplateSettingsIDColumn];
                }
                set
                {
                    base[this.tableTemplateSettings.TemplateSettingsIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TemplateSettingsRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TemplateSettingsRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TemplateSettingsRowChangeEvent(CloudAccountDA.TemplateSettingsRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TemplateSettingsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TemplateSettingsRowChangeEventHandler(object sender, CloudAccountDA.TemplateSettingsRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TermServiceContentDataTable : TypedTableBase<CloudAccountDA.TermServiceContentRow>
        {
            private DataColumn columnTermServiceContent;
            private DataColumn columnTermServiceContentID;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TermServiceContentRowChangeEventHandler TermServiceContentRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TermServiceContentRowChangeEventHandler TermServiceContentRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TermServiceContentRowChangeEventHandler TermServiceContentRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TermServiceContentRowChangeEventHandler TermServiceContentRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TermServiceContentDataTable()
            {
                base.TableName = "TermServiceContent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TermServiceContentDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TermServiceContentDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTermServiceContentRow(CloudAccountDA.TermServiceContentRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TermServiceContentRow AddTermServiceContentRow(string TermServiceContent)
            {
                CloudAccountDA.TermServiceContentRow row = (CloudAccountDA.TermServiceContentRow) base.NewRow();
                object[] objArray2 = new object[2];
                objArray2[1] = TermServiceContent;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.TermServiceContentDataTable table = (CloudAccountDA.TermServiceContentDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TermServiceContentDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TermServiceContentRow FindByTermServiceContentID(int TermServiceContentID)
            {
                return (CloudAccountDA.TermServiceContentRow) base.Rows.Find(new object[] { TermServiceContentID });
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TermServiceContentRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TermServiceContentDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnTermServiceContentID = new DataColumn("TermServiceContentID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTermServiceContentID);
                this.columnTermServiceContent = new DataColumn("TermServiceContent", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTermServiceContent);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnTermServiceContentID }, true));
                this.columnTermServiceContentID.AutoIncrement = true;
                this.columnTermServiceContentID.AutoIncrementSeed = -1L;
                this.columnTermServiceContentID.AutoIncrementStep = -1L;
                this.columnTermServiceContentID.AllowDBNull = false;
                this.columnTermServiceContentID.ReadOnly = true;
                this.columnTermServiceContentID.Unique = true;
                this.columnTermServiceContent.AllowDBNull = false;
                this.columnTermServiceContent.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnTermServiceContentID = base.Columns["TermServiceContentID"];
                this.columnTermServiceContent = base.Columns["TermServiceContent"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TermServiceContentRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TermServiceContentRow NewTermServiceContentRow()
            {
                return (CloudAccountDA.TermServiceContentRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TermServiceContentRowChanged != null)
                {
                    this.TermServiceContentRowChanged(this, new CloudAccountDA.TermServiceContentRowChangeEvent((CloudAccountDA.TermServiceContentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TermServiceContentRowChanging != null)
                {
                    this.TermServiceContentRowChanging(this, new CloudAccountDA.TermServiceContentRowChangeEvent((CloudAccountDA.TermServiceContentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TermServiceContentRowDeleted != null)
                {
                    this.TermServiceContentRowDeleted(this, new CloudAccountDA.TermServiceContentRowChangeEvent((CloudAccountDA.TermServiceContentRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TermServiceContentRowDeleting != null)
                {
                    this.TermServiceContentRowDeleting(this, new CloudAccountDA.TermServiceContentRowChangeEvent((CloudAccountDA.TermServiceContentRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTermServiceContentRow(CloudAccountDA.TermServiceContentRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TermServiceContentRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TermServiceContentRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TermServiceContentColumn
            {
                get
                {
                    return this.columnTermServiceContent;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TermServiceContentIDColumn
            {
                get
                {
                    return this.columnTermServiceContentID;
                }
            }
        }
        
        public class TermServiceContentRow : DataRow
        {
            private CloudAccountDA.TermServiceContentDataTable tableTermServiceContent;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TermServiceContentRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTermServiceContent = (CloudAccountDA.TermServiceContentDataTable) base.Table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TermServiceContent
            {
                get
                {
                    return (string) base[this.tableTermServiceContent.TermServiceContentColumn];
                }
                set
                {
                    base[this.tableTermServiceContent.TermServiceContentColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public int TermServiceContentID
            {
                get
                {
                    return (int) base[this.tableTermServiceContent.TermServiceContentIDColumn];
                }
                set
                {
                    base[this.tableTermServiceContent.TermServiceContentIDColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TermServiceContentRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TermServiceContentRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TermServiceContentRowChangeEvent(CloudAccountDA.TermServiceContentRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TermServiceContentRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TermServiceContentRowChangeEventHandler(object sender, CloudAccountDA.TermServiceContentRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TestimonialsMasterDataTable : TypedTableBase<CloudAccountDA.TestimonialsMasterRow>
        {
            private DataColumn columnTestimonialComment;
            private DataColumn columnTestimonialCompanyName;
            private DataColumn columnTestimonialDate;
            private DataColumn columnTestimonialID;
            private DataColumn columnTestimonialLocation;
            private DataColumn columnTestimonialName;
            private DataColumn columnTestimonialStatus;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TestimonialsMasterRowChangeEventHandler TestimonialsMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TestimonialsMasterRowChangeEventHandler TestimonialsMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TestimonialsMasterRowChangeEventHandler TestimonialsMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TestimonialsMasterRowChangeEventHandler TestimonialsMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestimonialsMasterDataTable()
            {
                base.TableName = "TestimonialsMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TestimonialsMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TestimonialsMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddTestimonialsMasterRow(CloudAccountDA.TestimonialsMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TestimonialsMasterRow AddTestimonialsMasterRow(string TestimonialName, string TestimonialCompanyName, string TestimonialLocation, string TestimonialComment, DateTime TestimonialDate, bool TestimonialStatus)
            {
                CloudAccountDA.TestimonialsMasterRow row = (CloudAccountDA.TestimonialsMasterRow) base.NewRow();
                object[] objArray2 = new object[7];
                objArray2[1] = TestimonialName;
                objArray2[2] = TestimonialCompanyName;
                objArray2[3] = TestimonialLocation;
                objArray2[4] = TestimonialComment;
                objArray2[5] = TestimonialDate;
                objArray2[6] = TestimonialStatus;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.TestimonialsMasterDataTable table = (CloudAccountDA.TestimonialsMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TestimonialsMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TestimonialsMasterRow FindByTestimonialID(int TestimonialID)
            {
                return (CloudAccountDA.TestimonialsMasterRow) base.Rows.Find(new object[] { TestimonialID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TestimonialsMasterRow);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TestimonialsMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                this.columnTestimonialID = new DataColumn("TestimonialID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTestimonialID);
                this.columnTestimonialName = new DataColumn("TestimonialName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTestimonialName);
                this.columnTestimonialCompanyName = new DataColumn("TestimonialCompanyName", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTestimonialCompanyName);
                this.columnTestimonialLocation = new DataColumn("TestimonialLocation", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTestimonialLocation);
                this.columnTestimonialComment = new DataColumn("TestimonialComment", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnTestimonialComment);
                this.columnTestimonialDate = new DataColumn("TestimonialDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnTestimonialDate);
                this.columnTestimonialStatus = new DataColumn("TestimonialStatus", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnTestimonialStatus);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnTestimonialID }, true));
                this.columnTestimonialID.AutoIncrement = true;
                this.columnTestimonialID.AutoIncrementSeed = -1L;
                this.columnTestimonialID.AutoIncrementStep = -1L;
                this.columnTestimonialID.AllowDBNull = false;
                this.columnTestimonialID.ReadOnly = true;
                this.columnTestimonialID.Unique = true;
                this.columnTestimonialName.MaxLength = 50;
                this.columnTestimonialCompanyName.MaxLength = 50;
                this.columnTestimonialLocation.MaxLength = 50;
                this.columnTestimonialComment.MaxLength = 0x7fffffff;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnTestimonialID = base.Columns["TestimonialID"];
                this.columnTestimonialName = base.Columns["TestimonialName"];
                this.columnTestimonialCompanyName = base.Columns["TestimonialCompanyName"];
                this.columnTestimonialLocation = base.Columns["TestimonialLocation"];
                this.columnTestimonialComment = base.Columns["TestimonialComment"];
                this.columnTestimonialDate = base.Columns["TestimonialDate"];
                this.columnTestimonialStatus = base.Columns["TestimonialStatus"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TestimonialsMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TestimonialsMasterRow NewTestimonialsMasterRow()
            {
                return (CloudAccountDA.TestimonialsMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TestimonialsMasterRowChanged != null)
                {
                    this.TestimonialsMasterRowChanged(this, new CloudAccountDA.TestimonialsMasterRowChangeEvent((CloudAccountDA.TestimonialsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TestimonialsMasterRowChanging != null)
                {
                    this.TestimonialsMasterRowChanging(this, new CloudAccountDA.TestimonialsMasterRowChangeEvent((CloudAccountDA.TestimonialsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TestimonialsMasterRowDeleted != null)
                {
                    this.TestimonialsMasterRowDeleted(this, new CloudAccountDA.TestimonialsMasterRowChangeEvent((CloudAccountDA.TestimonialsMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TestimonialsMasterRowDeleting != null)
                {
                    this.TestimonialsMasterRowDeleting(this, new CloudAccountDA.TestimonialsMasterRowChangeEvent((CloudAccountDA.TestimonialsMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTestimonialsMasterRow(CloudAccountDA.TestimonialsMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TestimonialsMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TestimonialsMasterRow) base.Rows[index];
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TestimonialCommentColumn
            {
                get
                {
                    return this.columnTestimonialComment;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TestimonialCompanyNameColumn
            {
                get
                {
                    return this.columnTestimonialCompanyName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TestimonialDateColumn
            {
                get
                {
                    return this.columnTestimonialDate;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TestimonialIDColumn
            {
                get
                {
                    return this.columnTestimonialID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TestimonialLocationColumn
            {
                get
                {
                    return this.columnTestimonialLocation;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TestimonialNameColumn
            {
                get
                {
                    return this.columnTestimonialName;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn TestimonialStatusColumn
            {
                get
                {
                    return this.columnTestimonialStatus;
                }
            }
        }
        
        public class TestimonialsMasterRow : DataRow
        {
            private CloudAccountDA.TestimonialsMasterDataTable tableTestimonialsMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestimonialsMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTestimonialsMaster = (CloudAccountDA.TestimonialsMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTestimonialCommentNull()
            {
                return base.IsNull(this.tableTestimonialsMaster.TestimonialCommentColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTestimonialCompanyNameNull()
            {
                return base.IsNull(this.tableTestimonialsMaster.TestimonialCompanyNameColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTestimonialDateNull()
            {
                return base.IsNull(this.tableTestimonialsMaster.TestimonialDateColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTestimonialLocationNull()
            {
                return base.IsNull(this.tableTestimonialsMaster.TestimonialLocationColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsTestimonialNameNull()
            {
                return base.IsNull(this.tableTestimonialsMaster.TestimonialNameColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTestimonialStatusNull()
            {
                return base.IsNull(this.tableTestimonialsMaster.TestimonialStatusColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTestimonialCommentNull()
            {
                base[this.tableTestimonialsMaster.TestimonialCommentColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTestimonialCompanyNameNull()
            {
                base[this.tableTestimonialsMaster.TestimonialCompanyNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTestimonialDateNull()
            {
                base[this.tableTestimonialsMaster.TestimonialDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTestimonialLocationNull()
            {
                base[this.tableTestimonialsMaster.TestimonialLocationColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTestimonialNameNull()
            {
                base[this.tableTestimonialsMaster.TestimonialNameColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetTestimonialStatusNull()
            {
                base[this.tableTestimonialsMaster.TestimonialStatusColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestimonialComment
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTestimonialsMaster.TestimonialCommentColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TestimonialComment' in table 'TestimonialsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTestimonialsMaster.TestimonialCommentColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TestimonialCompanyName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTestimonialsMaster.TestimonialCompanyNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TestimonialCompanyName' in table 'TestimonialsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTestimonialsMaster.TestimonialCompanyNameColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DateTime TestimonialDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableTestimonialsMaster.TestimonialDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TestimonialDate' in table 'TestimonialsMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableTestimonialsMaster.TestimonialDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TestimonialID
            {
                get
                {
                    return (int) base[this.tableTestimonialsMaster.TestimonialIDColumn];
                }
                set
                {
                    base[this.tableTestimonialsMaster.TestimonialIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TestimonialLocation
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTestimonialsMaster.TestimonialLocationColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TestimonialLocation' in table 'TestimonialsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTestimonialsMaster.TestimonialLocationColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string TestimonialName
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTestimonialsMaster.TestimonialNameColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TestimonialName' in table 'TestimonialsMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTestimonialsMaster.TestimonialNameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool TestimonialStatus
            {
                get
                {
                    bool flag;
                    try
                    {
                        flag = (bool) base[this.tableTestimonialsMaster.TestimonialStatusColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'TestimonialStatus' in table 'TestimonialsMaster' is DBNull.", exception);
                    }
                    return flag;
                }
                set
                {
                    base[this.tableTestimonialsMaster.TestimonialStatusColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TestimonialsMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TestimonialsMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestimonialsMasterRowChangeEvent(CloudAccountDA.TestimonialsMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TestimonialsMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TestimonialsMasterRowChangeEventHandler(object sender, CloudAccountDA.TestimonialsMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TimesheetGridMasterDataTable : TypedTableBase<CloudAccountDA.TimesheetGridMasterRow>
        {
            private DataColumn columnEntryDate;
            private DataColumn columnHours;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetGridMasterRowChangeEventHandler TimesheetGridMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetGridMasterRowChangeEventHandler TimesheetGridMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetGridMasterRowChangeEventHandler TimesheetGridMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetGridMasterRowChangeEventHandler TimesheetGridMasterRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TimesheetGridMasterDataTable()
            {
                base.TableName = "TimesheetGridMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TimesheetGridMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TimesheetGridMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void AddTimesheetGridMasterRow(CloudAccountDA.TimesheetGridMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetGridMasterRow AddTimesheetGridMasterRow(decimal Hours, DateTime EntryDate)
            {
                CloudAccountDA.TimesheetGridMasterRow row = (CloudAccountDA.TimesheetGridMasterRow) base.NewRow();
                row.ItemArray = new object[] { Hours, EntryDate };
                base.Rows.Add(row);
                return row;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public override DataTable Clone()
            {
                CloudAccountDA.TimesheetGridMasterDataTable table = (CloudAccountDA.TimesheetGridMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TimesheetGridMasterDataTable();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TimesheetGridMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TimesheetGridMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnEntryDate = new DataColumn("EntryDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnEntryDate);
                this.columnHours.ReadOnly = true;
                this.columnEntryDate.ReadOnly = true;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnHours = base.Columns["Hours"];
                this.columnEntryDate = base.Columns["EntryDate"];
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TimesheetGridMasterRow(builder);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public CloudAccountDA.TimesheetGridMasterRow NewTimesheetGridMasterRow()
            {
                return (CloudAccountDA.TimesheetGridMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TimesheetGridMasterRowChanged != null)
                {
                    this.TimesheetGridMasterRowChanged(this, new CloudAccountDA.TimesheetGridMasterRowChangeEvent((CloudAccountDA.TimesheetGridMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TimesheetGridMasterRowChanging != null)
                {
                    this.TimesheetGridMasterRowChanging(this, new CloudAccountDA.TimesheetGridMasterRowChangeEvent((CloudAccountDA.TimesheetGridMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TimesheetGridMasterRowDeleted != null)
                {
                    this.TimesheetGridMasterRowDeleted(this, new CloudAccountDA.TimesheetGridMasterRowChangeEvent((CloudAccountDA.TimesheetGridMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TimesheetGridMasterRowDeleting != null)
                {
                    this.TimesheetGridMasterRowDeleting(this, new CloudAccountDA.TimesheetGridMasterRowChangeEvent((CloudAccountDA.TimesheetGridMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveTimesheetGridMasterRow(CloudAccountDA.TimesheetGridMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode, Browsable(false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EntryDateColumn
            {
                get
                {
                    return this.columnEntryDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetGridMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TimesheetGridMasterRow) base.Rows[index];
                }
            }
        }
        
        public class TimesheetGridMasterRow : DataRow
        {
            private CloudAccountDA.TimesheetGridMasterDataTable tableTimesheetGridMaster;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal TimesheetGridMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTimesheetGridMaster = (CloudAccountDA.TimesheetGridMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEntryDateNull()
            {
                return base.IsNull(this.tableTimesheetGridMaster.EntryDateColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableTimesheetGridMaster.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetEntryDateNull()
            {
                base[this.tableTimesheetGridMaster.EntryDateColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetHoursNull()
            {
                base[this.tableTimesheetGridMaster.HoursColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime EntryDate
            {
                get
                {
                    DateTime time;
                    try
                    {
                        time = (DateTime) base[this.tableTimesheetGridMaster.EntryDateColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'EntryDate' in table 'TimesheetGridMaster' is DBNull.", exception);
                    }
                    return time;
                }
                set
                {
                    base[this.tableTimesheetGridMaster.EntryDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableTimesheetGridMaster.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'TimesheetGridMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableTimesheetGridMaster.HoursColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TimesheetGridMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TimesheetGridMasterRow eventRow;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimesheetGridMasterRowChangeEvent(CloudAccountDA.TimesheetGridMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetGridMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TimesheetGridMasterRowChangeEventHandler(object sender, CloudAccountDA.TimesheetGridMasterRowChangeEvent e);
        
        [Serializable, XmlSchemaProvider("GetTypedTableSchema")]
        public class TimesheetMasterDataTable : TypedTableBase<CloudAccountDA.TimesheetMasterRow>
        {
            private DataColumn columnBilled;
            private DataColumn columnCompanyID;
            private DataColumn columnEntryBy;
            private DataColumn columnEntryDate;
            private DataColumn columnEntryFor;
            private DataColumn columnEntryForRole;
            private DataColumn columnHours;
            private DataColumn columnNotes;
            private DataColumn columnProjectID;
            private DataColumn columnTaskID;
            private DataColumn columnTimesheetDate;
            private DataColumn columnTimesheetID;
            private DataColumn columnUnbilled;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetMasterRowChangeEventHandler TimesheetMasterRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetMasterRowChangeEventHandler TimesheetMasterRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetMasterRowChangeEventHandler TimesheetMasterRowDeleted;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CloudAccountDA.TimesheetMasterRowChangeEventHandler TimesheetMasterRowDeleting;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimesheetMasterDataTable()
            {
                base.TableName = "TimesheetMaster";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TimesheetMasterDataTable(DataTable table)
            {
                base.TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    base.CaseSensitive = table.CaseSensitive;
                }
                if (table.Locale.ToString() != table.DataSet.Locale.ToString())
                {
                    base.Locale = table.Locale;
                }
                if (table.Namespace != table.DataSet.Namespace)
                {
                    base.Namespace = table.Namespace;
                }
                base.Prefix = table.Prefix;
                base.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TimesheetMasterDataTable(SerializationInfo info, StreamingContext context) : base(info, context)
            {
                this.InitVars();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTimesheetMasterRow(CloudAccountDA.TimesheetMasterRow row)
            {
                base.Rows.Add(row);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetMasterRow AddTimesheetMasterRow(int CompanyID, DateTime TimesheetDate, int ProjectID, int TaskID, decimal Hours, string Notes, bool Billed, bool Unbilled, string EntryFor, string EntryForRole, string EntryBy, DateTime EntryDate)
            {
                CloudAccountDA.TimesheetMasterRow row = (CloudAccountDA.TimesheetMasterRow) base.NewRow();
                object[] objArray2 = new object[13];
                objArray2[1] = CompanyID;
                objArray2[2] = TimesheetDate;
                objArray2[3] = ProjectID;
                objArray2[4] = TaskID;
                objArray2[5] = Hours;
                objArray2[6] = Notes;
                objArray2[7] = Billed;
                objArray2[8] = Unbilled;
                objArray2[9] = EntryFor;
                objArray2[10] = EntryForRole;
                objArray2[11] = EntryBy;
                objArray2[12] = EntryDate;
                object[] objArray = objArray2;
                row.ItemArray = objArray;
                base.Rows.Add(row);
                return row;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                CloudAccountDA.TimesheetMasterDataTable table = (CloudAccountDA.TimesheetMasterDataTable) base.Clone();
                table.InitVars();
                return table;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override DataTable CreateInstance()
            {
                return new CloudAccountDA.TimesheetMasterDataTable();
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetMasterRow FindByTimesheetID(int TimesheetID)
            {
                return (CloudAccountDA.TimesheetMasterRow) base.Rows.Find(new object[] { TimesheetID });
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override Type GetRowType()
            {
                return typeof(CloudAccountDA.TimesheetMasterRow);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs)
            {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                CloudAccountDA tda = new CloudAccountDA();
                XmlSchemaAny item = new XmlSchemaAny {
                    Namespace = "http://www.w3.org/2001/XMLSchema",
                    MinOccurs = 0M,
                    MaxOccurs = 79228162514264337593543950335M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(item);
                XmlSchemaAny any2 = new XmlSchemaAny {
                    Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1",
                    MinOccurs = 1M,
                    ProcessContents = XmlSchemaContentProcessing.Lax
                };
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute = new XmlSchemaAttribute {
                    Name = "namespace",
                    FixedValue = tda.Namespace
                };
                type.Attributes.Add(attribute);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute {
                    Name = "tableTypeName",
                    FixedValue = "TimesheetMasterDataTable"
                };
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema schemaSerializable = tda.GetSchemaSerializable();
                if (xs.Contains(schemaSerializable.TargetNamespace))
                {
                    MemoryStream stream = new MemoryStream();
                    MemoryStream stream2 = new MemoryStream();
                    try
                    {
                        XmlSchema current = null;
                        schemaSerializable.Write(stream);
                        IEnumerator enumerator = xs.Schemas(schemaSerializable.TargetNamespace).GetEnumerator();
                        while (enumerator.MoveNext())
                        {
                            current = (XmlSchema) enumerator.Current;
                            stream2.SetLength(0L);
                            current.Write(stream2);
                            if (stream.Length == stream2.Length)
                            {
                                stream.Position = 0L;
                                stream2.Position = 0L;
                                while ((stream.Position != stream.Length) && (stream.ReadByte() == stream2.ReadByte()))
                                {
                                }
                                if (stream.Position == stream.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (stream != null)
                        {
                            stream.Close();
                        }
                        if (stream2 != null)
                        {
                            stream2.Close();
                        }
                    }
                }
                xs.Add(schemaSerializable);
                return type;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            private void InitClass()
            {
                this.columnTimesheetID = new DataColumn("TimesheetID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTimesheetID);
                this.columnCompanyID = new DataColumn("CompanyID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnCompanyID);
                this.columnTimesheetDate = new DataColumn("TimesheetDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnTimesheetDate);
                this.columnProjectID = new DataColumn("ProjectID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnTaskID = new DataColumn("TaskID", typeof(int), null, MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnHours = new DataColumn("Hours", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnHours);
                this.columnNotes = new DataColumn("Notes", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnBilled = new DataColumn("Billed", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnBilled);
                this.columnUnbilled = new DataColumn("Unbilled", typeof(bool), null, MappingType.Element);
                base.Columns.Add(this.columnUnbilled);
                this.columnEntryFor = new DataColumn("EntryFor", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEntryFor);
                this.columnEntryForRole = new DataColumn("EntryForRole", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEntryForRole);
                this.columnEntryBy = new DataColumn("EntryBy", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnEntryBy);
                this.columnEntryDate = new DataColumn("EntryDate", typeof(DateTime), null, MappingType.Element);
                base.Columns.Add(this.columnEntryDate);
                base.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { this.columnTimesheetID }, true));
                this.columnTimesheetID.AutoIncrement = true;
                this.columnTimesheetID.AutoIncrementSeed = -1L;
                this.columnTimesheetID.AutoIncrementStep = -1L;
                this.columnTimesheetID.AllowDBNull = false;
                this.columnTimesheetID.ReadOnly = true;
                this.columnTimesheetID.Unique = true;
                this.columnCompanyID.AllowDBNull = false;
                this.columnTimesheetDate.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
                this.columnTaskID.AllowDBNull = false;
                this.columnNotes.MaxLength = 500;
                this.columnBilled.AllowDBNull = false;
                this.columnUnbilled.AllowDBNull = false;
                this.columnEntryFor.AllowDBNull = false;
                this.columnEntryFor.MaxLength = 50;
                this.columnEntryForRole.AllowDBNull = false;
                this.columnEntryForRole.MaxLength = 50;
                this.columnEntryBy.AllowDBNull = false;
                this.columnEntryBy.MaxLength = 50;
                this.columnEntryDate.AllowDBNull = false;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            internal void InitVars()
            {
                this.columnTimesheetID = base.Columns["TimesheetID"];
                this.columnCompanyID = base.Columns["CompanyID"];
                this.columnTimesheetDate = base.Columns["TimesheetDate"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnTaskID = base.Columns["TaskID"];
                this.columnHours = base.Columns["Hours"];
                this.columnNotes = base.Columns["Notes"];
                this.columnBilled = base.Columns["Billed"];
                this.columnUnbilled = base.Columns["Unbilled"];
                this.columnEntryFor = base.Columns["EntryFor"];
                this.columnEntryForRole = base.Columns["EntryForRole"];
                this.columnEntryBy = base.Columns["EntryBy"];
                this.columnEntryDate = base.Columns["EntryDate"];
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CloudAccountDA.TimesheetMasterRow(builder);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetMasterRow NewTimesheetMasterRow()
            {
                return (CloudAccountDA.TimesheetMasterRow) base.NewRow();
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (this.TimesheetMasterRowChanged != null)
                {
                    this.TimesheetMasterRowChanged(this, new CloudAccountDA.TimesheetMasterRowChangeEvent((CloudAccountDA.TimesheetMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (this.TimesheetMasterRowChanging != null)
                {
                    this.TimesheetMasterRowChanging(this, new CloudAccountDA.TimesheetMasterRowChangeEvent((CloudAccountDA.TimesheetMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (this.TimesheetMasterRowDeleted != null)
                {
                    this.TimesheetMasterRowDeleted(this, new CloudAccountDA.TimesheetMasterRowChangeEvent((CloudAccountDA.TimesheetMasterRow) e.Row, e.Action));
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (this.TimesheetMasterRowDeleting != null)
                {
                    this.TimesheetMasterRowDeleting(this, new CloudAccountDA.TimesheetMasterRowChangeEvent((CloudAccountDA.TimesheetMasterRow) e.Row, e.Action));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void RemoveTimesheetMasterRow(CloudAccountDA.TimesheetMasterRow row)
            {
                base.Rows.Remove(row);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn BilledColumn
            {
                get
                {
                    return this.columnBilled;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CompanyIDColumn
            {
                get
                {
                    return this.columnCompanyID;
                }
            }
            
            [Browsable(false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Count
            {
                get
                {
                    return base.Rows.Count;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EntryByColumn
            {
                get
                {
                    return this.columnEntryBy;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn EntryDateColumn
            {
                get
                {
                    return this.columnEntryDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EntryForColumn
            {
                get
                {
                    return this.columnEntryFor;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn EntryForRoleColumn
            {
                get
                {
                    return this.columnEntryForRole;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn HoursColumn
            {
                get
                {
                    return this.columnHours;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetMasterRow this[int index]
            {
                get
                {
                    return (CloudAccountDA.TimesheetMasterRow) base.Rows[index];
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn NotesColumn
            {
                get
                {
                    return this.columnNotes;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return this.columnProjectID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TaskIDColumn
            {
                get
                {
                    return this.columnTaskID;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TimesheetDateColumn
            {
                get
                {
                    return this.columnTimesheetDate;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public DataColumn TimesheetIDColumn
            {
                get
                {
                    return this.columnTimesheetID;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn UnbilledColumn
            {
                get
                {
                    return this.columnUnbilled;
                }
            }
        }
        
        public class TimesheetMasterRow : DataRow
        {
            private CloudAccountDA.TimesheetMasterDataTable tableTimesheetMaster;
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TimesheetMasterRow(DataRowBuilder rb) : base(rb)
            {
                this.tableTimesheetMaster = (CloudAccountDA.TimesheetMasterDataTable) base.Table;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHoursNull()
            {
                return base.IsNull(this.tableTimesheetMaster.HoursColumn);
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool IsNotesNull()
            {
                return base.IsNull(this.tableTimesheetMaster.NotesColumn);
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHoursNull()
            {
                base[this.tableTimesheetMaster.HoursColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public void SetNotesNull()
            {
                base[this.tableTimesheetMaster.NotesColumn] = Convert.DBNull;
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public bool Billed
            {
                get
                {
                    return (bool) base[this.tableTimesheetMaster.BilledColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.BilledColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CompanyID
            {
                get
                {
                    return (int) base[this.tableTimesheetMaster.CompanyIDColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.CompanyIDColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EntryBy
            {
                get
                {
                    return (string) base[this.tableTimesheetMaster.EntryByColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.EntryByColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime EntryDate
            {
                get
                {
                    return (DateTime) base[this.tableTimesheetMaster.EntryDateColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.EntryDateColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EntryFor
            {
                get
                {
                    return (string) base[this.tableTimesheetMaster.EntryForColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.EntryForColumn] = value;
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public string EntryForRole
            {
                get
                {
                    return (string) base[this.tableTimesheetMaster.EntryForRoleColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.EntryForRoleColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Hours
            {
                get
                {
                    decimal num;
                    try
                    {
                        num = (decimal) base[this.tableTimesheetMaster.HoursColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Hours' in table 'TimesheetMaster' is DBNull.", exception);
                    }
                    return num;
                }
                set
                {
                    base[this.tableTimesheetMaster.HoursColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Notes
            {
                get
                {
                    string str;
                    try
                    {
                        str = (string) base[this.tableTimesheetMaster.NotesColumn];
                    }
                    catch (InvalidCastException exception)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'TimesheetMaster' is DBNull.", exception);
                    }
                    return str;
                }
                set
                {
                    base[this.tableTimesheetMaster.NotesColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ProjectID
            {
                get
                {
                    return (int) base[this.tableTimesheetMaster.ProjectIDColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.ProjectIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TaskID
            {
                get
                {
                    return (int) base[this.tableTimesheetMaster.TaskIDColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.TaskIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime TimesheetDate
            {
                get
                {
                    return (DateTime) base[this.tableTimesheetMaster.TimesheetDateColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.TimesheetDateColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TimesheetID
            {
                get
                {
                    return (int) base[this.tableTimesheetMaster.TimesheetIDColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.TimesheetIDColumn] = value;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Unbilled
            {
                get
                {
                    return (bool) base[this.tableTimesheetMaster.UnbilledColumn];
                }
                set
                {
                    base[this.tableTimesheetMaster.UnbilledColumn] = value;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TimesheetMasterRowChangeEvent : EventArgs
        {
            private DataRowAction eventAction;
            private CloudAccountDA.TimesheetMasterRow eventRow;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
            public TimesheetMasterRowChangeEvent(CloudAccountDA.TimesheetMasterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
            
            [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CloudAccountDA.TimesheetMasterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TimesheetMasterRowChangeEventHandler(object sender, CloudAccountDA.TimesheetMasterRowChangeEvent e);
    }
}
