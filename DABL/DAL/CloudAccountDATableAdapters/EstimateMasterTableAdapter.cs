// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.DAL.CloudAccountDATableAdapters
{
    using DABL.DAL;
    using DABL.Properties;
    using System;
    using System.CodeDom.Compiler;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Diagnostics;
    
    [DesignerCategory("code"), Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), DataObject(true), ToolboxItem(true), HelpKeyword("vs.data.TableAdapter")]
    public class EstimateMasterTableAdapter : Component
    {
        private SqlDataAdapter _adapter;
        private bool _clearBeforeFill;
        private SqlCommand[] _commandCollection;
        private SqlConnection _connection;
        private SqlTransaction _transaction;
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EstimateMasterTableAdapter()
        {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Delete, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Delete(int? EstimateID)
        {
            int num2;
            if (EstimateID.HasValue)
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = EstimateID.Value;
            }
            else
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.DeleteCommand.Connection.State;
            if ((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.DeleteCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable DeleteByClientID(int? ClientID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if (ClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable DeleteByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(CloudAccountDA.EstimateMasterDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if (this.ClearBeforeFill)
            {
                dataTable.Clear();
            }
            return this.Adapter.Fill(dataTable);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode]
        public virtual CloudAccountDA.EstimateMasterDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByClientID(int? ClientID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if (ClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByCompanyEstimateNumber(int? CompanyID, string EstimateNumber)
        {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (EstimateNumber == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = EstimateNumber;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByCompanyEstimateNumberUpdate(int? CompanyID, string EstimateNumber, int? EstimateID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (EstimateNumber == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = EstimateNumber;
            }
            if (EstimateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = EstimateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByCompanyIDAndStatus(int? CompanyID, bool? Active, bool? Archived, bool? Deleted)
        {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByCompanyStaffIDAndStatus(int? CompanyID, int? StaffID, bool? Active, bool? Archived, bool? Deleted)
        {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (StaffID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = StaffID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByEstimateID(int? EstimateID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if (EstimateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = EstimateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByEstimateSearch(int? CompanyID, bool? Active, bool? Archived, bool? Deleted, string EstimateNumber, string PONumber, string Notes, string Status, string ClientName, string ItemName, string ItemDesc, DateTime? FromDate, DateTime? ToDate, decimal? EstimateTotalFrom, decimal? EstimateTotalTo, int? Currency)
        {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (EstimateNumber == null)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = EstimateNumber;
            }
            if (PONumber == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = PONumber;
            }
            if (Notes == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = Notes;
            }
            if (Status == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = Status;
            }
            if (ClientName == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = ClientName;
            }
            if (ItemName == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = ItemName;
            }
            if (ItemDesc == null)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = ItemDesc;
            }
            if (FromDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = FromDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            if (ToDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = ToDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            if (EstimateTotalFrom.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = EstimateTotalFrom.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            if (EstimateTotalTo.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[15].Value = EstimateTotalTo.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[15].Value = DBNull.Value;
            }
            if (Currency.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = Currency.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByEstimateSearchForStaff(int? CompanyID, int? StaffID, bool? Active, bool? Archived, bool? Deleted, string EstimateNumber, string PONumber, string Notes, string Status, string ClientName, string ItemName, string ItemDesc, DateTime? FromDate, DateTime? ToDate, decimal? EstimateTotalFrom, decimal? EstimateTotalTo, int? Currency)
        {
            this.Adapter.SelectCommand = this.CommandCollection[11];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (StaffID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = StaffID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            if (EstimateNumber == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = EstimateNumber;
            }
            if (PONumber == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = PONumber;
            }
            if (Notes == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = Notes;
            }
            if (Status == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = Status;
            }
            if (ClientName == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = ClientName;
            }
            if (ItemName == null)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = ItemName;
            }
            if (ItemDesc == null)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = ItemDesc;
            }
            if (FromDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = FromDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            if (ToDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = ToDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            if (EstimateTotalFrom.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[15].Value = EstimateTotalFrom.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[15].Value = DBNull.Value;
            }
            if (EstimateTotalTo.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = EstimateTotalTo.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = DBNull.Value;
            }
            if (Currency.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[0x11].Value = Currency.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x11].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable GetDataByReceivedEstimate(string Email, bool? ReceivedActive, bool? ReceivedArchived, bool? ReceivedDeleted, string Status, DateTime? FromDate, DateTime? ToDate, decimal? EstimateTotalFrom, decimal? EstimateTotalTo, string ClientName)
        {
            this.Adapter.SelectCommand = this.CommandCollection[12];
            if (Email == null)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = Email;
            }
            if (ReceivedActive.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = ReceivedActive.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (ReceivedArchived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = ReceivedArchived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (ReceivedDeleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = ReceivedDeleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Status == null)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = Status;
            }
            if (FromDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = FromDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            if (ToDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = ToDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            if (EstimateTotalFrom.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = EstimateTotalFrom.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            if (EstimateTotalTo.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = EstimateTotalTo.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            if (ClientName == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = ClientName;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new SqlDataAdapter();
            DataTableMapping mapping = new DataTableMapping {
                SourceTable = "Table",
                DataSetTable = "EstimateMaster"
            };
            mapping.ColumnMappings.Add("EstimateID", "EstimateID");
            mapping.ColumnMappings.Add("CompanyID", "CompanyID");
            mapping.ColumnMappings.Add("ClientID", "ClientID");
            mapping.ColumnMappings.Add("CurrencyID", "CurrencyID");
            mapping.ColumnMappings.Add("EstimateNumber", "EstimateNumber");
            mapping.ColumnMappings.Add("EstimateDate", "EstimateDate");
            mapping.ColumnMappings.Add("PONumber", "PONumber");
            mapping.ColumnMappings.Add("Discount", "Discount");
            mapping.ColumnMappings.Add("DiscountAmount", "DiscountAmount");
            mapping.ColumnMappings.Add("Notes", "Notes");
            mapping.ColumnMappings.Add("Terms", "Terms");
            mapping.ColumnMappings.Add("EstimateStatus", "EstimateStatus");
            mapping.ColumnMappings.Add("EstimateTotal", "EstimateTotal");
            mapping.ColumnMappings.Add("PaidToDate", "PaidToDate");
            mapping.ColumnMappings.Add("Active", "Active");
            mapping.ColumnMappings.Add("Archived", "Archived");
            mapping.ColumnMappings.Add("Deleted", "Deleted");
            mapping.ColumnMappings.Add("ReceivedActive", "ReceivedActive");
            mapping.ColumnMappings.Add("ReceivedArchived", "ReceivedArchived");
            mapping.ColumnMappings.Add("ReceivedDeleted", "ReceivedDeleted");
            this._adapter.TableMappings.Add(mapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.PR_EstimateMaster_Delete";
            this._adapter.DeleteCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "EstimateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.PR_EstimateMaster_Insert";
            this._adapter.InsertCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.InputOutput, 10, 0, "EstimateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@EstimateNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "EstimateNumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@EstimateDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "EstimateDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "PONumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Decimal, 5, ParameterDirection.Input, 4, 2, "Discount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@DiscountAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "DiscountAmount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Notes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Terms", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Terms", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@EstimateStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "EstimateStatus", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@EstimateTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "EstimateTotal", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PaidToDate", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "PaidToDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ReceivedActive", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ReceivedActive", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ReceivedArchived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ReceivedArchived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ReceivedDeleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ReceivedDeleted", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.PR_EstimateMaster_Update";
            this._adapter.UpdateCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "EstimateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@EstimateNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "EstimateNumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@EstimateDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "EstimateDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "PONumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Decimal, 5, ParameterDirection.Input, 4, 2, "Discount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@DiscountAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "DiscountAmount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Notes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Terms", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Terms", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@EstimateStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "EstimateStatus", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@EstimateTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "EstimateTotal", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PaidToDate", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "PaidToDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ReceivedActive", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ReceivedActive", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ReceivedArchived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ReceivedArchived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ReceivedDeleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ReceivedDeleted", DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitCommandCollection()
        {
            this._commandCollection = new SqlCommand[0x10];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PR_EstimateMaster_SelectAll";
            this._commandCollection[0].CommandType = CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.PR_EstimateMaster_DeleteByClientID";
            this._commandCollection[1].CommandType = CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.PR_EstimateMaster_DeleteByCompanyID";
            this._commandCollection[2].CommandType = CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.PR_EstimateMaster_SelectByClientID";
            this._commandCollection[3].CommandType = CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.PR_EstimateMaster_SelectByCompanyEstimateNumber";
            this._commandCollection[4].CommandType = CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new SqlParameter("@EstimateNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.PR_EstimateMaster_SelectByCompanyEstimateNumberUpdate";
            this._commandCollection[5].CommandType = CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@EstimateNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.PR_EstimateMaster_SelectByCompanyID";
            this._commandCollection[6].CommandType = CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.PR_EstimateMaster_SelectByCompanyIDAndStatus";
            this._commandCollection[7].CommandType = CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "dbo.PR_EstimateMaster_SelectByCompanyStaffIDAndStatus";
            this._commandCollection[8].CommandType = CommandType.StoredProcedure;
            this._commandCollection[8].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@StaffID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "dbo.PR_EstimateMaster_SelectByEstimateID";
            this._commandCollection[9].CommandType = CommandType.StoredProcedure;
            this._commandCollection[9].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "dbo.PR_EstimateMaster_SelectByEstimateSearch";
            this._commandCollection[10].CommandType = CommandType.StoredProcedure;
            this._commandCollection[10].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@EstimateNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Status", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@ClientName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@ItemName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@ItemDesc", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@FromDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@ToDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@EstimateTotalFrom", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@EstimateTotalTo", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Currency", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11] = new SqlCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = "dbo.PR_EstimateMaster_SelectByEstimateSearchForStaff";
            this._commandCollection[11].CommandType = CommandType.StoredProcedure;
            this._commandCollection[11].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@StaffID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@EstimateNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@Status", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@ClientName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@ItemName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@ItemDesc", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@FromDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@ToDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@EstimateTotalFrom", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@EstimateTotalTo", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11].Parameters.Add(new SqlParameter("@Currency", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12] = new SqlCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = "dbo.PR_EstimateMaster_ReceivedEstimates";
            this._commandCollection[12].CommandType = CommandType.StoredProcedure;
            this._commandCollection[12].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@ReceivedActive", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@ReceivedArchived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@ReceivedDeleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@Status", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@FromDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@ToDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@EstimateTotalFrom", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@EstimateTotalTo", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new SqlParameter("@ClientName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13] = new SqlCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = "UPDATE EstimateMaster SET EstimateStatus = @EstimateStatus WHERE EstimateID = @EstimateID";
            this._commandCollection[13].CommandType = CommandType.Text;
            this._commandCollection[13].Parameters.Add(new SqlParameter("@EstimateStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "EstimateStatus", DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "EstimateID", DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[14] = new SqlCommand();
            this._commandCollection[14].Connection = this.Connection;
            this._commandCollection[14].CommandText = "dbo.PR_EstimateMaster_UpdateWhenAnyBit";
            this._commandCollection[14].CommandType = CommandType.StoredProcedure;
            this._commandCollection[14].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14].Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[15] = new SqlCommand();
            this._commandCollection[15].Connection = this.Connection;
            this._commandCollection[15].CommandText = "dbo.PR_EstimateMaster_UpdateWhenAnyReceivedBit";
            this._commandCollection[15].CommandType = CommandType.StoredProcedure;
            this._commandCollection[15].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[15].Parameters.Add(new SqlParameter("@EstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[15].Parameters.Add(new SqlParameter("@ReceivedActive", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[15].Parameters.Add(new SqlParameter("@ReceivedDeleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[15].Parameters.Add(new SqlParameter("@ReceivedArchived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = Settings.Default.IITS_CloudAccountingConnectionString;
        }
        
        [DataObjectMethod(DataObjectMethodType.Insert, true), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Insert(ref int? EstimateID, int? CompanyID, int? ClientID, int? CurrencyID, string EstimateNumber, DateTime? EstimateDate, string PONumber, decimal? Discount, decimal? DiscountAmount, string Notes, string Terms, string EstimateStatus, decimal? EstimateTotal, decimal? PaidToDate, bool? Active, bool? Archived, bool? Deleted, bool? ReceivedActive, bool? ReceivedArchived, bool? ReceivedDeleted)
        {
            int num2;
            if (EstimateID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[1].Value = EstimateID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            if (ClientID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[4].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            if (EstimateNumber == null)
            {
                this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = EstimateNumber;
            }
            if (EstimateDate.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[6].Value = EstimateDate.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
            }
            if (PONumber == null)
            {
                this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = PONumber;
            }
            if (Discount.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[8].Value = Discount.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
            }
            if (DiscountAmount.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[9].Value = DiscountAmount.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
            }
            if (Notes == null)
            {
                this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = Notes;
            }
            if (Terms == null)
            {
                this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = Terms;
            }
            if (EstimateStatus == null)
            {
                this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = EstimateStatus;
            }
            if (EstimateTotal.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[13].Value = EstimateTotal.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
            }
            if (PaidToDate.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[14].Value = PaidToDate.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[15].Value = Active.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = Archived.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (ReceivedActive.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = ReceivedActive.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (ReceivedArchived.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = ReceivedArchived.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = DBNull.Value;
            }
            if (ReceivedDeleted.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[20].Value = ReceivedDeleted.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[20].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.InsertCommand.Connection.State;
            if ((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int num = this.Adapter.InsertCommand.ExecuteNonQuery();
                if ((this.Adapter.InsertCommand.Parameters[1].Value == null) || (this.Adapter.InsertCommand.Parameters[1].Value.GetType() == typeof(DBNull)))
                {
                    EstimateID = 0;
                }
                else
                {
                    EstimateID = new int?((int) this.Adapter.InsertCommand.Parameters[1].Value);
                }
                num2 = num;
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA dataSet)
        {
            return this.Adapter.Update(dataSet, "EstimateMaster");
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(CloudAccountDA.EstimateMasterDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow dataRow)
        {
            return this.Adapter.Update(new DataRow[] { dataRow });
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(int? EstimateID, int? CompanyID, int? ClientID, int? CurrencyID, string EstimateNumber, DateTime? EstimateDate, string PONumber, decimal? Discount, decimal? DiscountAmount, string Notes, string Terms, string EstimateStatus, decimal? EstimateTotal, decimal? PaidToDate, bool? Active, bool? Archived, bool? Deleted, bool? ReceivedActive, bool? ReceivedArchived, bool? ReceivedDeleted)
        {
            int num2;
            if (EstimateID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = EstimateID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            if (ClientID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            if (EstimateNumber == null)
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = EstimateNumber;
            }
            if (EstimateDate.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = EstimateDate.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
            }
            if (PONumber == null)
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = PONumber;
            }
            if (Discount.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = Discount.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
            }
            if (DiscountAmount.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = DiscountAmount.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            if (Notes == null)
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = Notes;
            }
            if (Terms == null)
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = Terms;
            }
            if (EstimateStatus == null)
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = EstimateStatus;
            }
            if (EstimateTotal.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = EstimateTotal.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
            }
            if (PaidToDate.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = PaidToDate.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = Active.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = Archived.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (ReceivedActive.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = ReceivedActive.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (ReceivedArchived.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = ReceivedArchived.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = DBNull.Value;
            }
            if (ReceivedDeleted.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = ReceivedDeleted.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.UpdateCommand.Connection.State;
            if ((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.UpdateCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int UpdateStatus(string EstimateStatus, int EstimateID)
        {
            int num;
            SqlCommand command = this.CommandCollection[13];
            if (EstimateStatus == null)
            {
                command.Parameters[0].Value = DBNull.Value;
            }
            else
            {
                command.Parameters[0].Value = EstimateStatus;
            }
            command.Parameters[1].Value = EstimateID;
            ConnectionState state = command.Connection.State;
            if ((command.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                command.Connection.Open();
            }
            try
            {
                num = command.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    command.Connection.Close();
                }
            }
            return num;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.EstimateMasterDataTable UpdateWhenAnyBit(int? EstimateID, bool? Active, bool? Deleted, bool? Archived)
        {
            this.Adapter.SelectCommand = this.CommandCollection[14];
            if (EstimateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = EstimateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.EstimateMasterDataTable UpdateWhenAnyReceivedBit(int? EstimateID, bool? ReceivedActive, bool? ReceivedDeleted, bool? ReceivedArchived)
        {
            this.Adapter.SelectCommand = this.CommandCollection[15];
            if (EstimateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = EstimateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (ReceivedActive.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = ReceivedActive.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (ReceivedDeleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = ReceivedDeleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (ReceivedArchived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = ReceivedArchived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.EstimateMasterDataTable dataTable = new CloudAccountDA.EstimateMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected internal SqlDataAdapter Adapter
        {
            get
            {
                if (this._adapter == null)
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected SqlCommand[] CommandCollection
        {
            get
            {
                if (this._commandCollection == null)
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlConnection Connection
        {
            get
            {
                if (this._connection == null)
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if (this.Adapter.InsertCommand != null)
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if (this.Adapter.DeleteCommand != null)
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if (this.Adapter.UpdateCommand != null)
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    if (this.CommandCollection[i] != null)
                    {
                        this.CommandCollection[i].Connection = value;
                    }
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
    }
}
