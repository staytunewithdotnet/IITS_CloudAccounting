// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.DAL.CloudAccountDATableAdapters
{
    using DABL.DAL;
    using DABL.Properties;
    using System;
    using System.CodeDom.Compiler;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Diagnostics;

    [DesignerCategory("code"), ToolboxItem(true), DataObject(true), HelpKeyword("vs.data.TableAdapter"), Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public class CompanyMasterTableAdapter : Component
    {
        private SqlDataAdapter _adapter;
        private bool _clearBeforeFill;
        private SqlCommand[] _commandCollection;
        private SqlConnection _connection;
        private SqlTransaction _transaction;

        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CompanyMasterTableAdapter()
        {
            this.ClearBeforeFill = true;
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Delete, true), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Delete(int? CompanyID)
        {
            int num2;
            if (CompanyID.HasValue)
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.DeleteCommand.Connection.State;
            if ((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.DeleteCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
            return num2;
        }

        [DataObjectMethod(DataObjectMethodType.Fill, true), HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public virtual int Fill(CloudAccountDA.CompanyMasterDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if (this.ClearBeforeFill)
            {
                dataTable.Clear();
            }
            return this.Adapter.Fill(dataTable);
        }

        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.CompanyMasterDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.CompanyMasterDataTable GetDataByActiveCompany()
        {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable GetDataByCompanyEmail(string CompanyEmail)
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if (CompanyEmail == null)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyEmail;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable GetDataByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable GetDataByCompanyName(string CompanyName)
        {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if (CompanyName == null)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyName;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable GetDataByCompanyUserName(string CompanyUserName)
        {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if (CompanyUserName == null)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyUserName;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.CompanyMasterDataTable GetDataBydeactiveCompany()
        {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new SqlDataAdapter();
            DataTableMapping mapping = new DataTableMapping
            {
                SourceTable = "Table",
                DataSetTable = "CompanyMaster"
            };
            mapping.ColumnMappings.Add("CompanyID", "CompanyID");
            mapping.ColumnMappings.Add("CompanyUserName", "CompanyUserName");
            mapping.ColumnMappings.Add("CompanyName", "CompanyName");
            mapping.ColumnMappings.Add("CompanyContactPerson", "CompanyContactPerson");
            mapping.ColumnMappings.Add("CompanyContactPersonNumber", "CompanyContactPersonNumber");
            mapping.ColumnMappings.Add("BillingRate", "BillingRate");
            mapping.ColumnMappings.Add("BussinessID", "BussinessID");
            mapping.ColumnMappings.Add("IndustryID", "IndustryID");
            mapping.ColumnMappings.Add("CurrentAccountID", "CurrentAccountID");
            mapping.ColumnMappings.Add("RunningID", "RunningID");
            mapping.ColumnMappings.Add("CurrencyID", "CurrencyID");
            mapping.ColumnMappings.Add("CompanyPhone", "CompanyPhone");
            mapping.ColumnMappings.Add("CompanyFax", "CompanyFax");
            mapping.ColumnMappings.Add("CompanyEmail", "CompanyEmail");
            mapping.ColumnMappings.Add("CompanyAddressStreet1", "CompanyAddressStreet1");
            mapping.ColumnMappings.Add("CompanyAddressStreet2", "CompanyAddressStreet2");
            mapping.ColumnMappings.Add("CompanyCountryID", "CompanyCountryID");
            mapping.ColumnMappings.Add("CompanyStateID", "CompanyStateID");
            mapping.ColumnMappings.Add("CompanyCityID", "CompanyCityID");
            mapping.ColumnMappings.Add("CompanyZipCode", "CompanyZipCode");
            mapping.ColumnMappings.Add("CompanyLogoContentType", "CompanyLogoContentType");
            mapping.ColumnMappings.Add("CompanyLogo", "CompanyLogo");
            mapping.ColumnMappings.Add("CompanyNotes", "CompanyNotes");
            mapping.ColumnMappings.Add("TimeZone", "TimeZone");
            mapping.ColumnMappings.Add("ObserveDaylight", "ObserveDaylight");
            mapping.ColumnMappings.Add("AccountURL", "AccountURL");
            this._adapter.TableMappings.Add(mapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.PR_CompanyMaster_Delete";
            this._adapter.DeleteCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.PR_CompanyMaster_Insert";
            this._adapter.InsertCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.InputOutput, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyUserName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyUserName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyName", SqlDbType.NVarChar, 300, ParameterDirection.Input, 0, 0, "CompanyName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyContactPerson", SqlDbType.NVarChar, 100, ParameterDirection.Input, 0, 0, "CompanyContactPerson", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyContactPersonNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyContactPersonNumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@BillingRate", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "BillingRate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@BussinessID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "BussinessID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@IndustryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "IndustryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CurrentAccountID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrentAccountID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RunningID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "RunningID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyPhone", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyPhone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyFax", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyFax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyEmail", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyAddressStreet1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyAddressStreet1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyAddressStreet2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyAddressStreet2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyCountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyCountryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyStateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyStateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyCityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyCityID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyZipCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyZipCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyLogoContentType", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyLogoContentType", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyLogo", SqlDbType.VarBinary, 0x7fffffff, ParameterDirection.Input, 0, 0, "CompanyLogo", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyNotes", SqlDbType.NVarChar, 100, ParameterDirection.Input, 0, 0, "CompanyNotes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@TimeZone", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, "TimeZone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ObserveDaylight", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ObserveDaylight", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@AccountURL", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, "AccountURL", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.PR_CompanyMaster_Update";
            this._adapter.UpdateCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyUserName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyUserName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyName", SqlDbType.NVarChar, 300, ParameterDirection.Input, 0, 0, "CompanyName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyContactPerson", SqlDbType.NVarChar, 100, ParameterDirection.Input, 0, 0, "CompanyContactPerson", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyContactPersonNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyContactPersonNumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@BillingRate", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "BillingRate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@BussinessID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "BussinessID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@IndustryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "IndustryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CurrentAccountID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrentAccountID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RunningID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "RunningID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyPhone", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyPhone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyFax", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyFax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyEmail", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyAddressStreet1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyAddressStreet1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyAddressStreet2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyAddressStreet2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyCountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyCountryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyStateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyStateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyCityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyCityID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyZipCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyZipCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyLogoContentType", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanyLogoContentType", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyLogo", SqlDbType.VarBinary, 0x7fffffff, ParameterDirection.Input, 0, 0, "CompanyLogo", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyNotes", SqlDbType.NVarChar, 100, ParameterDirection.Input, 0, 0, "CompanyNotes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@TimeZone", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, "TimeZone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ObserveDaylight", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ObserveDaylight", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@AccountURL", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, "AccountURL", DataRowVersion.Current, false, null, "", "", ""));
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitCommandCollection()
        {
            this._commandCollection = new SqlCommand[11];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PR_CompanyMaster_SelectAll";
            this._commandCollection[0].CommandType = CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.PR_CompanyMaster_SelectAllActiveCompany";
            this._commandCollection[1].CommandType = CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.PR_CompanyMaster_SelectByCompanyEmail";
            this._commandCollection[2].CommandType = CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new SqlParameter("@CompanyEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.PR_CompanyMaster_SelectByCompanyID";
            this._commandCollection[3].CommandType = CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.PR_CompanyMaster_SelectByCompanyName";
            this._commandCollection[4].CommandType = CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new SqlParameter("@CompanyName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.PR_CompanyMaster_SelectByCompanyUserName";
            this._commandCollection[5].CommandType = CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@CompanyUserName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.PR_CompanyMaster_SelectAllDeactiveCompany";
            this._commandCollection[6].CommandType = CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.PR_CompanyMaster_UpdateAdminProfile";
            this._commandCollection[7].CommandType = CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@CompanyUserName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@CompanyContactPerson", SqlDbType.NVarChar, 100, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@CompanyContactPersonNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@BillingRate", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@CompanyEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "dbo.PR_CompanyMaster_UpdateCompanyDetails";
            this._commandCollection[8].CommandType = CommandType.StoredProcedure;
            this._commandCollection[8].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyName", SqlDbType.NVarChar, 300, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@BussinessID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@IndustryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyPhone", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyFax", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyEmail", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyAddressStreet1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyAddressStreet2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyCountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyStateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyCityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyZipCode", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyNotes", SqlDbType.NVarChar, 100, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@TimeZone", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@ObserveDaylight", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@AccountURL", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "dbo.PR_CompanyMaster_UpdateOnlyLogo";
            this._commandCollection[9].CommandType = CommandType.StoredProcedure;
            this._commandCollection[9].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@CompanyLogoContentType", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@CompanyLogo", SqlDbType.VarBinary, 0x7fffffff, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "dbo.PR_CompanyMaster_UpdateSignUpIDs";
            this._commandCollection[10].CommandType = CommandType.StoredProcedure;
            this._commandCollection[10].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@BussinessID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@IndustryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@CurrentAccountID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@RunningID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitConnection()
        {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = Settings.Default.IITS_CloudAccountingConnectionString;
        }

        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Insert, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Insert(ref int? CompanyID, string CompanyUserName, string CompanyName, string CompanyContactPerson, string CompanyContactPersonNumber, decimal? BillingRate, int? BussinessID, int? IndustryID, int? CurrentAccountID, int? RunningID, int? CurrencyID, string CompanyPhone, string CompanyFax, string CompanyEmail, string CompanyAddressStreet1, string CompanyAddressStreet2, int? CompanyCountryID, int? CompanyStateID, int? CompanyCityID, string CompanyZipCode, string CompanyLogoContentType, byte[] CompanyLogo, string CompanyNotes, string TimeZone, bool? ObserveDaylight, string AccountURL)
        {
            int num2;
            if (CompanyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyUserName == null)
            {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = CompanyUserName;
            }
            if (CompanyName == null)
            {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = CompanyName;
            }
            if (CompanyContactPerson == null)
            {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = CompanyContactPerson;
            }
            if (CompanyContactPersonNumber == null)
            {
                this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = CompanyContactPersonNumber;
            }
            if (BillingRate.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[6].Value = BillingRate.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
            }
            if (BussinessID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[7].Value = BussinessID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
            }
            if (IndustryID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[8].Value = IndustryID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
            }
            if (CurrentAccountID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[9].Value = CurrentAccountID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
            }
            if (RunningID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[10].Value = RunningID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[11].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
            }
            if (CompanyPhone == null)
            {
                this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = CompanyPhone;
            }
            if (CompanyFax == null)
            {
                this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = CompanyFax;
            }
            if (CompanyEmail == null)
            {
                this.Adapter.InsertCommand.Parameters[14].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = CompanyEmail;
            }
            if (CompanyAddressStreet1 == null)
            {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = CompanyAddressStreet1;
            }
            if (CompanyAddressStreet2 == null)
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = CompanyAddressStreet2;
            }
            if (CompanyCountryID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = CompanyCountryID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (CompanyStateID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = CompanyStateID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (CompanyCityID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = CompanyCityID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = DBNull.Value;
            }
            if (CompanyZipCode == null)
            {
                this.Adapter.InsertCommand.Parameters[20].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[20].Value = CompanyZipCode;
            }
            if (CompanyLogoContentType == null)
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = CompanyLogoContentType;
            }
            if (CompanyLogo == null)
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = CompanyLogo;
            }
            if (CompanyNotes == null)
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = CompanyNotes;
            }
            if (TimeZone == null)
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = TimeZone;
            }
            if (ObserveDaylight.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x19].Value = ObserveDaylight.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x19].Value = DBNull.Value;
            }
            if (AccountURL == null)
            {
                this.Adapter.InsertCommand.Parameters[0x1a].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x1a].Value = AccountURL;
            }
            ConnectionState state = this.Adapter.InsertCommand.Connection.State;
            if ((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int num = this.Adapter.InsertCommand.ExecuteNonQuery();
                if ((this.Adapter.InsertCommand.Parameters[1].Value == null) || (this.Adapter.InsertCommand.Parameters[1].Value.GetType() == typeof(DBNull)))
                {
                    CompanyID = 0;
                }
                else
                {
                    CompanyID = new int?((int)this.Adapter.InsertCommand.Parameters[1].Value);
                }
                num2 = num;
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
            return num2;
        }

        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA dataSet)
        {
            return this.Adapter.Update(dataSet, "CompanyMaster");
        }

        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA.CompanyMasterDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }

        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow dataRow)
        {
            return this.Adapter.Update(new DataRow[] { dataRow });
        }

        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }

        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Update, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(int? CompanyID, string CompanyUserName, string CompanyName, string CompanyContactPerson, string CompanyContactPersonNumber, decimal? BillingRate, int? BussinessID, int? IndustryID, int? CurrentAccountID, int? RunningID, int? CurrencyID, string CompanyPhone, string CompanyFax, string CompanyEmail, string CompanyAddressStreet1, string CompanyAddressStreet2, int? CompanyCountryID, int? CompanyStateID, int? CompanyCityID, string CompanyZipCode, string CompanyLogoContentType, byte[] CompanyLogo, string CompanyNotes, string TimeZone, bool? ObserveDaylight, string AccountURL)
        {
            int num2;
            if (CompanyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyUserName == null)
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = CompanyUserName;
            }
            if (CompanyName == null)
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = CompanyName;
            }
            if (CompanyContactPerson == null)
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = CompanyContactPerson;
            }
            if (CompanyContactPersonNumber == null)
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = CompanyContactPersonNumber;
            }
            if (BillingRate.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = BillingRate.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
            }
            if (BussinessID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = BussinessID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
            }
            if (IndustryID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = IndustryID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
            }
            if (CurrentAccountID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = CurrentAccountID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            if (RunningID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = RunningID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
            }
            if (CompanyPhone == null)
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = CompanyPhone;
            }
            if (CompanyFax == null)
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = CompanyFax;
            }
            if (CompanyEmail == null)
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = CompanyEmail;
            }
            if (CompanyAddressStreet1 == null)
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = CompanyAddressStreet1;
            }
            if (CompanyAddressStreet2 == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = CompanyAddressStreet2;
            }
            if (CompanyCountryID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = CompanyCountryID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (CompanyStateID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = CompanyStateID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (CompanyCityID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = CompanyCityID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = DBNull.Value;
            }
            if (CompanyZipCode == null)
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = CompanyZipCode;
            }
            if (CompanyLogoContentType == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = CompanyLogoContentType;
            }
            if (CompanyLogo == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = CompanyLogo;
            }
            if (CompanyNotes == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = CompanyNotes;
            }
            if (TimeZone == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = TimeZone;
            }
            if (ObserveDaylight.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x19].Value = ObserveDaylight.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x19].Value = DBNull.Value;
            }
            if (AccountURL == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x1a].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x1a].Value = AccountURL;
            }
            ConnectionState state = this.Adapter.UpdateCommand.Connection.State;
            if ((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.UpdateCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
            return num2;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable UpdateAdminProfile(int? CompanyID, string CompanyUserName, string CompanyContactPerson, string CompanyContactPersonNumber, decimal? BillingRate, string CompanyEmail)
        {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyUserName == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = CompanyUserName;
            }
            if (CompanyContactPerson == null)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = CompanyContactPerson;
            }
            if (CompanyContactPersonNumber == null)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = CompanyContactPersonNumber;
            }
            if (BillingRate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = BillingRate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            if (CompanyEmail == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = CompanyEmail;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable UpdateCompanyDetails(int? CompanyID, string CompanyName, int? BussinessID, int? IndustryID, int? CurrencyID, string CompanyPhone, string CompanyFax, string CompanyEmail, string CompanyAddressStreet1, string CompanyAddressStreet2, int? CompanyCountryID, int? CompanyStateID, int? CompanyCityID, string CompanyZipCode, string CompanyNotes, string TimeZone, bool? ObserveDaylight, string AccountURL)
        {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyName == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = CompanyName;
            }
            if (BussinessID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = BussinessID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (IndustryID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = IndustryID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            if (CompanyPhone == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = CompanyPhone;
            }
            if (CompanyFax == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = CompanyFax;
            }
            if (CompanyEmail == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = CompanyEmail;
            }
            if (CompanyAddressStreet1 == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = CompanyAddressStreet1;
            }
            if (CompanyAddressStreet2 == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = CompanyAddressStreet2;
            }
            if (CompanyCountryID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = CompanyCountryID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            if (CompanyStateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = CompanyStateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            if (CompanyCityID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = CompanyCityID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            if (CompanyZipCode == null)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = CompanyZipCode;
            }
            if (CompanyNotes == null)
            {
                this.Adapter.SelectCommand.Parameters[15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[15].Value = CompanyNotes;
            }
            if (TimeZone == null)
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = TimeZone;
            }
            if (ObserveDaylight.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[0x11].Value = ObserveDaylight.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (AccountURL == null)
            {
                this.Adapter.SelectCommand.Parameters[0x12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x12].Value = AccountURL;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable UpdateOnlyLogo(int? CompanyID, string CompanyLogoContentType, byte[] CompanyLogo)
        {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyLogoContentType == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = CompanyLogoContentType;
            }
            if (CompanyLogo == null)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = CompanyLogo;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyMasterDataTable UpdateSignUpIDs(int? CompanyID, int? BussinessID, int? IndustryID, int? CurrentAccountID, int? RunningID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (BussinessID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = BussinessID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (IndustryID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = IndustryID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (CurrentAccountID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = CurrentAccountID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (RunningID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = RunningID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            CloudAccountDA.CompanyMasterDataTable dataTable = new CloudAccountDA.CompanyMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal SqlDataAdapter Adapter
        {
            get
            {
                if (this._adapter == null)
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected SqlCommand[] CommandCollection
        {
            get
            {
                if (this._commandCollection == null)
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlConnection Connection
        {
            get
            {
                if (this._connection == null)
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if (this.Adapter.InsertCommand != null)
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if (this.Adapter.DeleteCommand != null)
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if (this.Adapter.UpdateCommand != null)
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    if (this.CommandCollection[i] != null)
                    {
                        this.CommandCollection[i].Connection = value;
                    }
                }
            }
        }

        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
    }
}
