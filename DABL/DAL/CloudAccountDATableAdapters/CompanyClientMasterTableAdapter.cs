// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.DAL.CloudAccountDATableAdapters
{
    using DABL.DAL;
    using DABL.Properties;
    using System;
    using System.CodeDom.Compiler;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Diagnostics;
    
    [DataObject(true), Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), HelpKeyword("vs.data.TableAdapter"), DesignerCategory("code"), ToolboxItem(true)]
    public class CompanyClientMasterTableAdapter : Component
    {
        private SqlDataAdapter _adapter;
        private bool _clearBeforeFill;
        private SqlCommand[] _commandCollection;
        private SqlConnection _connection;
        private SqlTransaction _transaction;
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public CompanyClientMasterTableAdapter()
        {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Delete, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Delete(int? CompanyClientID)
        {
            int num2;
            if (CompanyClientID.HasValue)
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = CompanyClientID.Value;
            }
            else
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.DeleteCommand.Connection.State;
            if ((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.DeleteCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.CompanyClientMasterDataTable DeleteByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Fill, true), DebuggerNonUserCode]
        public virtual int Fill(CloudAccountDA.CompanyClientMasterDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if (this.ClearBeforeFill)
            {
                dataTable.Clear();
            }
            return this.Adapter.Fill(dataTable);
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.CompanyClientMasterDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyClientMasterDataTable GetDataByCompanyClientID(int? CompanyClientID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if (CompanyClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode]
        public virtual CloudAccountDA.CompanyClientMasterDataTable GetDataByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public virtual CloudAccountDA.CompanyClientMasterDataTable GetDataByCompanyIDAndEmail(int? CompanyID, string Email)
        {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Email == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Email;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.CompanyClientMasterDataTable GetDataByCompanyIDAndStatus(int? CompanyID, bool? Active, bool? Archived, bool? Deleted, string Organization, string FirstName, string LastName, string Address, string Email, string Phone, string InternalNotes)
        {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Organization == null)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = Organization;
            }
            if (FirstName == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = FirstName;
            }
            if (LastName == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = LastName;
            }
            if (Address == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = Address;
            }
            if (Email == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = Email;
            }
            if (Phone == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = Phone;
            }
            if (InternalNotes == null)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = InternalNotes;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.CompanyClientMasterDataTable GetDataByCompanyStaffIDAndStatus(int? CompanyID, int? StaffID, bool? Active, bool? Archived, bool? Deleted, string Organization, string FirstName, string LastName, string Address, string Email, string Phone, string InternalNotes)
        {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (StaffID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = StaffID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            if (Organization == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = Organization;
            }
            if (FirstName == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = FirstName;
            }
            if (LastName == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = LastName;
            }
            if (Address == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = Address;
            }
            if (Email == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = Email;
            }
            if (Phone == null)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = Phone;
            }
            if (InternalNotes == null)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = InternalNotes;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode]
        public virtual CloudAccountDA.CompanyClientMasterDataTable GetDataByUsername(string Username)
        {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if (Username == null)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = Username;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitAdapter()
        {
            this._adapter = new SqlDataAdapter();
            DataTableMapping mapping = new DataTableMapping {
                SourceTable = "Table",
                DataSetTable = "CompanyClientMaster"
            };
            mapping.ColumnMappings.Add("CompanyClientID", "CompanyClientID");
            mapping.ColumnMappings.Add("OrganizationName", "OrganizationName");
            mapping.ColumnMappings.Add("CompanyID", "CompanyID");
            mapping.ColumnMappings.Add("CurrencyID", "CurrencyID");
            mapping.ColumnMappings.Add("InvoiceByEmail", "InvoiceByEmail");
            mapping.ColumnMappings.Add("InvoiceBySnailMail", "InvoiceBySnailMail");
            mapping.ColumnMappings.Add("Email", "Email");
            mapping.ColumnMappings.Add("FirstName", "FirstName");
            mapping.ColumnMappings.Add("LastName", "LastName");
            mapping.ColumnMappings.Add("HomePhone", "HomePhone");
            mapping.ColumnMappings.Add("Mobile", "Mobile");
            mapping.ColumnMappings.Add("LoginCredentials", "LoginCredentials");
            mapping.ColumnMappings.Add("UserName", "UserName");
            mapping.ColumnMappings.Add("Address1", "Address1");
            mapping.ColumnMappings.Add("Address2", "Address2");
            mapping.ColumnMappings.Add("CountryID", "CountryID");
            mapping.ColumnMappings.Add("StateID", "StateID");
            mapping.ColumnMappings.Add("CityID", "CityID");
            mapping.ColumnMappings.Add("ZipCode", "ZipCode");
            mapping.ColumnMappings.Add("SecondaryAddress1", "SecondaryAddress1");
            mapping.ColumnMappings.Add("SecondaryAddress2", "SecondaryAddress2");
            mapping.ColumnMappings.Add("SecondaryCountryID", "SecondaryCountryID");
            mapping.ColumnMappings.Add("SecondaryStateID", "SecondaryStateID");
            mapping.ColumnMappings.Add("SecondaryCityID", "SecondaryCityID");
            mapping.ColumnMappings.Add("SecondaryZipCode", "SecondaryZipCode");
            mapping.ColumnMappings.Add("IndustryID", "IndustryID");
            mapping.ColumnMappings.Add("CompanySize", "CompanySize");
            mapping.ColumnMappings.Add("BussinessPhone", "BussinessPhone");
            mapping.ColumnMappings.Add("Fax", "Fax");
            mapping.ColumnMappings.Add("InternalNotes", "InternalNotes");
            mapping.ColumnMappings.Add("Active", "Active");
            mapping.ColumnMappings.Add("Archived", "Archived");
            mapping.ColumnMappings.Add("Deleted", "Deleted");
            this._adapter.TableMappings.Add(mapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.PR_CompanyClientMaster_Delete";
            this._adapter.DeleteCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@CompanyClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.PR_CompanyClientMaster_Insert";
            this._adapter.InsertCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyClientID", SqlDbType.Int, 4, ParameterDirection.InputOutput, 10, 0, "CompanyClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@OrganizationName", SqlDbType.NVarChar, 200, ParameterDirection.Input, 0, 0, "OrganizationName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@InvoiceByEmail", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "InvoiceByEmail", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@InvoiceBySnailMail", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "InvoiceBySnailMail", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "Email", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "FirstName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "LastName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@HomePhone", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, "HomePhone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Mobile", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, "Mobile", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@LoginCredentials", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "LoginCredentials", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@UserName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "UserName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Address1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "Address1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Address2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "Address2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CountryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@StateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "StateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CityID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ZipCode", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "ZipCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@SecondaryAddress1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "SecondaryAddress1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@SecondaryAddress2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "SecondaryAddress2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@SecondaryCountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SecondaryCountryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@SecondaryStateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SecondaryStateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@SecondaryCityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SecondaryCityID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@SecondaryZipCode", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "SecondaryZipCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@IndustryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "IndustryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanySize", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanySize", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@BussinessPhone", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "BussinessPhone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Fax", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "Fax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@InternalNotes", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, "InternalNotes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.PR_CompanyClientMaster_Update";
            this._adapter.UpdateCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@OrganizationName", SqlDbType.NVarChar, 200, ParameterDirection.Input, 0, 0, "OrganizationName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@InvoiceByEmail", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "InvoiceByEmail", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@InvoiceBySnailMail", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "InvoiceBySnailMail", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "Email", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "FirstName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "LastName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@HomePhone", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, "HomePhone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Mobile", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, "Mobile", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@LoginCredentials", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "LoginCredentials", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@UserName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "UserName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Address1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "Address1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Address2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "Address2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CountryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@StateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "StateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CityID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ZipCode", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "ZipCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@SecondaryAddress1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "SecondaryAddress1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@SecondaryAddress2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "SecondaryAddress2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@SecondaryCountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SecondaryCountryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@SecondaryStateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SecondaryStateID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@SecondaryCityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SecondaryCityID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@SecondaryZipCode", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "SecondaryZipCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@IndustryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "IndustryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanySize", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "CompanySize", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@BussinessPhone", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "BussinessPhone", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Fax", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "Fax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@InternalNotes", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, "InternalNotes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new SqlCommand[11];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PR_CompanyClientMaster_SelectAll";
            this._commandCollection[0].CommandType = CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.PR_CompanyClientMaster_DeleteByCompany";
            this._commandCollection[1].CommandType = CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.PR_CompanyClientMaster_SelectByCompanyClientID";
            this._commandCollection[2].CommandType = CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new SqlParameter("@CompanyClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.PR_CompanyClientMaster_SelectByCompanyID";
            this._commandCollection[3].CommandType = CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.PR_CompanyClientMaster_SelectByCompanyIDAndEmail";
            this._commandCollection[4].CommandType = CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.PR_CompanyClientMaster_SelectByCompanyIDAndStatus";
            this._commandCollection[5].CommandType = CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Organization", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Address", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@InternalNotes", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.PR_CompanyClientMaster_SelectByCompanyStaffIDAndStatus";
            this._commandCollection[6].CommandType = CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@StaffID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Organization", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Address", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Phone", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@InternalNotes", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.PR_CompanyClientMaster_SelectByUserName";
            this._commandCollection[7].CommandType = CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Username", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "dbo.PR_CompanyClientMaster_UpdateBoxData";
            this._commandCollection[8].CommandType = CommandType.StoredProcedure;
            this._commandCollection[8].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@OrganizationName", SqlDbType.NVarChar, 200, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@Address1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@Address2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@StateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@ZipCode", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@IndustryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@CompanySize", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "dbo.PR_CompanyClientMaster_UpdateClientProfile";
            this._commandCollection[9].CommandType = CommandType.StoredProcedure;
            this._commandCollection[9].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@CompanyClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@Email", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@FirstName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@LastName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@HomePhone", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@Mobile", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@UserName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@Address1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@Address2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@CountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@StateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@CityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@ZipCode", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@SecondaryAddress1", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@SecondaryAddress2", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@SecondaryCountryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@SecondaryStateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@SecondaryCityID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@SecondaryZipCode", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@BussinessPhone", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@Fax", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "dbo.PR_CompanyClientMaster_UpdateWhenAnyBit";
            this._commandCollection[10].CommandType = CommandType.StoredProcedure;
            this._commandCollection[10].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@CompanyClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = Settings.Default.IITS_CloudAccountingConnectionString;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(ref int? CompanyClientID, int? CompanyID, string OrganizationName, int? CurrencyID, bool? InvoiceByEmail, bool? InvoiceBySnailMail, string Email, string FirstName, string LastName, string HomePhone, string Mobile, bool? LoginCredentials, string UserName, string Address1, string Address2, int? CountryID, int? StateID, int? CityID, string ZipCode, string SecondaryAddress1, string SecondaryAddress2, int? SecondaryCountryID, int? SecondaryStateID, int? SecondaryCityID, string SecondaryZipCode, int? IndustryID, string CompanySize, string BussinessPhone, string Fax, string InternalNotes, bool? Active, bool? Archived, bool? Deleted)
        {
            int num2;
            if (CompanyClientID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[1].Value = CompanyClientID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            if (OrganizationName == null)
            {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = OrganizationName;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[4].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            if (InvoiceByEmail.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[5].Value = InvoiceByEmail.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
            }
            if (InvoiceBySnailMail.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[6].Value = InvoiceBySnailMail.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
            }
            if (Email == null)
            {
                this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = Email;
            }
            if (FirstName == null)
            {
                this.Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = FirstName;
            }
            if (LastName == null)
            {
                this.Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = LastName;
            }
            if (HomePhone == null)
            {
                this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = HomePhone;
            }
            if (Mobile == null)
            {
                this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = Mobile;
            }
            if (LoginCredentials.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[12].Value = LoginCredentials.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
            }
            if (UserName == null)
            {
                this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = UserName;
            }
            if (Address1 == null)
            {
                this.Adapter.InsertCommand.Parameters[14].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = Address1;
            }
            if (Address2 == null)
            {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = Address2;
            }
            if (CountryID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = CountryID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = DBNull.Value;
            }
            if (StateID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = StateID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (CityID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = CityID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (ZipCode == null)
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = ZipCode;
            }
            if (SecondaryAddress1 == null)
            {
                this.Adapter.InsertCommand.Parameters[20].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[20].Value = SecondaryAddress1;
            }
            if (SecondaryAddress2 == null)
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = SecondaryAddress2;
            }
            if (SecondaryCountryID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = SecondaryCountryID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = DBNull.Value;
            }
            if (SecondaryStateID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = SecondaryStateID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = DBNull.Value;
            }
            if (SecondaryCityID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = SecondaryCityID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = DBNull.Value;
            }
            if (SecondaryZipCode == null)
            {
                this.Adapter.InsertCommand.Parameters[0x19].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x19].Value = SecondaryZipCode;
            }
            if (IndustryID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x1a].Value = IndustryID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x1a].Value = DBNull.Value;
            }
            if (CompanySize == null)
            {
                this.Adapter.InsertCommand.Parameters[0x1b].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x1b].Value = CompanySize;
            }
            if (BussinessPhone == null)
            {
                this.Adapter.InsertCommand.Parameters[0x1c].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x1c].Value = BussinessPhone;
            }
            if (Fax == null)
            {
                this.Adapter.InsertCommand.Parameters[0x1d].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x1d].Value = Fax;
            }
            if (InternalNotes == null)
            {
                this.Adapter.InsertCommand.Parameters[30].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[30].Value = InternalNotes;
            }
            if (Active.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x1f].Value = Active.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x1f].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x20].Value = Archived.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x20].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x21].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x21].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.InsertCommand.Connection.State;
            if ((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int num = this.Adapter.InsertCommand.ExecuteNonQuery();
                if ((this.Adapter.InsertCommand.Parameters[1].Value == null) || (this.Adapter.InsertCommand.Parameters[1].Value.GetType() == typeof(DBNull)))
                {
                    CompanyClientID = 0;
                }
                else
                {
                    CompanyClientID = new int?((int) this.Adapter.InsertCommand.Parameters[1].Value);
                }
                num2 = num;
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(CloudAccountDA dataSet)
        {
            return this.Adapter.Update(dataSet, "CompanyClientMaster");
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA.CompanyClientMasterDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow dataRow)
        {
            return this.Adapter.Update(new DataRow[] { dataRow });
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public virtual int Update(DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(int? CompanyClientID, int? CompanyID, string OrganizationName, int? CurrencyID, bool? InvoiceByEmail, bool? InvoiceBySnailMail, string Email, string FirstName, string LastName, string HomePhone, string Mobile, bool? LoginCredentials, string UserName, string Address1, string Address2, int? CountryID, int? StateID, int? CityID, string ZipCode, string SecondaryAddress1, string SecondaryAddress2, int? SecondaryCountryID, int? SecondaryStateID, int? SecondaryCityID, string SecondaryZipCode, int? IndustryID, string CompanySize, string BussinessPhone, string Fax, string InternalNotes, bool? Active, bool? Archived, bool? Deleted)
        {
            int num2;
            if (CompanyClientID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = CompanyClientID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            if (OrganizationName == null)
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = OrganizationName;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            if (InvoiceByEmail.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = InvoiceByEmail.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
            }
            if (InvoiceBySnailMail.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = InvoiceBySnailMail.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
            }
            if (Email == null)
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = Email;
            }
            if (FirstName == null)
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = FirstName;
            }
            if (LastName == null)
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = LastName;
            }
            if (HomePhone == null)
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = HomePhone;
            }
            if (Mobile == null)
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = Mobile;
            }
            if (LoginCredentials.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = LoginCredentials.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
            }
            if (UserName == null)
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = UserName;
            }
            if (Address1 == null)
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = Address1;
            }
            if (Address2 == null)
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = Address2;
            }
            if (CountryID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = CountryID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = DBNull.Value;
            }
            if (StateID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = StateID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (CityID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = CityID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (ZipCode == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = ZipCode;
            }
            if (SecondaryAddress1 == null)
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = SecondaryAddress1;
            }
            if (SecondaryAddress2 == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = SecondaryAddress2;
            }
            if (SecondaryCountryID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = SecondaryCountryID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = DBNull.Value;
            }
            if (SecondaryStateID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = SecondaryStateID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = DBNull.Value;
            }
            if (SecondaryCityID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = SecondaryCityID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = DBNull.Value;
            }
            if (SecondaryZipCode == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x19].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x19].Value = SecondaryZipCode;
            }
            if (IndustryID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x1a].Value = IndustryID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x1a].Value = DBNull.Value;
            }
            if (CompanySize == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x1b].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x1b].Value = CompanySize;
            }
            if (BussinessPhone == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x1c].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x1c].Value = BussinessPhone;
            }
            if (Fax == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x1d].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x1d].Value = Fax;
            }
            if (InternalNotes == null)
            {
                this.Adapter.UpdateCommand.Parameters[30].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[30].Value = InternalNotes;
            }
            if (Active.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x1f].Value = Active.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x1f].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x20].Value = Archived.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x20].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x21].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x21].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.UpdateCommand.Connection.State;
            if ((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.UpdateCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.CompanyClientMasterDataTable UpdateBoxData(int? CompanyClientID, int? CompanyID, string OrganizationName, string Email, string FirstName, string LastName, string Address1, string Address2, int? CountryID, int? StateID, int? CityID, string ZipCode, int? IndustryID, string CompanySize)
        {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if (CompanyClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (OrganizationName == null)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = OrganizationName;
            }
            if (Email == null)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Email;
            }
            if (FirstName == null)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = FirstName;
            }
            if (LastName == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = LastName;
            }
            if (Address1 == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = Address1;
            }
            if (Address2 == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = Address2;
            }
            if (CountryID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = CountryID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            if (StateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = StateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            if (CityID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = CityID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            if (ZipCode == null)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = ZipCode;
            }
            if (IndustryID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = IndustryID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            if (CompanySize == null)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = CompanySize;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode]
        public virtual CloudAccountDA.CompanyClientMasterDataTable UpdateClientProfile(int? CompanyClientID, int? CompanyID, string Email, string FirstName, string LastName, string HomePhone, string Mobile, string UserName, string Address1, string Address2, int? CountryID, int? StateID, int? CityID, string ZipCode, string SecondaryAddress1, string SecondaryAddress2, int? SecondaryCountryID, int? SecondaryStateID, int? SecondaryCityID, string SecondaryZipCode, string BussinessPhone, string Fax)
        {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if (CompanyClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Email == null)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Email;
            }
            if (FirstName == null)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = FirstName;
            }
            if (LastName == null)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = LastName;
            }
            if (HomePhone == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = HomePhone;
            }
            if (Mobile == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = Mobile;
            }
            if (UserName == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = UserName;
            }
            if (Address1 == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = Address1;
            }
            if (Address2 == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = Address2;
            }
            if (CountryID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = CountryID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            if (StateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = StateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            if (CityID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = CityID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            if (ZipCode == null)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = ZipCode;
            }
            if (SecondaryAddress1 == null)
            {
                this.Adapter.SelectCommand.Parameters[15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[15].Value = SecondaryAddress1;
            }
            if (SecondaryAddress2 == null)
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x10].Value = SecondaryAddress2;
            }
            if (SecondaryCountryID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[0x11].Value = SecondaryCountryID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (SecondaryStateID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[0x12].Value = SecondaryStateID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (SecondaryCityID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[0x13].Value = SecondaryCityID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x13].Value = DBNull.Value;
            }
            if (SecondaryZipCode == null)
            {
                this.Adapter.SelectCommand.Parameters[20].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[20].Value = SecondaryZipCode;
            }
            if (BussinessPhone == null)
            {
                this.Adapter.SelectCommand.Parameters[0x15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x15].Value = BussinessPhone;
            }
            if (Fax == null)
            {
                this.Adapter.SelectCommand.Parameters[0x16].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[0x16].Value = Fax;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.CompanyClientMasterDataTable UpdateWhenAnyBit(int? CompanyClientID, bool? Active, bool? Deleted, bool? Archived)
        {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if (CompanyClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.CompanyClientMasterDataTable dataTable = new CloudAccountDA.CompanyClientMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal SqlDataAdapter Adapter
        {
            get
            {
                if (this._adapter == null)
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected SqlCommand[] CommandCollection
        {
            get
            {
                if (this._commandCollection == null)
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlConnection Connection
        {
            get
            {
                if (this._connection == null)
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if (this.Adapter.InsertCommand != null)
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if (this.Adapter.DeleteCommand != null)
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if (this.Adapter.UpdateCommand != null)
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    if (this.CommandCollection[i] != null)
                    {
                        this.CommandCollection[i].Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
    }
}
