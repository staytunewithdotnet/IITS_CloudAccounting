// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.DAL.CloudAccountDATableAdapters
{
    using DABL.DAL;
    using DABL.Properties;
    using System;
    using System.CodeDom.Compiler;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Diagnostics;
    
    [ToolboxItem(true), DesignerCategory("code"), Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), HelpKeyword("vs.data.TableAdapter"), DataObject(true)]
    public class RecurringMasterTableAdapter : Component
    {
        private SqlDataAdapter _adapter;
        private bool _clearBeforeFill;
        private SqlCommand[] _commandCollection;
        private SqlConnection _connection;
        private SqlTransaction _transaction;
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public RecurringMasterTableAdapter()
        {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(int? RecurringID)
        {
            int num2;
            if (RecurringID.HasValue)
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = RecurringID.Value;
            }
            else
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.DeleteCommand.Connection.State;
            if ((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.DeleteCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable DeleteByClientID(int? ClientID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if (ClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable DeleteByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DataObjectMethod(DataObjectMethodType.Fill, true), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Fill(CloudAccountDA.RecurringMasterDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if (this.ClearBeforeFill)
            {
                dataTable.Clear();
            }
            return this.Adapter.Fill(dataTable);
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable GetAllActiveTodayRecurring()
        {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, true), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable GetDataByClientID(int? ClientID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if (ClientID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable GetDataByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable GetDataByCompanyIDAndStatus(int? CompanyID, bool? Active, bool? Archived, bool? Deleted, string RecurringNumber, string PONumber, string Notes, string ClientName, string ItemName, string ItemDesc, decimal? TotalFrom, decimal? TotalTo, int? Currency, int? Frequency)
        {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (RecurringNumber == null)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = RecurringNumber;
            }
            if (PONumber == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = PONumber;
            }
            if (Notes == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = Notes;
            }
            if (ClientName == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = ClientName;
            }
            if (ItemName == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = ItemName;
            }
            if (ItemDesc == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = ItemDesc;
            }
            if (TotalFrom.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = TotalFrom.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            if (TotalTo.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = TotalTo.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            if (Currency.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = Currency.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            if (Frequency.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = Frequency.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.RecurringMasterDataTable GetDataByCompanyStaffIDAndStatus(int? CompanyID, int? StaffID, bool? Active, bool? Archived, bool? Deleted, string RecurringNumber, string PONumber, string Notes, string ClientName, string ItemName, string ItemDesc, decimal? TotalFrom, decimal? TotalTo, int? Currency, int? Frequency)
        {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (StaffID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = StaffID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            if (RecurringNumber == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = RecurringNumber;
            }
            if (PONumber == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = PONumber;
            }
            if (Notes == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = Notes;
            }
            if (ClientName == null)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = ClientName;
            }
            if (ItemName == null)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = ItemName;
            }
            if (ItemDesc == null)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = ItemDesc;
            }
            if (TotalFrom.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = TotalFrom.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            if (TotalTo.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = TotalTo.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            if (Currency.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = Currency.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            if (Frequency.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[15].Value = Frequency.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[15].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode]
        public virtual CloudAccountDA.RecurringMasterDataTable GetDataByRecurringID(int? RecurringID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            if (RecurringID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = RecurringID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitAdapter()
        {
            this._adapter = new SqlDataAdapter();
            DataTableMapping mapping = new DataTableMapping {
                SourceTable = "Table",
                DataSetTable = "RecurringMaster"
            };
            mapping.ColumnMappings.Add("RecurringID", "RecurringID");
            mapping.ColumnMappings.Add("CompanyID", "CompanyID");
            mapping.ColumnMappings.Add("RecurringSchedule", "RecurringSchedule");
            mapping.ColumnMappings.Add("HowOften", "HowOften");
            mapping.ColumnMappings.Add("HowManyInvoice", "HowManyInvoice");
            mapping.ColumnMappings.Add("RemainingInvoice", "RemainingInvoice");
            mapping.ColumnMappings.Add("NextDate", "NextDate");
            mapping.ColumnMappings.Add("ClientID", "ClientID");
            mapping.ColumnMappings.Add("CurrencyID", "CurrencyID");
            mapping.ColumnMappings.Add("RecurringNumber", "RecurringNumber");
            mapping.ColumnMappings.Add("RecurringDate", "RecurringDate");
            mapping.ColumnMappings.Add("PONumber", "PONumber");
            mapping.ColumnMappings.Add("Discount", "Discount");
            mapping.ColumnMappings.Add("DiscountAmount", "DiscountAmount");
            mapping.ColumnMappings.Add("ProrateFirstInvoice", "ProrateFirstInvoice");
            mapping.ColumnMappings.Add("ProrateFirstInvoiceDays", "ProrateFirstInvoiceDays");
            mapping.ColumnMappings.Add("RecurringActive", "RecurringActive");
            mapping.ColumnMappings.Add("Notes", "Notes");
            mapping.ColumnMappings.Add("Terms", "Terms");
            mapping.ColumnMappings.Add("RecurringStatus", "RecurringStatus");
            mapping.ColumnMappings.Add("RecurringTotal", "RecurringTotal");
            mapping.ColumnMappings.Add("Active", "Active");
            mapping.ColumnMappings.Add("Archived", "Archived");
            mapping.ColumnMappings.Add("Deleted", "Deleted");
            this._adapter.TableMappings.Add(mapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.PR_RecurringMaster_Delete";
            this._adapter.DeleteCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@RecurringID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "RecurringID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.PR_RecurringMaster_Insert";
            this._adapter.InsertCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringID", SqlDbType.Int, 4, ParameterDirection.InputOutput, 10, 0, "RecurringID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringSchedule", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "RecurringSchedule", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@HowOften", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "HowOften", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@HowManyInvoice", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, "HowManyInvoice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RemainingInvoice", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, "RemainingInvoice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@NextDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "NextDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "RecurringNumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "RecurringDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "PONumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Decimal, 5, ParameterDirection.Input, 4, 2, "Discount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@DiscountAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "DiscountAmount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ProrateFirstInvoice", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ProrateFirstInvoice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ProrateFirstInvoiceDays", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ProrateFirstInvoiceDays", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringActive", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "RecurringActive", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Notes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Terms", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Terms", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "RecurringStatus", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "RecurringTotal", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.PR_RecurringMaster_Update";
            this._adapter.UpdateCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "RecurringID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringSchedule", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "RecurringSchedule", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@HowOften", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "HowOften", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@HowManyInvoice", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, "HowManyInvoice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RemainingInvoice", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, "RemainingInvoice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@NextDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "NextDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "RecurringNumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "RecurringDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "PONumber", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Decimal, 5, ParameterDirection.Input, 4, 2, "Discount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@DiscountAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "DiscountAmount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ProrateFirstInvoice", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "ProrateFirstInvoice", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ProrateFirstInvoiceDays", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ProrateFirstInvoiceDays", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringActive", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "RecurringActive", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Notes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Terms", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Terms", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "RecurringStatus", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringTotal", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "RecurringTotal", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitCommandCollection()
        {
            this._commandCollection = new SqlCommand[11];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PR_RecurringMaster_SelectAll";
            this._commandCollection[0].CommandType = CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.PR_RecurringMaster_DeleteByClientID";
            this._commandCollection[1].CommandType = CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.PR_RecurringMaster_DeleteByCompanyID";
            this._commandCollection[2].CommandType = CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.PR_RecurringMaster_SelectAllActiveTodayRecurring";
            this._commandCollection[3].CommandType = CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.PR_RecurringMaster_SelectByClientID";
            this._commandCollection[4].CommandType = CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.PR_RecurringMaster_SelectByCompanyID";
            this._commandCollection[5].CommandType = CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.PR_RecurringMaster_SelectByCompanyIDAndStatus";
            this._commandCollection[6].CommandType = CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@RecurringNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@ClientName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@ItemName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@ItemDesc", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@TotalFrom", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@TotalTo", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Currency", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@Frequency", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.PR_RecurringMaster_SelectByCompanyStaffIDAndStatus";
            this._commandCollection[7].CommandType = CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@StaffID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@RecurringNumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@PONumber", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@ClientName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@ItemName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@ItemDesc", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@TotalFrom", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@TotalTo", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Currency", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Frequency", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "dbo.PR_RecurringMaster_SelectByRecurringID";
            this._commandCollection[8].CommandType = CommandType.StoredProcedure;
            this._commandCollection[8].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new SqlParameter("@RecurringID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = "dbo.PR_RecurringMaster_UpdateForSentInvoice";
            this._commandCollection[9].CommandType = CommandType.StoredProcedure;
            this._commandCollection[9].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@RecurringID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@RemainingInvoice", SqlDbType.NVarChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@NextDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new SqlParameter("@RecurringActive", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "dbo.PR_RecurringMaster_UpdateWhenAnyBit";
            this._commandCollection[10].CommandType = CommandType.StoredProcedure;
            this._commandCollection[10].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@RecurringID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection()
        {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = Settings.Default.IITS_CloudAccountingConnectionString;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Insert, true), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Insert(ref int? RecurringID, int? CompanyID, DateTime? RecurringSchedule, int? HowOften, string HowManyInvoice, string RemainingInvoice, DateTime? NextDate, int? ClientID, int? CurrencyID, string RecurringNumber, DateTime? RecurringDate, string PONumber, decimal? Discount, decimal? DiscountAmount, bool? ProrateFirstInvoice, int? ProrateFirstInvoiceDays, bool? RecurringActive, string Notes, string Terms, string RecurringStatus, decimal? RecurringTotal, bool? Active, bool? Archived, bool? Deleted)
        {
            int num2;
            if (RecurringID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[1].Value = RecurringID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            if (RecurringSchedule.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[3].Value = RecurringSchedule.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            if (HowOften.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[4].Value = HowOften.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            if (HowManyInvoice == null)
            {
                this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = HowManyInvoice;
            }
            if (RemainingInvoice == null)
            {
                this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = RemainingInvoice;
            }
            if (NextDate.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[7].Value = NextDate.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
            }
            if (ClientID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[8].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[9].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
            }
            if (RecurringNumber == null)
            {
                this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = RecurringNumber;
            }
            if (RecurringDate.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[11].Value = RecurringDate.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
            }
            if (PONumber == null)
            {
                this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = PONumber;
            }
            if (Discount.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[13].Value = Discount.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
            }
            if (DiscountAmount.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[14].Value = DiscountAmount.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = DBNull.Value;
            }
            if (ProrateFirstInvoice.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[15].Value = ProrateFirstInvoice.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            if (ProrateFirstInvoiceDays.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = ProrateFirstInvoiceDays.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = DBNull.Value;
            }
            if (RecurringActive.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = RecurringActive.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (Notes == null)
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = Notes;
            }
            if (Terms == null)
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = Terms;
            }
            if (RecurringStatus == null)
            {
                this.Adapter.InsertCommand.Parameters[20].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[20].Value = RecurringStatus;
            }
            if (RecurringTotal.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = RecurringTotal.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = Active.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = Archived.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.InsertCommand.Connection.State;
            if ((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int num = this.Adapter.InsertCommand.ExecuteNonQuery();
                if ((this.Adapter.InsertCommand.Parameters[1].Value == null) || (this.Adapter.InsertCommand.Parameters[1].Value.GetType() == typeof(DBNull)))
                {
                    RecurringID = 0;
                }
                else
                {
                    RecurringID = new int?((int) this.Adapter.InsertCommand.Parameters[1].Value);
                }
                num2 = num;
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA dataSet)
        {
            return this.Adapter.Update(dataSet, "RecurringMaster");
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA.RecurringMasterDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow dataRow)
        {
            return this.Adapter.Update(new DataRow[] { dataRow });
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }
        
        [DataObjectMethod(DataObjectMethodType.Update, true), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(int? RecurringID, int? CompanyID, DateTime? RecurringSchedule, int? HowOften, string HowManyInvoice, string RemainingInvoice, DateTime? NextDate, int? ClientID, int? CurrencyID, string RecurringNumber, DateTime? RecurringDate, string PONumber, decimal? Discount, decimal? DiscountAmount, bool? ProrateFirstInvoice, int? ProrateFirstInvoiceDays, bool? RecurringActive, string Notes, string Terms, string RecurringStatus, decimal? RecurringTotal, bool? Active, bool? Archived, bool? Deleted)
        {
            int num2;
            if (RecurringID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = RecurringID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            if (RecurringSchedule.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = RecurringSchedule.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            if (HowOften.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = HowOften.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            if (HowManyInvoice == null)
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = HowManyInvoice;
            }
            if (RemainingInvoice == null)
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = RemainingInvoice;
            }
            if (NextDate.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = NextDate.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
            }
            if (ClientID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
            }
            if (CurrencyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = CurrencyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            if (RecurringNumber == null)
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = RecurringNumber;
            }
            if (RecurringDate.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = RecurringDate.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
            }
            if (PONumber == null)
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = PONumber;
            }
            if (Discount.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = Discount.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
            }
            if (DiscountAmount.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = DiscountAmount.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
            }
            if (ProrateFirstInvoice.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = ProrateFirstInvoice.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            if (ProrateFirstInvoiceDays.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = ProrateFirstInvoiceDays.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = DBNull.Value;
            }
            if (RecurringActive.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = RecurringActive.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (Notes == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = Notes;
            }
            if (Terms == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = Terms;
            }
            if (RecurringStatus == null)
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = RecurringStatus;
            }
            if (RecurringTotal.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = RecurringTotal.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = Active.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = Archived.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.UpdateCommand.Connection.State;
            if ((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.UpdateCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.RecurringMasterDataTable UpdateForSentInvoice(int? RecurringID, string RemainingInvoice, DateTime? NextDate, bool? RecurringActive)
        {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if (RecurringID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = RecurringID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (RemainingInvoice == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = RemainingInvoice;
            }
            if (NextDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = NextDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (RecurringActive.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = RecurringActive.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode]
        public virtual CloudAccountDA.RecurringMasterDataTable UpdateWhenAnyBit(int? RecurringID, bool? Active, bool? Deleted, bool? Archived)
        {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if (RecurringID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = RecurringID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.RecurringMasterDataTable dataTable = new CloudAccountDA.RecurringMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected internal SqlDataAdapter Adapter
        {
            get
            {
                if (this._adapter == null)
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected SqlCommand[] CommandCollection
        {
            get
            {
                if (this._commandCollection == null)
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlConnection Connection
        {
            get
            {
                if (this._connection == null)
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if (this.Adapter.InsertCommand != null)
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if (this.Adapter.DeleteCommand != null)
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if (this.Adapter.UpdateCommand != null)
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    if (this.CommandCollection[i] != null)
                    {
                        this.CommandCollection[i].Connection = value;
                    }
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
    }
}
