// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.DAL.CloudAccountDATableAdapters
{
    using DABL.DAL;
    using DABL.Properties;
    using System;
    using System.CodeDom.Compiler;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Diagnostics;
    
    [DataObject(true), HelpKeyword("vs.data.TableAdapter"), Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), DesignerCategory("code"), ToolboxItem(true)]
    public class ExpenseMasterTableAdapter : Component
    {
        private SqlDataAdapter _adapter;
        private bool _clearBeforeFill;
        private SqlCommand[] _commandCollection;
        private SqlConnection _connection;
        private SqlTransaction _transaction;
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ExpenseMasterTableAdapter()
        {
            this.ClearBeforeFill = true;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Delete, true), DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter")]
        public virtual int Delete(int? ExpenseID)
        {
            int num2;
            if (ExpenseID.HasValue)
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = ExpenseID.Value;
            }
            else
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.DeleteCommand.Connection.State;
            if ((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.DeleteCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.ExpenseMasterDataTable DeleteByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Fill, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Fill(CloudAccountDA.ExpenseMasterDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if (this.ClearBeforeFill)
            {
                dataTable.Clear();
            }
            return this.Adapter.Fill(dataTable);
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.ExpenseMasterDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.ExpenseMasterDataTable GetDataByCompanyID(int? CompanyID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.ExpenseMasterDataTable GetDataByCompanyIDAndStatus(int? CompanyID, bool? Active, bool? Archived, bool? Deleted)
        {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.ExpenseMasterDataTable GetDataByExpenseID(int? ExpenseID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if (ExpenseID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = ExpenseID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter")]
        public virtual CloudAccountDA.ExpenseMasterDataTable GetDataByExpenseSearch(int? CompanyID, bool? Active, bool? Archived, bool? Deleted, string ExpenseCategory, string ClientName, string Vendor, string Notes, DateTime? ToDate, DateTime? FromDate, decimal? AmountTo, decimal? AmountFrom, string Status, bool? HasReceipt)
        {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if (CompanyID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            if (ExpenseCategory == null)
            {
                this.Adapter.SelectCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[5].Value = ExpenseCategory;
            }
            if (ClientName == null)
            {
                this.Adapter.SelectCommand.Parameters[6].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[6].Value = ClientName;
            }
            if (Vendor == null)
            {
                this.Adapter.SelectCommand.Parameters[7].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[7].Value = Vendor;
            }
            if (Notes == null)
            {
                this.Adapter.SelectCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[8].Value = Notes;
            }
            if (ToDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[9].Value = ToDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[9].Value = DBNull.Value;
            }
            if (FromDate.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[10].Value = FromDate.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[10].Value = DBNull.Value;
            }
            if (AmountTo.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[11].Value = AmountTo.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[11].Value = DBNull.Value;
            }
            if (AmountFrom.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[12].Value = AmountFrom.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[12].Value = DBNull.Value;
            }
            if (Status == null)
            {
                this.Adapter.SelectCommand.Parameters[13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[13].Value = Status;
            }
            if (HasReceipt.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[14].Value = HasReceipt.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[14].Value = DBNull.Value;
            }
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter()
        {
            this._adapter = new SqlDataAdapter();
            DataTableMapping mapping = new DataTableMapping {
                SourceTable = "Table",
                DataSetTable = "ExpenseMaster"
            };
            mapping.ColumnMappings.Add("ExpenseID", "ExpenseID");
            mapping.ColumnMappings.Add("CompanyID", "CompanyID");
            mapping.ColumnMappings.Add("ExpenseAmount", "ExpenseAmount");
            mapping.ColumnMappings.Add("ExpenseDate", "ExpenseDate");
            mapping.ColumnMappings.Add("Vendor", "Vendor");
            mapping.ColumnMappings.Add("CategoryID", "CategoryID");
            mapping.ColumnMappings.Add("SubCategoryID", "SubCategoryID");
            mapping.ColumnMappings.Add("Notes", "Notes");
            mapping.ColumnMappings.Add("Taxes", "Taxes");
            mapping.ColumnMappings.Add("Tax1", "Tax1");
            mapping.ColumnMappings.Add("TaxAmount1", "TaxAmount1");
            mapping.ColumnMappings.Add("Tax2", "Tax2");
            mapping.ColumnMappings.Add("TaxAmount2", "TaxAmount2");
            mapping.ColumnMappings.Add("RecurringExpense", "RecurringExpense");
            mapping.ColumnMappings.Add("FrequencyID", "FrequencyID");
            mapping.ColumnMappings.Add("UntilTimePeriod", "UntilTimePeriod");
            mapping.ColumnMappings.Add("EndDate", "EndDate");
            mapping.ColumnMappings.Add("AssignedToClient", "AssignedToClient");
            mapping.ColumnMappings.Add("ClientID", "ClientID");
            mapping.ColumnMappings.Add("AttachImage", "AttachImage");
            mapping.ColumnMappings.Add("Image", "Image");
            mapping.ColumnMappings.Add("ExpenseStatus", "ExpenseStatus");
            mapping.ColumnMappings.Add("Active", "Active");
            mapping.ColumnMappings.Add("Archived", "Archived");
            mapping.ColumnMappings.Add("Deleted", "Deleted");
            this._adapter.TableMappings.Add(mapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.PR_ExpenseMaster_Delete";
            this._adapter.DeleteCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@ExpenseID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ExpenseID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.PR_ExpenseMaster_Insert";
            this._adapter.InsertCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ExpenseID", SqlDbType.Int, 4, ParameterDirection.InputOutput, 10, 0, "ExpenseID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ExpenseAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "ExpenseAmount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ExpenseDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "ExpenseDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Vendor", SqlDbType.NVarChar, 250, ParameterDirection.Input, 0, 0, "Vendor", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@CategoryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CategoryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@SubCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SubCategoryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Notes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Taxes", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Taxes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Tax1", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "Tax1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@TaxAmount1", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "TaxAmount1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Tax2", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "Tax2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@TaxAmount2", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "TaxAmount2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RecurringExpense", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "RecurringExpense", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@FrequencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "FrequencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@UntilTimePeriod", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "UntilTimePeriod", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@EndDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "EndDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@AssignedToClient", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "AssignedToClient", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@AttachImage", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "AttachImage", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Image", SqlDbType.Image, 0x7fffffff, ParameterDirection.Input, 0, 0, "Image", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@ExpenseStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "ExpenseStatus", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.PR_ExpenseMaster_Update";
            this._adapter.UpdateCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ExpenseID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ExpenseID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CompanyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ExpenseAmount", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "ExpenseAmount", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ExpenseDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "ExpenseDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Vendor", SqlDbType.NVarChar, 250, ParameterDirection.Input, 0, 0, "Vendor", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@CategoryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "CategoryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@SubCategoryID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SubCategoryID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 0x7fffffff, ParameterDirection.Input, 0, 0, "Notes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Taxes", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Taxes", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Tax1", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "Tax1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@TaxAmount1", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "TaxAmount1", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Tax2", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "Tax2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@TaxAmount2", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, "TaxAmount2", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RecurringExpense", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "RecurringExpense", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@FrequencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "FrequencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@UntilTimePeriod", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "UntilTimePeriod", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@EndDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, "EndDate", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@AssignedToClient", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "AssignedToClient", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ClientID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "ClientID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@AttachImage", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "AttachImage", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Image", SqlDbType.Image, 0x7fffffff, ParameterDirection.Input, 0, 0, "Image", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@ExpenseStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "ExpenseStatus", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Active", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Archived", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Deleted", DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitCommandCollection()
        {
            this._commandCollection = new SqlCommand[8];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PR_ExpenseMaster_SelectAll";
            this._commandCollection[0].CommandType = CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.PR_ExpenseMaster_DeleteByCompanyID";
            this._commandCollection[1].CommandType = CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.PR_ExpenseMaster_SelectByCompanyID";
            this._commandCollection[2].CommandType = CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.PR_ExpenseMaster_SelectByCompanyIDAndStatus";
            this._commandCollection[3].CommandType = CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "dbo.PR_ExpenseMaster_SelectByExpenseID";
            this._commandCollection[4].CommandType = CommandType.StoredProcedure;
            this._commandCollection[4].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new SqlParameter("@ExpenseID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "dbo.PR_ExpenseMaster_SelectByExpenseSearch";
            this._commandCollection[5].CommandType = CommandType.StoredProcedure;
            this._commandCollection[5].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@CompanyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@ExpenseCategory", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@ClientName", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Vendor", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Notes", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@ToDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@FromDate", SqlDbType.SmallDateTime, 4, ParameterDirection.Input, 0x10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@AmountTo", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@AmountFrom", SqlDbType.Decimal, 9, ParameterDirection.Input, 10, 2, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@Status", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new SqlParameter("@HasReceipt", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "dbo.PR_ExpenseMaster_UpdateExpenseStatus";
            this._commandCollection[6].CommandType = CommandType.StoredProcedure;
            this._commandCollection[6].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@ExpenseID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new SqlParameter("@ExpenseStatus", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "dbo.PR_ExpenseMaster_UpdateWhenAnyBit";
            this._commandCollection[7].CommandType = CommandType.StoredProcedure;
            this._commandCollection[7].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@ExpenseID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Active", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Archived", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new SqlParameter("@Deleted", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitConnection()
        {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = Settings.Default.IITS_CloudAccountingConnectionString;
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Insert, true), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Insert(ref int? ExpenseID, int? CompanyID, decimal? ExpenseAmount, DateTime? ExpenseDate, string Vendor, int? CategoryID, int? SubCategoryID, string Notes, bool? Taxes, int? Tax1, decimal? TaxAmount1, int? Tax2, decimal? TaxAmount2, bool? RecurringExpense, int? FrequencyID, string UntilTimePeriod, DateTime? EndDate, bool? AssignedToClient, int? ClientID, bool? AttachImage, byte[] Image, string ExpenseStatus, bool? Active, bool? Archived, bool? Deleted)
        {
            int num2;
            if (ExpenseID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[1].Value = ExpenseID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            if (ExpenseAmount.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[3].Value = ExpenseAmount.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            if (ExpenseDate.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[4].Value = ExpenseDate.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Vendor == null)
            {
                this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = Vendor;
            }
            if (CategoryID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[6].Value = CategoryID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
            }
            if (SubCategoryID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[7].Value = SubCategoryID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
            }
            if (Notes == null)
            {
                this.Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = Notes;
            }
            if (Taxes.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[9].Value = Taxes.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
            }
            if (Tax1.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[10].Value = Tax1.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
            }
            if (TaxAmount1.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[11].Value = TaxAmount1.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
            }
            if (Tax2.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[12].Value = Tax2.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
            }
            if (TaxAmount2.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[13].Value = TaxAmount2.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
            }
            if (RecurringExpense.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[14].Value = RecurringExpense.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = DBNull.Value;
            }
            if (FrequencyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[15].Value = FrequencyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            if (UntilTimePeriod == null)
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x10].Value = UntilTimePeriod;
            }
            if (EndDate.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = EndDate.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (AssignedToClient.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = AssignedToClient.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (ClientID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x13].Value = DBNull.Value;
            }
            if (AttachImage.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[20].Value = AttachImage.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[20].Value = DBNull.Value;
            }
            if (Image == null)
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x15].Value = Image;
            }
            if (ExpenseStatus == null)
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x16].Value = ExpenseStatus;
            }
            if (Active.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = Active.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x17].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = Archived.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x18].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[0x19].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[0x19].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.InsertCommand.Connection.State;
            if ((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int num = this.Adapter.InsertCommand.ExecuteNonQuery();
                if ((this.Adapter.InsertCommand.Parameters[1].Value == null) || (this.Adapter.InsertCommand.Parameters[1].Value.GetType() == typeof(DBNull)))
                {
                    ExpenseID = 0;
                }
                else
                {
                    ExpenseID = new int?((int) this.Adapter.InsertCommand.Parameters[1].Value);
                }
                num2 = num;
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public virtual int Update(CloudAccountDA dataSet)
        {
            return this.Adapter.Update(dataSet, "ExpenseMaster");
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA.ExpenseMasterDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow dataRow)
        {
            return this.Adapter.Update(new DataRow[] { dataRow });
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Update, true), HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(int? ExpenseID, int? CompanyID, decimal? ExpenseAmount, DateTime? ExpenseDate, string Vendor, int? CategoryID, int? SubCategoryID, string Notes, bool? Taxes, int? Tax1, decimal? TaxAmount1, int? Tax2, decimal? TaxAmount2, bool? RecurringExpense, int? FrequencyID, string UntilTimePeriod, DateTime? EndDate, bool? AssignedToClient, int? ClientID, bool? AttachImage, byte[] Image, string ExpenseStatus, bool? Active, bool? Archived, bool? Deleted)
        {
            int num2;
            if (ExpenseID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = ExpenseID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
            }
            if (CompanyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = CompanyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            if (ExpenseAmount.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = ExpenseAmount.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            if (ExpenseDate.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = ExpenseDate.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            if (Vendor == null)
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = Vendor;
            }
            if (CategoryID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = CategoryID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
            }
            if (SubCategoryID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = SubCategoryID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
            }
            if (Notes == null)
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = Notes;
            }
            if (Taxes.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = Taxes.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            if (Tax1.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = Tax1.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            if (TaxAmount1.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = TaxAmount1.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
            }
            if (Tax2.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = Tax2.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
            }
            if (TaxAmount2.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = TaxAmount2.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
            }
            if (RecurringExpense.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = RecurringExpense.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
            }
            if (FrequencyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = FrequencyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            if (UntilTimePeriod == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x10].Value = UntilTimePeriod;
            }
            if (EndDate.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = EndDate.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x11].Value = DBNull.Value;
            }
            if (AssignedToClient.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = AssignedToClient.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x12].Value = DBNull.Value;
            }
            if (ClientID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = ClientID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x13].Value = DBNull.Value;
            }
            if (AttachImage.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = AttachImage.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
            }
            if (Image == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x15].Value = Image;
            }
            if (ExpenseStatus == null)
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x16].Value = ExpenseStatus;
            }
            if (Active.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = Active.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x17].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = Archived.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x18].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[0x19].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[0x19].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.UpdateCommand.Connection.State;
            if ((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.UpdateCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.ExpenseMasterDataTable UpdateExpenseStatus(int? ExpenseID, string ExpenseStatus)
        {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if (ExpenseID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = ExpenseID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (ExpenseStatus == null)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = ExpenseStatus;
            }
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, false), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.ExpenseMasterDataTable UpdateWhenAnyBit(int? ExpenseID, bool? Active, bool? Archived, bool? Deleted)
        {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if (ExpenseID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = ExpenseID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            if (Active.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[2].Value = Active.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[2].Value = DBNull.Value;
            }
            if (Archived.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[3].Value = Archived.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[3].Value = DBNull.Value;
            }
            if (Deleted.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[4].Value = Deleted.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[4].Value = DBNull.Value;
            }
            CloudAccountDA.ExpenseMasterDataTable dataTable = new CloudAccountDA.ExpenseMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected internal SqlDataAdapter Adapter
        {
            get
            {
                if (this._adapter == null)
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SqlCommand[] CommandCollection
        {
            get
            {
                if (this._commandCollection == null)
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlConnection Connection
        {
            get
            {
                if (this._connection == null)
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if (this.Adapter.InsertCommand != null)
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if (this.Adapter.DeleteCommand != null)
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if (this.Adapter.UpdateCommand != null)
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    if (this.CommandCollection[i] != null)
                    {
                        this.CommandCollection[i].Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
    }
}
