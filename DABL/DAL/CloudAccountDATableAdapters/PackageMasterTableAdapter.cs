// Generated by .NET Reflector from E:\Projects\Doyingo_Migration\Website\bin\DABL.dll
namespace DABL.DAL.CloudAccountDATableAdapters
{
    using DABL.DAL;
    using DABL.Properties;
    using System;
    using System.CodeDom.Compiler;
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Data;
    using System.Data.Common;
    using System.Data.SqlClient;
    using System.Diagnostics;
    
    [ToolboxItem(true), Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), HelpKeyword("vs.data.TableAdapter"), DesignerCategory("code"), DataObject(true)]
    public class PackageMasterTableAdapter : Component
    {
        private SqlDataAdapter _adapter;
        private bool _clearBeforeFill;
        private SqlCommand[] _commandCollection;
        private SqlConnection _connection;
        private SqlTransaction _transaction;
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        public PackageMasterTableAdapter()
        {
            this.ClearBeforeFill = true;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(int? PackageID)
        {
            int num2;
            if (PackageID.HasValue)
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = PackageID.Value;
            }
            else
            {
                this.Adapter.DeleteCommand.Parameters[1].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.DeleteCommand.Connection.State;
            if ((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.DeleteCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(CloudAccountDA.PackageMasterDataTable dataTable)
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if (this.ClearBeforeFill)
            {
                dataTable.Clear();
            }
            return this.Adapter.Fill(dataTable);
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DataObjectMethod(DataObjectMethodType.Select, true), DebuggerNonUserCode]
        public virtual CloudAccountDA.PackageMasterDataTable GetData()
        {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            CloudAccountDA.PackageMasterDataTable dataTable = new CloudAccountDA.PackageMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode, DataObjectMethod(DataObjectMethodType.Select, false), HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual CloudAccountDA.PackageMasterDataTable GetDataByPackageID(int? PackageID)
        {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if (PackageID.HasValue)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = PackageID.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            CloudAccountDA.PackageMasterDataTable dataTable = new CloudAccountDA.PackageMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Select, false)]
        public virtual CloudAccountDA.PackageMasterDataTable GetDataByPackageName(string PackageName)
        {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if (PackageName == null)
            {
                this.Adapter.SelectCommand.Parameters[1].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.SelectCommand.Parameters[1].Value = PackageName;
            }
            CloudAccountDA.PackageMasterDataTable dataTable = new CloudAccountDA.PackageMasterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitAdapter()
        {
            this._adapter = new SqlDataAdapter();
            DataTableMapping mapping = new DataTableMapping {
                SourceTable = "Table",
                DataSetTable = "PackageMaster"
            };
            mapping.ColumnMappings.Add("PackageID", "PackageID");
            mapping.ColumnMappings.Add("PackageCode", "PackageCode");
            mapping.ColumnMappings.Add("PackageName", "PackageName");
            mapping.ColumnMappings.Add("FreeTrialPackage", "FreeTrialPackage");
            mapping.ColumnMappings.Add("NoOfAdminUsersMin", "NoOfAdminUsersMin");
            mapping.ColumnMappings.Add("NoOfAdminUsersMax", "NoOfAdminUsersMax");
            mapping.ColumnMappings.Add("NoOfStaffUsersMin", "NoOfStaffUsersMin");
            mapping.ColumnMappings.Add("NoOfStaffUsersMax", "NoOfStaffUsersMax");
            mapping.ColumnMappings.Add("PricePerMonth", "PricePerMonth");
            mapping.ColumnMappings.Add("MonthlyPriceCurrencyID", "MonthlyPriceCurrencyID");
            mapping.ColumnMappings.Add("PricePerYear", "PricePerYear");
            mapping.ColumnMappings.Add("YearlyPriceCurrencyID", "YearlyPriceCurrencyID");
            mapping.ColumnMappings.Add("Description", "Description");
            mapping.ColumnMappings.Add("NoOfTrialDays", "NoOfTrialDays");
            mapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(mapping);
            this._adapter.DeleteCommand = new SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "dbo.PR_PackageMaster_Delete";
            this._adapter.DeleteCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new SqlParameter("@PackageID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "PackageID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand = new SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "dbo.PR_PackageMaster_Insert";
            this._adapter.InsertCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PackageID", SqlDbType.Int, 4, ParameterDirection.InputOutput, 10, 0, "PackageID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, 0, 0, "PackageCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PackageName", SqlDbType.VarChar, 250, ParameterDirection.Input, 0, 0, "PackageName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@FreeTrialPackage", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "FreeTrialPackage", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@NoOfAdminUsersMin", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfAdminUsersMin", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@NoOfAdminUsersMax", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfAdminUsersMax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@NoOfStaffUsersMin", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfStaffUsersMin", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@NoOfStaffUsersMax", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfStaffUsersMax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PricePerMonth", SqlDbType.Money, 8, ParameterDirection.Input, 0x13, 4, "PricePerMonth", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@MonthlyPriceCurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "MonthlyPriceCurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@PricePerYear", SqlDbType.Money, 8, ParameterDirection.Input, 0x13, 4, "PricePerYear", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@YearlyPriceCurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "YearlyPriceCurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Description", SqlDbType.VarChar, 0x3e8, ParameterDirection.Input, 0, 0, "Description", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@NoOfTrialDays", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfTrialDays", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new SqlParameter("@Status", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Status", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "dbo.PR_PackageMaster_Update";
            this._adapter.UpdateCommand.CommandType = CommandType.StoredProcedure;
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PackageID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "PackageID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PackageCode", SqlDbType.VarChar, 50, ParameterDirection.Input, 0, 0, "PackageCode", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PackageName", SqlDbType.VarChar, 250, ParameterDirection.Input, 0, 0, "PackageName", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@FreeTrialPackage", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "FreeTrialPackage", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@NoOfAdminUsersMin", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfAdminUsersMin", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@NoOfAdminUsersMax", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfAdminUsersMax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@NoOfStaffUsersMin", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfStaffUsersMin", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@NoOfStaffUsersMax", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfStaffUsersMax", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PricePerMonth", SqlDbType.Money, 8, ParameterDirection.Input, 0x13, 4, "PricePerMonth", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@MonthlyPriceCurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "MonthlyPriceCurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@PricePerYear", SqlDbType.Money, 8, ParameterDirection.Input, 0x13, 4, "PricePerYear", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@YearlyPriceCurrencyID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "YearlyPriceCurrencyID", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Description", SqlDbType.VarChar, 0x3e8, ParameterDirection.Input, 0, 0, "Description", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@NoOfTrialDays", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "NoOfTrialDays", DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new SqlParameter("@Status", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Status", DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection()
        {
            this._commandCollection = new SqlCommand[3];
            this._commandCollection[0] = new SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.PR_PackageMaster_SelectAll";
            this._commandCollection[0].CommandType = CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "dbo.PR_PackageMaster_SelectByPackageID";
            this._commandCollection[1].CommandType = CommandType.StoredProcedure;
            this._commandCollection[1].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new SqlParameter("@PackageID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "dbo.PR_PackageMaster_SelectByPackageName";
            this._commandCollection[2].CommandType = CommandType.StoredProcedure;
            this._commandCollection[2].Parameters.Add(new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new SqlParameter("@PackageName", SqlDbType.NVarChar, 100, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        private void InitConnection()
        {
            this._connection = new SqlConnection();
            this._connection.ConnectionString = Settings.Default.IITS_CloudAccountingConnectionString;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Insert, true), DebuggerNonUserCode]
        public virtual int Insert(ref int? PackageID, string PackageCode, string PackageName, bool? FreeTrialPackage, int? NoOfAdminUsersMin, int? NoOfAdminUsersMax, int? NoOfStaffUsersMin, int? NoOfStaffUsersMax, decimal? PricePerMonth, int? MonthlyPriceCurrencyID, decimal? PricePerYear, int? YearlyPriceCurrencyID, string Description, int? NoOfTrialDays, bool? Status)
        {
            int num2;
            if (PackageID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[1].Value = PackageID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
            }
            if (PackageCode == null)
            {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[2].Value = PackageCode;
            }
            if (PackageName == null)
            {
                this.Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[3].Value = PackageName;
            }
            if (FreeTrialPackage.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[4].Value = FreeTrialPackage.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
            }
            if (NoOfAdminUsersMin.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[5].Value = NoOfAdminUsersMin.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
            }
            if (NoOfAdminUsersMax.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[6].Value = NoOfAdminUsersMax.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
            }
            if (NoOfStaffUsersMin.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[7].Value = NoOfStaffUsersMin.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
            }
            if (NoOfStaffUsersMax.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[8].Value = NoOfStaffUsersMax.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
            }
            if (PricePerMonth.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[9].Value = PricePerMonth.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
            }
            if (MonthlyPriceCurrencyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[10].Value = MonthlyPriceCurrencyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[10].Value = DBNull.Value;
            }
            if (PricePerYear.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[11].Value = PricePerYear.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[11].Value = DBNull.Value;
            }
            if (YearlyPriceCurrencyID.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[12].Value = YearlyPriceCurrencyID.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[12].Value = DBNull.Value;
            }
            if (Description == null)
            {
                this.Adapter.InsertCommand.Parameters[13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[13].Value = Description;
            }
            if (NoOfTrialDays.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[14].Value = NoOfTrialDays.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[14].Value = DBNull.Value;
            }
            if (Status.HasValue)
            {
                this.Adapter.InsertCommand.Parameters[15].Value = Status.Value;
            }
            else
            {
                this.Adapter.InsertCommand.Parameters[15].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.InsertCommand.Connection.State;
            if ((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try
            {
                int num = this.Adapter.InsertCommand.ExecuteNonQuery();
                if ((this.Adapter.InsertCommand.Parameters[1].Value == null) || (this.Adapter.InsertCommand.Parameters[1].Value.GetType() == typeof(DBNull)))
                {
                    PackageID = 0;
                }
                else
                {
                    PackageID = new int?((int) this.Adapter.InsertCommand.Parameters[1].Value);
                }
                num2 = num;
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA dataSet)
        {
            return this.Adapter.Update(dataSet, "PackageMaster");
        }
        
        [DebuggerNonUserCode, HelpKeyword("vs.data.TableAdapter"), GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(CloudAccountDA.PackageMasterDataTable dataTable)
        {
            return this.Adapter.Update(dataTable);
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int Update(DataRow dataRow)
        {
            return this.Adapter.Update(new DataRow[] { dataRow });
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode]
        public virtual int Update(DataRow[] dataRows)
        {
            return this.Adapter.Update(dataRows);
        }
        
        [HelpKeyword("vs.data.TableAdapter"), DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(int? PackageID, string PackageCode, string PackageName, bool? FreeTrialPackage, int? NoOfAdminUsersMin, int? NoOfAdminUsersMax, int? NoOfStaffUsersMin, int? NoOfStaffUsersMax, decimal? PricePerMonth, int? MonthlyPriceCurrencyID, decimal? PricePerYear, int? YearlyPriceCurrencyID, string Description, int? NoOfTrialDays, bool? Status)
        {
            int num2;
            if (PackageID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = PackageID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
            }
            if (PackageCode == null)
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[2].Value = PackageCode;
            }
            if (PackageName == null)
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[3].Value = PackageName;
            }
            if (FreeTrialPackage.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = FreeTrialPackage.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
            }
            if (NoOfAdminUsersMin.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = NoOfAdminUsersMin.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
            }
            if (NoOfAdminUsersMax.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = NoOfAdminUsersMax.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
            }
            if (NoOfStaffUsersMin.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = NoOfStaffUsersMin.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
            }
            if (NoOfStaffUsersMax.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = NoOfStaffUsersMax.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
            }
            if (PricePerMonth.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = PricePerMonth.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
            }
            if (MonthlyPriceCurrencyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = MonthlyPriceCurrencyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            if (PricePerYear.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = PricePerYear.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
            }
            if (YearlyPriceCurrencyID.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = YearlyPriceCurrencyID.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
            }
            if (Description == null)
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[13].Value = Description;
            }
            if (NoOfTrialDays.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = NoOfTrialDays.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
            }
            if (Status.HasValue)
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = Status.Value;
            }
            else
            {
                this.Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
            }
            ConnectionState state = this.Adapter.UpdateCommand.Connection.State;
            if ((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
            {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try
            {
                num2 = this.Adapter.UpdateCommand.ExecuteNonQuery();
            }
            finally
            {
                if (state == ConnectionState.Closed)
                {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
            return num2;
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal SqlDataAdapter Adapter
        {
            get
            {
                if (this._adapter == null)
                {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode, GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill
        {
            get
            {
                return this._clearBeforeFill;
            }
            set
            {
                this._clearBeforeFill = value;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        protected SqlCommand[] CommandCollection
        {
            get
            {
                if (this._commandCollection == null)
                {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlConnection Connection
        {
            get
            {
                if (this._connection == null)
                {
                    this.InitConnection();
                }
                return this._connection;
            }
            set
            {
                this._connection = value;
                if (this.Adapter.InsertCommand != null)
                {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if (this.Adapter.DeleteCommand != null)
                {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if (this.Adapter.UpdateCommand != null)
                {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    if (this.CommandCollection[i] != null)
                    {
                        this.CommandCollection[i].Connection = value;
                    }
                }
            }
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), DebuggerNonUserCode]
        internal SqlTransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                this._transaction = value;
                for (int i = 0; i < this.CommandCollection.Length; i++)
                {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.DeleteCommand != null))
                {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.InsertCommand != null))
                {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if ((this.Adapter != null) && (this.Adapter.UpdateCommand != null))
                {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
    }
}
